{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ipyvizzu - Build animated charts in Jupyter Notebook and similar environments with a simple Python syntax Documentation \u00b7 Examples \u00b7 Code reference \u00b7 Repository ipyvizzu About The Project ipyvizzu is an animated charting tool for Jupyter , Google Colab , Databricks , Kaggle and Deepnote notebooks among other platforms. ipyvizzu enables data scientists and analysts to utilize animation for storytelling with data using Python . It's built on the open-source JavaScript / C++ charting library Vizzu . There is a new extension of ipyvizzu , ipyvizzu-story with which the animated charts can be presented right from the notebooks. Since ipyvizzu-story 's syntax is a bit different to ipyvizzu 's, we suggest you to start from the ipyvizzu-story repo if you're interested in using animated charts to present your findings live or to share your presentation as an HTML file. Similarly to Vizzu , ipyvizzu utilizes a generic dataviz engine that generates many types of charts and seamlessly animates between them. It is designed for building animated data stories as it enables showing different perspectives of the data that the viewers can easily follow. Main features: Designed with animation in focus; Defaults based on data visualization guidelines; Works with Pandas dataframe, while also JSON and inline data input is available; Auto scrolling feature to keep the actual chart in position while executing multiple cells. Installation pip install ipyvizzu Visit Installation chapter for more options and details. Usage You can create the animation below with the following code snippet. import pandas as pd from ipyvizzu import Chart, Data, Config data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/titanic/titanic.csv\" ) data = Data() data.add_data_frame(data_frame) chart = Chart(width=\"640px\", height=\"360px\") chart.animate(data) chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) Documentation Visit our Documentation site for more details and a step-by-step tutorial into ipyvizzu or check out our Example gallery . Environments ipyvizzu can be used in a wide variety of environments, visit Environments chapter for more details. Notebooks Jupyter Notebook Colab Databricks DataCamp Deepnote JupyterLab JupyterLite Kaggle Noteable App platforms Streamlit Flask Panel Mercury/mljar Voil\u00e0 BI tools Mode IDEs PyCharm VSCode Python Extensions ipyvizzu-story adds presentation controls to present data stories live or to share them as an interactive HTML file. Contributing We welcome contributions to the project, visit our contributing guide for further info. Contact Join our Slack if you have any questions or comments: vizzu-community.slack.com Drop us a line at hello@vizzuhq.com Follow us on Twitter: VizzuHQ License Copyright \u00a9 2022-2023 Vizzu . Released under the Apache 2.0 License .","title":"Home"},{"location":"#ipyvizzu","text":"","title":"ipyvizzu"},{"location":"#about-the-project","text":"ipyvizzu is an animated charting tool for Jupyter , Google Colab , Databricks , Kaggle and Deepnote notebooks among other platforms. ipyvizzu enables data scientists and analysts to utilize animation for storytelling with data using Python . It's built on the open-source JavaScript / C++ charting library Vizzu . There is a new extension of ipyvizzu , ipyvizzu-story with which the animated charts can be presented right from the notebooks. Since ipyvizzu-story 's syntax is a bit different to ipyvizzu 's, we suggest you to start from the ipyvizzu-story repo if you're interested in using animated charts to present your findings live or to share your presentation as an HTML file. Similarly to Vizzu , ipyvizzu utilizes a generic dataviz engine that generates many types of charts and seamlessly animates between them. It is designed for building animated data stories as it enables showing different perspectives of the data that the viewers can easily follow. Main features: Designed with animation in focus; Defaults based on data visualization guidelines; Works with Pandas dataframe, while also JSON and inline data input is available; Auto scrolling feature to keep the actual chart in position while executing multiple cells.","title":"About The Project"},{"location":"#installation","text":"pip install ipyvizzu Visit Installation chapter for more options and details.","title":"Installation"},{"location":"#usage","text":"You can create the animation below with the following code snippet. import pandas as pd from ipyvizzu import Chart, Data, Config data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/titanic/titanic.csv\" ) data = Data() data.add_data_frame(data_frame) chart = Chart(width=\"640px\", height=\"360px\") chart.animate(data) chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]}))","title":"Usage"},{"location":"#documentation","text":"Visit our Documentation site for more details and a step-by-step tutorial into ipyvizzu or check out our Example gallery .","title":"Documentation"},{"location":"#environments","text":"ipyvizzu can be used in a wide variety of environments, visit Environments chapter for more details. Notebooks Jupyter Notebook Colab Databricks DataCamp Deepnote JupyterLab JupyterLite Kaggle Noteable App platforms Streamlit Flask Panel Mercury/mljar Voil\u00e0 BI tools Mode IDEs PyCharm VSCode Python","title":"Environments"},{"location":"#extensions","text":"ipyvizzu-story adds presentation controls to present data stories live or to share them as an interactive HTML file.","title":"Extensions"},{"location":"#contributing","text":"We welcome contributions to the project, visit our contributing guide for further info.","title":"Contributing"},{"location":"#contact","text":"Join our Slack if you have any questions or comments: vizzu-community.slack.com Drop us a line at hello@vizzuhq.com Follow us on Twitter: VizzuHQ","title":"Contact"},{"location":"#license","text":"Copyright \u00a9 2022-2023 Vizzu . Released under the Apache 2.0 License .","title":"License"},{"location":"CHANGELOG/","text":"Changelog [Unreleased] [0.14.0] - 2023-03-01 Fixed Changed cdn url to jsdelivr style. Added Changed Vizzu's version to 0.7.x. Added: __all__ into __init__.py [0.13.0] - 2022-10-19 Added Changed Vizzu's version to 0.6.x. [0.12.1] - 2022-07-27 Fixed Fixed requirements, added jsonschema. [0.12.0] - 2022-07-13 Added Added Config presets support. Changed Vizzu's version to 0.5.x. [0.11.1] - 2022-07-12 Added Added py.typed and typing support. [0.11.0] - 2022-06-30 Fixed Fixed multi-line filter expression handling in Data() filter. Fixed multiple Chart usage in the same workspace. Fixed IpyVizzu.clearInhibitScroll if window.IpyVizzu does not exist. Fixed chart.animate(snapshot) call. Added Added Chart.on() and Chart.off() methods, added basic event handling support. Added Chart.log() method, with this the actual config and style can be logged in the browser console. [0.10.1] - 2022-06-12 Fixed Fixed Data schema validation. [0.10.0] - 2022-05-25 Added Added Chart._repr_html_() method. [0.9.0] - 2022-04-29 Added Changed the DataFrame column's type recognition with checking dtype is a numeric type or not . Deprecated infer_types parameter of Data.add_data_frame() , because it can be set via dtype . Added Data.add_data_frame_index(data_frame, name) , with this pandas.DataFrame.index can be added to Data() . Added Data verification by schema. [0.8.1] - 2022-04-14 Fixed Revert pip-compiled dependencies. [0.8.0] - 2022-04-14 Fixed Fixed Data.add_data_frame() in order to handle None and pd.Series as data_frame parameter. Added Changed default value of the Chart.scroll_into_view property to False . Separated the JavaScript code into a JavaScript file instead of the previous string template. Added Chart.show() and DisplayTarget.MANUAL , with these the displaying of the chart can be controlled. [0.7.0] - 2022-03-29 Fixed Fixed image url in the README. Fixed animation display when the first animation is not just Data. Added Added Data.add_data_frame() function to support pandas.DataFrame . Added scroll_into_view chart property. Added example gallery. [0.6.0] - 2022-03-17 Fixed Fixed code snippet in the README. Fixed Publish documentation workflow, pull requests skip push step. Added Added Data.filter() and Data.set_filter() methods. Added Data.add_records() function to add records' list in one step. Added CONTRIBUTING.md. Added Release ipyvizzu workflow. [0.5.0] - 2022-03-12 Fixed Fixed Style , AnimationMerger conflict. Fixed Style , it can be None. Renamed Data.add_serie() to Data.add_series() . Restricted Vizzu's version to 0.4.x. Added Changed animation handling, Chart can be animated across the cells. Added vizzu Chart constructor parameter to change Vizzu's url. Added width and height Chart constructor parameters to change div's width and height. Added display Chart constructor parameter to change div's position. Added Data.from_json() function to import data from json file. Added Snapshot animation. Added Chart.store() function to save a Snapshot . Added Animation options handling through **kwargs of Chart.animate() , then **kwargs can not be configs anymore. Added shorter unique ids. Added unit tests. Added more notebook examples. Added test for notebook examples. Added format and check-format make parameters to format the code with black . Added lint make parameter to analyze the code with pylint . Added test make parameter to run tests. Added check make parameter to run CI check. Added pages build and deploy github action. [0.4.1] - 2022-02-15 Added Added makefile github action. Added distinct animation handling in Chart.animate() . Added Style animation. [0.3.1] - 2022-01-08 Fixed Fixed code snippet in the README. [0.3.0] - 2022-01-08 Fixed Fixed notebook link in documentation. Fixed dev build flag, html targets build every time. Added Changed Chart.set_feature() to Chart.feature() . Changed Chart.set_data() and Chart.set_config() to Chart.animate() . Using modular examples in make doc . Added note about generated JavaScript code errors. [0.2.0] - 2022-01-07 Added Added more notebook examples. Added Chart.set_feature() . Added unique div id. [0.1.1] - 2022-01-07 Added First public release","title":"Changelog"},{"location":"CHANGELOG/#changelog","text":"","title":"Changelog"},{"location":"CHANGELOG/#unreleased","text":"","title":"[Unreleased]"},{"location":"CHANGELOG/#0140-2023-03-01","text":"","title":"[0.14.0] - 2023-03-01"},{"location":"CHANGELOG/#fixed","text":"Changed cdn url to jsdelivr style.","title":"Fixed"},{"location":"CHANGELOG/#added","text":"Changed Vizzu's version to 0.7.x. Added: __all__ into __init__.py","title":"Added"},{"location":"CHANGELOG/#0130-2022-10-19","text":"","title":"[0.13.0] - 2022-10-19"},{"location":"CHANGELOG/#added_1","text":"Changed Vizzu's version to 0.6.x.","title":"Added"},{"location":"CHANGELOG/#0121-2022-07-27","text":"","title":"[0.12.1] - 2022-07-27"},{"location":"CHANGELOG/#fixed_1","text":"Fixed requirements, added jsonschema.","title":"Fixed"},{"location":"CHANGELOG/#0120-2022-07-13","text":"","title":"[0.12.0] - 2022-07-13"},{"location":"CHANGELOG/#added_2","text":"Added Config presets support. Changed Vizzu's version to 0.5.x.","title":"Added"},{"location":"CHANGELOG/#0111-2022-07-12","text":"","title":"[0.11.1] - 2022-07-12"},{"location":"CHANGELOG/#added_3","text":"Added py.typed and typing support.","title":"Added"},{"location":"CHANGELOG/#0110-2022-06-30","text":"","title":"[0.11.0] - 2022-06-30"},{"location":"CHANGELOG/#fixed_2","text":"Fixed multi-line filter expression handling in Data() filter. Fixed multiple Chart usage in the same workspace. Fixed IpyVizzu.clearInhibitScroll if window.IpyVizzu does not exist. Fixed chart.animate(snapshot) call.","title":"Fixed"},{"location":"CHANGELOG/#added_4","text":"Added Chart.on() and Chart.off() methods, added basic event handling support. Added Chart.log() method, with this the actual config and style can be logged in the browser console.","title":"Added"},{"location":"CHANGELOG/#0101-2022-06-12","text":"","title":"[0.10.1] - 2022-06-12"},{"location":"CHANGELOG/#fixed_3","text":"Fixed Data schema validation.","title":"Fixed"},{"location":"CHANGELOG/#0100-2022-05-25","text":"","title":"[0.10.0] - 2022-05-25"},{"location":"CHANGELOG/#added_5","text":"Added Chart._repr_html_() method.","title":"Added"},{"location":"CHANGELOG/#090-2022-04-29","text":"","title":"[0.9.0] - 2022-04-29"},{"location":"CHANGELOG/#added_6","text":"Changed the DataFrame column's type recognition with checking dtype is a numeric type or not . Deprecated infer_types parameter of Data.add_data_frame() , because it can be set via dtype . Added Data.add_data_frame_index(data_frame, name) , with this pandas.DataFrame.index can be added to Data() . Added Data verification by schema.","title":"Added"},{"location":"CHANGELOG/#081-2022-04-14","text":"","title":"[0.8.1] - 2022-04-14"},{"location":"CHANGELOG/#fixed_4","text":"Revert pip-compiled dependencies.","title":"Fixed"},{"location":"CHANGELOG/#080-2022-04-14","text":"","title":"[0.8.0] - 2022-04-14"},{"location":"CHANGELOG/#fixed_5","text":"Fixed Data.add_data_frame() in order to handle None and pd.Series as data_frame parameter.","title":"Fixed"},{"location":"CHANGELOG/#added_7","text":"Changed default value of the Chart.scroll_into_view property to False . Separated the JavaScript code into a JavaScript file instead of the previous string template. Added Chart.show() and DisplayTarget.MANUAL , with these the displaying of the chart can be controlled.","title":"Added"},{"location":"CHANGELOG/#070-2022-03-29","text":"","title":"[0.7.0] - 2022-03-29"},{"location":"CHANGELOG/#fixed_6","text":"Fixed image url in the README. Fixed animation display when the first animation is not just Data.","title":"Fixed"},{"location":"CHANGELOG/#added_8","text":"Added Data.add_data_frame() function to support pandas.DataFrame . Added scroll_into_view chart property. Added example gallery.","title":"Added"},{"location":"CHANGELOG/#060-2022-03-17","text":"","title":"[0.6.0] - 2022-03-17"},{"location":"CHANGELOG/#fixed_7","text":"Fixed code snippet in the README. Fixed Publish documentation workflow, pull requests skip push step.","title":"Fixed"},{"location":"CHANGELOG/#added_9","text":"Added Data.filter() and Data.set_filter() methods. Added Data.add_records() function to add records' list in one step. Added CONTRIBUTING.md. Added Release ipyvizzu workflow.","title":"Added"},{"location":"CHANGELOG/#050-2022-03-12","text":"","title":"[0.5.0] - 2022-03-12"},{"location":"CHANGELOG/#fixed_8","text":"Fixed Style , AnimationMerger conflict. Fixed Style , it can be None. Renamed Data.add_serie() to Data.add_series() . Restricted Vizzu's version to 0.4.x.","title":"Fixed"},{"location":"CHANGELOG/#added_10","text":"Changed animation handling, Chart can be animated across the cells. Added vizzu Chart constructor parameter to change Vizzu's url. Added width and height Chart constructor parameters to change div's width and height. Added display Chart constructor parameter to change div's position. Added Data.from_json() function to import data from json file. Added Snapshot animation. Added Chart.store() function to save a Snapshot . Added Animation options handling through **kwargs of Chart.animate() , then **kwargs can not be configs anymore. Added shorter unique ids. Added unit tests. Added more notebook examples. Added test for notebook examples. Added format and check-format make parameters to format the code with black . Added lint make parameter to analyze the code with pylint . Added test make parameter to run tests. Added check make parameter to run CI check. Added pages build and deploy github action.","title":"Added"},{"location":"CHANGELOG/#041-2022-02-15","text":"","title":"[0.4.1] - 2022-02-15"},{"location":"CHANGELOG/#added_11","text":"Added makefile github action. Added distinct animation handling in Chart.animate() . Added Style animation.","title":"Added"},{"location":"CHANGELOG/#031-2022-01-08","text":"","title":"[0.3.1] - 2022-01-08"},{"location":"CHANGELOG/#fixed_9","text":"Fixed code snippet in the README.","title":"Fixed"},{"location":"CHANGELOG/#030-2022-01-08","text":"","title":"[0.3.0] - 2022-01-08"},{"location":"CHANGELOG/#fixed_10","text":"Fixed notebook link in documentation. Fixed dev build flag, html targets build every time.","title":"Fixed"},{"location":"CHANGELOG/#added_12","text":"Changed Chart.set_feature() to Chart.feature() . Changed Chart.set_data() and Chart.set_config() to Chart.animate() . Using modular examples in make doc . Added note about generated JavaScript code errors.","title":"Added"},{"location":"CHANGELOG/#020-2022-01-07","text":"","title":"[0.2.0] - 2022-01-07"},{"location":"CHANGELOG/#added_13","text":"Added more notebook examples. Added Chart.set_feature() . Added unique div id.","title":"Added"},{"location":"CHANGELOG/#011-2022-01-07","text":"","title":"[0.1.1] - 2022-01-07"},{"location":"CHANGELOG/#added_14","text":"First public release","title":"Added"},{"location":"CODE_OF_CONDUCT/","text":"Code of Conduct See Code of Conduct of the Vizzu community.","title":"Code of Conduct"},{"location":"CODE_OF_CONDUCT/#code-of-conduct","text":"See Code of Conduct of the Vizzu community.","title":"Code of Conduct"},{"location":"CONTRIBUTING/","text":"Contributing Issues You can find our open issues in the project's issue tracker . Please let us know if you find any issues or have any feature requests there. Contributing If you want to contribute to the project, your help is very welcome. Just fork the project, make your changes and send us a pull request. You can find the detailed description of how to do this in Github's guide to contributing to projects . CI-CD Development environment You can initialize the development environment of ipyvizzu with python virtual env. Run the dev make target to set up your environment. make dev Note: The dev make target is going to set up pre-commit and pre-push hooks into your local git repository. Pre-commit hook is going to format the code with black and pre-push hook is going to run the CI steps. Run the clean make target to clear your environment. make clean CI The CI steps check code formatting, run code analyses, check typing and run unit tests over the ipyvizzu project. The check make target collects the above tasks. Run the check make target to run the CI steps. make check Formatting The ipyvizzu project is formatted with black . Run the format make target to format your code. make format Run the check-format target to check code formatting. make check-format Code analyses The ipyvizzu project is analysed with pylint . Run the lint make target to run code analyses. make lint Typing The ipyvizzu project is using type hints. Run the check-typing make target to run check code typing. make check-typing Testing The ipyvizzu project is tested with unittest testing framework. Run the test make target to install ipyvizzu into your virtual environment and run the tests. make test Documentation Run the doc make target to build the documentation. make doc The documentation will be published to the gh-pages branch with the doc workflow. Online version can be read at ipyvizzu.com . The preset, static and animated chart examples are generated from the vizzu-lib repository. If you would like to build them too, run the following commands. git clone --depth 1 https://github.com/vizzuhq/vizzu-lib.git make doc Release ipyvizzu is distributed on pypi . Note: You need to be an administrator to release the project. If you want to release ipyvizzu follow the steps below. You should increase the version number in setup.py . The version bump should be in a separated commit. Create the release notes from the CHANGELOG and publish the new release on Releases . Note: Publishing a new release will automatically trigger the release workflow which builds, checks and uploads the ipyvizzu package to pypi . You can build and check the package before a release with the release make target. make release","title":"Contributing"},{"location":"CONTRIBUTING/#contributing","text":"","title":"Contributing"},{"location":"CONTRIBUTING/#issues","text":"You can find our open issues in the project's issue tracker . Please let us know if you find any issues or have any feature requests there.","title":"Issues"},{"location":"CONTRIBUTING/#contributing_1","text":"If you want to contribute to the project, your help is very welcome. Just fork the project, make your changes and send us a pull request. You can find the detailed description of how to do this in Github's guide to contributing to projects .","title":"Contributing"},{"location":"CONTRIBUTING/#ci-cd","text":"","title":"CI-CD"},{"location":"CONTRIBUTING/#development-environment","text":"You can initialize the development environment of ipyvizzu with python virtual env. Run the dev make target to set up your environment. make dev Note: The dev make target is going to set up pre-commit and pre-push hooks into your local git repository. Pre-commit hook is going to format the code with black and pre-push hook is going to run the CI steps. Run the clean make target to clear your environment. make clean","title":"Development environment"},{"location":"CONTRIBUTING/#ci","text":"The CI steps check code formatting, run code analyses, check typing and run unit tests over the ipyvizzu project. The check make target collects the above tasks. Run the check make target to run the CI steps. make check","title":"CI"},{"location":"CONTRIBUTING/#formatting","text":"The ipyvizzu project is formatted with black . Run the format make target to format your code. make format Run the check-format target to check code formatting. make check-format","title":"Formatting"},{"location":"CONTRIBUTING/#code-analyses","text":"The ipyvizzu project is analysed with pylint . Run the lint make target to run code analyses. make lint","title":"Code analyses"},{"location":"CONTRIBUTING/#typing","text":"The ipyvizzu project is using type hints. Run the check-typing make target to run check code typing. make check-typing","title":"Typing"},{"location":"CONTRIBUTING/#testing","text":"The ipyvizzu project is tested with unittest testing framework. Run the test make target to install ipyvizzu into your virtual environment and run the tests. make test","title":"Testing"},{"location":"CONTRIBUTING/#documentation","text":"Run the doc make target to build the documentation. make doc The documentation will be published to the gh-pages branch with the doc workflow. Online version can be read at ipyvizzu.com . The preset, static and animated chart examples are generated from the vizzu-lib repository. If you would like to build them too, run the following commands. git clone --depth 1 https://github.com/vizzuhq/vizzu-lib.git make doc","title":"Documentation"},{"location":"CONTRIBUTING/#release","text":"ipyvizzu is distributed on pypi . Note: You need to be an administrator to release the project. If you want to release ipyvizzu follow the steps below. You should increase the version number in setup.py . The version bump should be in a separated commit. Create the release notes from the CHANGELOG and publish the new release on Releases . Note: Publishing a new release will automatically trigger the release workflow which builds, checks and uploads the ipyvizzu package to pypi . You can build and check the package before a release with the release make target. make release","title":"Release"},{"location":"LICENSE/","text":"Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright [yyyy] [name of copyright owner] Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"installation/","text":"Installation ipyvizzu requires the IPython , jsonschema and pandas packages. Info ipyvizzu requires and downloads the Vizzu JavaScript/C++ library from jsDelivr CDN , but you can also use a self-hosted version of Vizzu . Check Chart settings chapter for more details. pypi Run the following command to install ipyvizzu from pypi pip install ipyvizzu and this is how to upgrade it. pip install -U ipyvizzu You can use ipyvizzu in Jupyter/IPython , Streamlit or Panel (see Environments chapter for more details). Jupyter/IPython You can install ipyvizzu in your notebook without using the command line by entering the following code into a cell. !pip install ipyvizzu conda / mamba Installing ipyvizzu from conda-forge can be achieved by adding conda-forge to your channels with: conda config --add channels conda-forge conda config --set channel_priority strict Once the conda-forge channel has been enabled, run the following command to install ipyvizzu from conda conda install ipyvizzu # or with mamba: mamba install ipyvizzu and this is how to upgrade it. conda update ipyvizzu # or with mamba: mamba update ipyvizzu","title":"Installation"},{"location":"installation/#installation","text":"ipyvizzu requires the IPython , jsonschema and pandas packages. Info ipyvizzu requires and downloads the Vizzu JavaScript/C++ library from jsDelivr CDN , but you can also use a self-hosted version of Vizzu . Check Chart settings chapter for more details.","title":"Installation"},{"location":"installation/#pypi","text":"Run the following command to install ipyvizzu from pypi pip install ipyvizzu and this is how to upgrade it. pip install -U ipyvizzu You can use ipyvizzu in Jupyter/IPython , Streamlit or Panel (see Environments chapter for more details).","title":"pypi"},{"location":"installation/#jupyteripython","text":"You can install ipyvizzu in your notebook without using the command line by entering the following code into a cell. !pip install ipyvizzu","title":"Jupyter/IPython"},{"location":"installation/#conda-mamba","text":"Installing ipyvizzu from conda-forge can be achieved by adding conda-forge to your channels with: conda config --add channels conda-forge conda config --set channel_priority strict Once the conda-forge channel has been enabled, run the following command to install ipyvizzu from conda conda install ipyvizzu # or with mamba: mamba install ipyvizzu and this is how to upgrade it. conda update ipyvizzu # or with mamba: mamba update ipyvizzu","title":"conda / mamba"},{"location":"dev/","text":"Development We have compiled some information on the development of ipyvizzu here. If you're interested in contributing to our open-source tool (which we highly encourage), please refer to the Contributing chapter. Our community upholds a strict Code of Conduct that we expect all members to follow. Plus, we've got you covered with info on our code's test coverage. Contributing Code of Conduct Coverage report","title":"Development"},{"location":"dev/#development","text":"We have compiled some information on the development of ipyvizzu here. If you're interested in contributing to our open-source tool (which we highly encourage), please refer to the Contributing chapter. Our community upholds a strict Code of Conduct that we expect all members to follow. Plus, we've got you covered with info on our code's test coverage. Contributing Code of Conduct Coverage report","title":"Development"},{"location":"environments/","text":"Environments ipyvizzu can be used in a lot of different environments. We grouped these into several categories. We would love to add more environments and examples, so if you miss anything from our list, please open an issue in our Github repo . Notebooks App platforms BI tools IDEs","title":"Environments"},{"location":"environments/#environments","text":"ipyvizzu can be used in a lot of different environments. We grouped these into several categories. We would love to add more environments and examples, so if you miss anything from our list, please open an issue in our Github repo . Notebooks App platforms BI tools IDEs","title":"Environments"},{"location":"environments/bi/","text":"BI tools ipyvizzu is available in the following BI tools. We would love to add more environments and examples, so if you miss anything from our list, please open an issue in our Github repo . Mode","title":"BI tools"},{"location":"environments/bi/#bi-tools","text":"ipyvizzu is available in the following BI tools. We would love to add more environments and examples, so if you miss anything from our list, please open an issue in our Github repo . Mode","title":"BI tools"},{"location":"environments/bi/mode/","text":"Mode Features The features of ipyvizzu that are available in Mode are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Dislay features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details. Installation Place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu -t \"/tmp\" > /dev/null 2>&1 Sample Try ipyvizzu in Mode with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL ) # add data to Chart data = Data() data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/titanic/titanic.csv\" ) data.add_data_frame(data_frame) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with _repr_html_ method (display=DisplayTarget.MANUAL) chart Check the Tutorial for more info.","title":"Mode"},{"location":"environments/bi/mode/#mode","text":"","title":"Mode"},{"location":"environments/bi/mode/#features","text":"The features of ipyvizzu that are available in Mode are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Dislay features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details.","title":"Features"},{"location":"environments/bi/mode/#installation","text":"Place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu -t \"/tmp\" > /dev/null 2>&1","title":"Installation"},{"location":"environments/bi/mode/#sample","text":"Try ipyvizzu in Mode with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL ) # add data to Chart data = Data() data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/titanic/titanic.csv\" ) data.add_data_frame(data_frame) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with _repr_html_ method (display=DisplayTarget.MANUAL) chart Check the Tutorial for more info.","title":"Sample"},{"location":"environments/ide/","text":"IDEs ipyvizzu is available in the following IDEs. We would love to add more environments and examples, so if you miss anything from our list, please open an issue in our Github repo . PyCharm VSCode Python","title":"IDEs"},{"location":"environments/ide/#ides","text":"ipyvizzu is available in the following IDEs. We would love to add more environments and examples, so if you miss anything from our list, please open an issue in our Github repo . PyCharm VSCode Python","title":"IDEs"},{"location":"environments/ide/pycharm/","text":"PyCharm Features The features of ipyvizzu that are available in PyCharm Professional are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Dislay features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details. Installation Run the following command in your command line pip install ipyvizzu or place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu Sample Try ipyvizzu in PyCharm Professional with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL ) # add data to Chart data = Data() data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/titanic/titanic.csv\" ) data.add_data_frame(data_frame) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with _repr_html_() method (display=DisplayTarget.MANUAL) chart Check the Tutorial for more info.","title":"PyCharm"},{"location":"environments/ide/pycharm/#pycharm","text":"","title":"PyCharm"},{"location":"environments/ide/pycharm/#features","text":"The features of ipyvizzu that are available in PyCharm Professional are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Dislay features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details.","title":"Features"},{"location":"environments/ide/pycharm/#installation","text":"Run the following command in your command line pip install ipyvizzu or place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu","title":"Installation"},{"location":"environments/ide/pycharm/#sample","text":"Try ipyvizzu in PyCharm Professional with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL ) # add data to Chart data = Data() data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/titanic/titanic.csv\" ) data.add_data_frame(data_frame) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with _repr_html_() method (display=DisplayTarget.MANUAL) chart Check the Tutorial for more info.","title":"Sample"},{"location":"environments/ide/vscode/","text":"VSCode Python Features The features of ipyvizzu that are available in VSCode Python are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Dislay features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details. Installation Run the following command in your command line pip install ipyvizzu or place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu Sample Try ipyvizzu in VSCode Python with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL ) # add data to Chart data = Data() data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/titanic/titanic.csv\" ) data.add_data_frame(data_frame) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with _repr_html_() method (display=DisplayTarget.MANUAL) chart Check the Tutorial for more info.","title":"VSCode Python"},{"location":"environments/ide/vscode/#vscode-python","text":"","title":"VSCode Python"},{"location":"environments/ide/vscode/#features","text":"The features of ipyvizzu that are available in VSCode Python are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Dislay features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details.","title":"Features"},{"location":"environments/ide/vscode/#installation","text":"Run the following command in your command line pip install ipyvizzu or place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu","title":"Installation"},{"location":"environments/ide/vscode/#sample","text":"Try ipyvizzu in VSCode Python with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL ) # add data to Chart data = Data() data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/titanic/titanic.csv\" ) data.add_data_frame(data_frame) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with _repr_html_() method (display=DisplayTarget.MANUAL) chart Check the Tutorial for more info.","title":"Sample"},{"location":"environments/notebook/","text":"Notebooks ipyvizzu is available in the following Notebooks. We would love to add more environments and examples, so if you miss anything from our list, please open an issue in our Github repo . Jupyter Notebook Colab Databricks DataCamp Deepnote JupyterLab JupyterLite Kaggle Noteable","title":"Notebooks"},{"location":"environments/notebook/#notebooks","text":"ipyvizzu is available in the following Notebooks. We would love to add more environments and examples, so if you miss anything from our list, please open an issue in our Github repo . Jupyter Notebook Colab Databricks DataCamp Deepnote JupyterLab JupyterLite Kaggle Noteable","title":"Notebooks"},{"location":"environments/notebook/colab/","text":"Colab Features The features of ipyvizzu that are available in Colab are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Dislay features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details. Live example Installation Place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu Sample Try ipyvizzu in Colab with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL ) # add data to Chart data = Data() data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/titanic/titanic.csv\" ) data.add_data_frame(data_frame) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL) chart.show() # chart Check the Tutorial for more info.","title":"Colab"},{"location":"environments/notebook/colab/#colab","text":"","title":"Colab"},{"location":"environments/notebook/colab/#features","text":"The features of ipyvizzu that are available in Colab are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Dislay features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details.","title":"Features"},{"location":"environments/notebook/colab/#live-example","text":"","title":"Live example"},{"location":"environments/notebook/colab/#installation","text":"Place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu","title":"Installation"},{"location":"environments/notebook/colab/#sample","text":"Try ipyvizzu in Colab with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL ) # add data to Chart data = Data() data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/titanic/titanic.csv\" ) data.add_data_frame(data_frame) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL) chart.show() # chart Check the Tutorial for more info.","title":"Sample"},{"location":"environments/notebook/databricks/","text":"Databricks Features The features of ipyvizzu that are available in Databricks are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Dislay features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details. Live example Open in Databricks Installation Place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu Sample Try ipyvizzu in Databricks with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL ) # add data to Chart data = Data() data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/titanic/titanic.csv\" ) data.add_data_frame(data_frame) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with _repr_html_ method (display=DisplayTarget.MANUAL) chart Check the Tutorial for more info.","title":"Databricks"},{"location":"environments/notebook/databricks/#databricks","text":"","title":"Databricks"},{"location":"environments/notebook/databricks/#features","text":"The features of ipyvizzu that are available in Databricks are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Dislay features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details.","title":"Features"},{"location":"environments/notebook/databricks/#live-example","text":"Open in Databricks","title":"Live example"},{"location":"environments/notebook/databricks/#installation","text":"Place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu","title":"Installation"},{"location":"environments/notebook/databricks/#sample","text":"Try ipyvizzu in Databricks with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL ) # add data to Chart data = Data() data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/titanic/titanic.csv\" ) data.add_data_frame(data_frame) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with _repr_html_ method (display=DisplayTarget.MANUAL) chart Check the Tutorial for more info.","title":"Sample"},{"location":"environments/notebook/datacamp/","text":"DataCamp Features The features of ipyvizzu that are available in DataCamp are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Dislay features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) * Display all animations after show method called ( display = DisplayTarget.MANUAL ) * Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) * Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) * Automatically display all animations after the last running cell ( display = DisplayTarget.END ) * Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) * ipyvizzu does not work in the default editor, switch to the JupyterLab -style editor Check Chart settings chapter for more details. Installation Place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu Sample Try ipyvizzu in DataCamp with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\" ) # or Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.ACTUAL) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.BEGIN) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.END) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL) # add data to Chart data = Data() data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/titanic/titanic.csv\" ) data.add_data_frame(data_frame) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL) # chart.show() # chart Check the Tutorial for more info.","title":"DataCamp"},{"location":"environments/notebook/datacamp/#datacamp","text":"","title":"DataCamp"},{"location":"environments/notebook/datacamp/#features","text":"The features of ipyvizzu that are available in DataCamp are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Dislay features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) * Display all animations after show method called ( display = DisplayTarget.MANUAL ) * Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) * Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) * Automatically display all animations after the last running cell ( display = DisplayTarget.END ) * Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) * ipyvizzu does not work in the default editor, switch to the JupyterLab -style editor Check Chart settings chapter for more details.","title":"Features"},{"location":"environments/notebook/datacamp/#installation","text":"Place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu","title":"Installation"},{"location":"environments/notebook/datacamp/#sample","text":"Try ipyvizzu in DataCamp with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\" ) # or Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.ACTUAL) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.BEGIN) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.END) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL) # add data to Chart data = Data() data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/titanic/titanic.csv\" ) data.add_data_frame(data_frame) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL) # chart.show() # chart Check the Tutorial for more info.","title":"Sample"},{"location":"environments/notebook/deepnote/","text":"Deepnote Features The features of ipyvizzu that are available in Deepnote are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Dislay features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details. Live example Installation Place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu Sample Try ipyvizzu in Deepnote with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL ) # add data to Chart data = Data() data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/titanic/titanic.csv\" ) data.add_data_frame(data_frame) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL) chart.show() # chart Check the Tutorial for more info.","title":"Deepnote"},{"location":"environments/notebook/deepnote/#deepnote","text":"","title":"Deepnote"},{"location":"environments/notebook/deepnote/#features","text":"The features of ipyvizzu that are available in Deepnote are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Dislay features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details.","title":"Features"},{"location":"environments/notebook/deepnote/#live-example","text":"","title":"Live example"},{"location":"environments/notebook/deepnote/#installation","text":"Place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu","title":"Installation"},{"location":"environments/notebook/deepnote/#sample","text":"Try ipyvizzu in Deepnote with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL ) # add data to Chart data = Data() data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/titanic/titanic.csv\" ) data.add_data_frame(data_frame) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL) chart.show() # chart Check the Tutorial for more info.","title":"Sample"},{"location":"environments/notebook/jupyterlab/","text":"JupyterLab Features The features of ipyvizzu that are available in JupyterLab are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Dislay features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details. Installation Run the following command in your command line pip install ipyvizzu or place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu Sample Try ipyvizzu in JupyterLab with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\" ) # or Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.ACTUAL) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.BEGIN) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.END) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL) # add data to Chart data = Data() data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/titanic/titanic.csv\" ) data.add_data_frame(data_frame) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL) # chart.show() # chart Check the Tutorial for more info.","title":"JupyterLab"},{"location":"environments/notebook/jupyterlab/#jupyterlab","text":"","title":"JupyterLab"},{"location":"environments/notebook/jupyterlab/#features","text":"The features of ipyvizzu that are available in JupyterLab are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Dislay features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details.","title":"Features"},{"location":"environments/notebook/jupyterlab/#installation","text":"Run the following command in your command line pip install ipyvizzu or place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu","title":"Installation"},{"location":"environments/notebook/jupyterlab/#sample","text":"Try ipyvizzu in JupyterLab with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\" ) # or Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.ACTUAL) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.BEGIN) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.END) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL) # add data to Chart data = Data() data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/titanic/titanic.csv\" ) data.add_data_frame(data_frame) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL) # chart.show() # chart Check the Tutorial for more info.","title":"Sample"},{"location":"environments/notebook/jupyterlite/","text":"JupyterLite Features The features of ipyvizzu that are available in JupyterLite are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Dislay features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details. Installation Place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). import micropip await micropip.install(\"ipyvizzu\") Sample Try ipyvizzu in JupyterLite with the following sample. # import pandas, js, asyncio, StringIO and ipyvizzu import pandas as pd import js, asyncio from io import StringIO from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\" ) # or Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.ACTUAL) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.BEGIN) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.END) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL) # add data to Chart # download data from # \"https://ipyvizzu.vizzuhq.com/0.14/showcases/titanic/titanic.csv\" # and place it in your JupyterLite workspace DB_NAME = \"JupyterLite Storage\" async def get_contents(path): \"\"\"use the IndexedDB API to acess JupyterLite's in-browser storage for documentation purposes, the full names of the JS API objects are used. see https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest \"\"\" queue = asyncio.Queue(1) IDBOpenDBRequest = js.self.indexedDB.open(DB_NAME) IDBOpenDBRequest.onsuccess = ( IDBOpenDBRequest.onerror ) = queue.put_nowait await queue.get() if IDBOpenDBRequest.result is None: return None IDBTransaction = IDBOpenDBRequest.result.transaction( \"files\", \"readonly\" ) IDBObjectStore = IDBTransaction.objectStore(\"files\") IDBRequest = IDBObjectStore.get(path, \"key\") IDBRequest.onsuccess = IDBRequest.onerror = queue.put_nowait await queue.get() return IDBRequest.result.to_py() if IDBRequest.result else None data = Data() data_csv = await get_contents(\"titanic.csv\") data_frame = pd.read_csv(StringIO(data_csv[\"content\"])) data.add_data_frame(data_frame) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL) # chart.show() # chart Check the Tutorial for more info.","title":"JupyterLite"},{"location":"environments/notebook/jupyterlite/#jupyterlite","text":"","title":"JupyterLite"},{"location":"environments/notebook/jupyterlite/#features","text":"The features of ipyvizzu that are available in JupyterLite are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Dislay features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details.","title":"Features"},{"location":"environments/notebook/jupyterlite/#installation","text":"Place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). import micropip await micropip.install(\"ipyvizzu\")","title":"Installation"},{"location":"environments/notebook/jupyterlite/#sample","text":"Try ipyvizzu in JupyterLite with the following sample. # import pandas, js, asyncio, StringIO and ipyvizzu import pandas as pd import js, asyncio from io import StringIO from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\" ) # or Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.ACTUAL) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.BEGIN) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.END) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL) # add data to Chart # download data from # \"https://ipyvizzu.vizzuhq.com/0.14/showcases/titanic/titanic.csv\" # and place it in your JupyterLite workspace DB_NAME = \"JupyterLite Storage\" async def get_contents(path): \"\"\"use the IndexedDB API to acess JupyterLite's in-browser storage for documentation purposes, the full names of the JS API objects are used. see https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest \"\"\" queue = asyncio.Queue(1) IDBOpenDBRequest = js.self.indexedDB.open(DB_NAME) IDBOpenDBRequest.onsuccess = ( IDBOpenDBRequest.onerror ) = queue.put_nowait await queue.get() if IDBOpenDBRequest.result is None: return None IDBTransaction = IDBOpenDBRequest.result.transaction( \"files\", \"readonly\" ) IDBObjectStore = IDBTransaction.objectStore(\"files\") IDBRequest = IDBObjectStore.get(path, \"key\") IDBRequest.onsuccess = IDBRequest.onerror = queue.put_nowait await queue.get() return IDBRequest.result.to_py() if IDBRequest.result else None data = Data() data_csv = await get_contents(\"titanic.csv\") data_frame = pd.read_csv(StringIO(data_csv[\"content\"])) data.add_data_frame(data_frame) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL) # chart.show() # chart Check the Tutorial for more info.","title":"Sample"},{"location":"environments/notebook/jupyternotebook/","text":"Jupyter Notebook Features The features of ipyvizzu that are available in Jupyter Notebook are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Dislay features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details. Installation Run the following command in your command line pip install ipyvizzu or place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu Sample Try ipyvizzu in Jupyter Notebook with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\" ) # or Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.ACTUAL) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.BEGIN) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.END) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL) # add data to Chart data = Data() data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/titanic/titanic.csv\" ) data.add_data_frame(data_frame) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL) # chart.show() # chart Check the Tutorial for more info.","title":"Jupyter Notebook"},{"location":"environments/notebook/jupyternotebook/#jupyter-notebook","text":"","title":"Jupyter Notebook"},{"location":"environments/notebook/jupyternotebook/#features","text":"The features of ipyvizzu that are available in Jupyter Notebook are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Dislay features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details.","title":"Features"},{"location":"environments/notebook/jupyternotebook/#installation","text":"Run the following command in your command line pip install ipyvizzu or place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu","title":"Installation"},{"location":"environments/notebook/jupyternotebook/#sample","text":"Try ipyvizzu in Jupyter Notebook with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\" ) # or Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.ACTUAL) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.BEGIN) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.END) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL) # add data to Chart data = Data() data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/titanic/titanic.csv\" ) data.add_data_frame(data_frame) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL) # chart.show() # chart Check the Tutorial for more info.","title":"Sample"},{"location":"environments/notebook/kaggle/","text":"Kaggle Features The features of ipyvizzu that are available in Kaggle are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Dislay features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details. Live example Installation Place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu Sample Try ipyvizzu in Kaggle with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\" ) # or Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.ACTUAL) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.BEGIN) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.END) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL) # add data to Chart data = Data() data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/titanic/titanic.csv\" ) data.add_data_frame(data_frame) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL) # chart.show() # chart Check the Tutorial for more info.","title":"Kaggle"},{"location":"environments/notebook/kaggle/#kaggle","text":"","title":"Kaggle"},{"location":"environments/notebook/kaggle/#features","text":"The features of ipyvizzu that are available in Kaggle are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Dislay features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details.","title":"Features"},{"location":"environments/notebook/kaggle/#live-example","text":"","title":"Live example"},{"location":"environments/notebook/kaggle/#installation","text":"Place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu","title":"Installation"},{"location":"environments/notebook/kaggle/#sample","text":"Try ipyvizzu in Kaggle with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\" ) # or Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.ACTUAL) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.BEGIN) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.END) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL) # add data to Chart data = Data() data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/titanic/titanic.csv\" ) data.add_data_frame(data_frame) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL) # chart.show() # chart Check the Tutorial for more info.","title":"Sample"},{"location":"environments/notebook/noteable/","text":"Noteable Features The features of ipyvizzu that are available in Noteable are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Dislay features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details. Installation Place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu Sample Try ipyvizzu in Noteable with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\" ) # or Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.ACTUAL) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.BEGIN) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.END) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL) # add data to Chart data = Data() data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/titanic/titanic.csv\" ) data.add_data_frame(data_frame) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL) # chart.show() # chart Check the Tutorial for more info.","title":"Noteable"},{"location":"environments/notebook/noteable/#noteable","text":"","title":"Noteable"},{"location":"environments/notebook/noteable/#features","text":"The features of ipyvizzu that are available in Noteable are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Dislay features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details.","title":"Features"},{"location":"environments/notebook/noteable/#installation","text":"Place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu","title":"Installation"},{"location":"environments/notebook/noteable/#sample","text":"Try ipyvizzu in Noteable with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\" ) # or Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.ACTUAL) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.BEGIN) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.END) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL) # add data to Chart data = Data() data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/titanic/titanic.csv\" ) data.add_data_frame(data_frame) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL) # chart.show() # chart Check the Tutorial for more info.","title":"Sample"},{"location":"environments/platform/","text":"App platforms ipyvizzu is available in the following App platforms. We would love to add more environments and examples, so if you miss anything from our list, please open an issue in our Github repo . Streamlit Flask Panel Mercury/mljar Voil\u00e0","title":"App platforms"},{"location":"environments/platform/#app-platforms","text":"ipyvizzu is available in the following App platforms. We would love to add more environments and examples, so if you miss anything from our list, please open an issue in our Github repo . Streamlit Flask Panel Mercury/mljar Voil\u00e0","title":"App platforms"},{"location":"environments/platform/flask/","text":"Flask Features The features of ipyvizzu that are available in Flask are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Dislay features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) * Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details. *you can display the Chart in other ways, see the sample below Installation Run the following command in your command line in order to install ipyvizzu (visit Installation chapter for more options and details). pip install ipyvizzu flask Sample Try ipyvizzu in Flask with the following sample. # import flask, pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget from flask import Flask, render_template # initialize Chart chart = Chart( width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL ) # add data to Chart data = Data() data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/titanic/titanic.csv\" ) data.add_data_frame(data_frame) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart app = Flask(__name__) html = chart._repr_html_() @app.route(\"/\") def vizzu(): return render_template(\"vizzu.html\", mychart=html) Place the above code blocks into a python file (for example called application.py ), create the html template ( templates/vizzu.html ) with the following content <!DOCTYPE html> <html> <body> <div class=\"container\"> <iframe frameborder=\"0\" height=\"480px\" scrolling=\"no\" src=\"data:text/html, {{ mychart }}\" width=\"800px\"> </iframe> </div> </body> </html> and run the following command in your command line in order to try it. flask --app application run Check the Tutorial for more info.","title":"Flask"},{"location":"environments/platform/flask/#flask","text":"","title":"Flask"},{"location":"environments/platform/flask/#features","text":"The features of ipyvizzu that are available in Flask are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Dislay features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) * Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details. *you can display the Chart in other ways, see the sample below","title":"Features"},{"location":"environments/platform/flask/#installation","text":"Run the following command in your command line in order to install ipyvizzu (visit Installation chapter for more options and details). pip install ipyvizzu flask","title":"Installation"},{"location":"environments/platform/flask/#sample","text":"Try ipyvizzu in Flask with the following sample. # import flask, pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget from flask import Flask, render_template # initialize Chart chart = Chart( width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL ) # add data to Chart data = Data() data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/titanic/titanic.csv\" ) data.add_data_frame(data_frame) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart app = Flask(__name__) html = chart._repr_html_() @app.route(\"/\") def vizzu(): return render_template(\"vizzu.html\", mychart=html) Place the above code blocks into a python file (for example called application.py ), create the html template ( templates/vizzu.html ) with the following content <!DOCTYPE html> <html> <body> <div class=\"container\"> <iframe frameborder=\"0\" height=\"480px\" scrolling=\"no\" src=\"data:text/html, {{ mychart }}\" width=\"800px\"> </iframe> </div> </body> </html> and run the following command in your command line in order to try it. flask --app application run Check the Tutorial for more info.","title":"Sample"},{"location":"environments/platform/mercury/","text":"Mercury/mljar Features The features of ipyvizzu that are available in Mercury/mljar are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Dislay features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details. Installation Add ipyvizzu to requirements.txt . python-dotenv pandas mljar-mercury ipyvizzu Sample Try ipyvizzu in Mercury/mljar with the following sample. # configure application --- title: ipyvizzu demo description: ipyvizzu mercury demo show-code: False params: params: gender: input: select label: select the gender choices: [male, female] multi: False --- # configure default choice gender = \"male\" # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\" ) # or Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.ACTUAL) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.BEGIN) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.END) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL) # add data to Chart data = Data() data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/titanic/titanic.csv\" ) data.add_data_frame(data_frame) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # filter data by the selected gender to Chart data_filter = Data.filter(f\"record['Sex'] == '{gender}'\") chart.animate(data_filter) # display Chart with show method (display=DisplayTarget.MANUAL) # chart.show() Check the Tutorial for more info.","title":"Mercury/mljar"},{"location":"environments/platform/mercury/#mercurymljar","text":"","title":"Mercury/mljar"},{"location":"environments/platform/mercury/#features","text":"The features of ipyvizzu that are available in Mercury/mljar are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Dislay features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details.","title":"Features"},{"location":"environments/platform/mercury/#installation","text":"Add ipyvizzu to requirements.txt . python-dotenv pandas mljar-mercury ipyvizzu","title":"Installation"},{"location":"environments/platform/mercury/#sample","text":"Try ipyvizzu in Mercury/mljar with the following sample. # configure application --- title: ipyvizzu demo description: ipyvizzu mercury demo show-code: False params: params: gender: input: select label: select the gender choices: [male, female] multi: False --- # configure default choice gender = \"male\" # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\" ) # or Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.ACTUAL) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.BEGIN) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.END) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL) # add data to Chart data = Data() data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/titanic/titanic.csv\" ) data.add_data_frame(data_frame) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # filter data by the selected gender to Chart data_filter = Data.filter(f\"record['Sex'] == '{gender}'\") chart.animate(data_filter) # display Chart with show method (display=DisplayTarget.MANUAL) # chart.show() Check the Tutorial for more info.","title":"Sample"},{"location":"environments/platform/panel/","text":"Panel Features The features of ipyvizzu that are available in Panel are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Dislay features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details. Installation Run the following command in your command line in order to install ipyvizzu (visit Installation chapter for more options and details). pip install ipyvizzu panel Sample Try ipyvizzu in Panel with the following sample. # import panel, pandas and ipyvizzu import panel as pn import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget def create_chart(): # initialize chart chart = Chart( width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL ) # create and add data to Chart data = Data() data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/titanic/titanic.csv\" ) data.add_data_frame(data_frame) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # return Chart return chart # create Chart CHART = create_chart() # display Chart pn.extension(sizing_mode=\"stretch_width\", template=\"fast\") pn.state.template.param.update( title=\"ipyvizzu\", ) pn.pane.Markdown( \"\"\" # Panel demo with ipyvizzu \"\"\" ).servable() pn.pane.HTML(CHART, height=370, sizing_mode=\"stretch_both\").servable() Place the above code blocks into a python file (for example called ipyvizzu_example.py ) and run the following command in your command line in order to try it. panel serve ipyvizzu_example.py --autoreload Check the Tutorial for more info.","title":"Panel"},{"location":"environments/platform/panel/#panel","text":"","title":"Panel"},{"location":"environments/platform/panel/#features","text":"The features of ipyvizzu that are available in Panel are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Dislay features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details.","title":"Features"},{"location":"environments/platform/panel/#installation","text":"Run the following command in your command line in order to install ipyvizzu (visit Installation chapter for more options and details). pip install ipyvizzu panel","title":"Installation"},{"location":"environments/platform/panel/#sample","text":"Try ipyvizzu in Panel with the following sample. # import panel, pandas and ipyvizzu import panel as pn import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget def create_chart(): # initialize chart chart = Chart( width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL ) # create and add data to Chart data = Data() data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/titanic/titanic.csv\" ) data.add_data_frame(data_frame) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # return Chart return chart # create Chart CHART = create_chart() # display Chart pn.extension(sizing_mode=\"stretch_width\", template=\"fast\") pn.state.template.param.update( title=\"ipyvizzu\", ) pn.pane.Markdown( \"\"\" # Panel demo with ipyvizzu \"\"\" ).servable() pn.pane.HTML(CHART, height=370, sizing_mode=\"stretch_both\").servable() Place the above code blocks into a python file (for example called ipyvizzu_example.py ) and run the following command in your command line in order to try it. panel serve ipyvizzu_example.py --autoreload Check the Tutorial for more info.","title":"Sample"},{"location":"environments/platform/streamlit/","text":"Streamlit There is a new Streamlit component, streamlit-vizzu , that allow you to interact with an ipyvizzu chart within a Streamlit app without the chart being redrawn on every interaction. Features The features of ipyvizzu that are available in Streamlit are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Dislay features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details. Installation Run the following command in your command line in order to install ipyvizzu (visit Installation chapter for more options and details). pip install ipyvizzu streamlit Sample Try ipyvizzu in Streamlit with the following sample. # import streamlit, pandas and ipyvizzu from streamlit.components.v1 import html import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget def create_chart(): # initialize Chart chart = Chart( width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL ) # create and add data to Chart data = Data() data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/titanic/titanic.csv\" ) data.add_data_frame(data_frame) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # return generated html code return chart._repr_html_() # generate Chart's html code CHART = create_chart() # display Chart html(CHART, width=650, height=370) Place the above code blocks into a python file (for example called ipyvizzu_example.py ) and run the following command in your command line in order to try it. streamlit run ipyvizzu_example.py Check the Tutorial for more info.","title":"Streamlit"},{"location":"environments/platform/streamlit/#streamlit","text":"There is a new Streamlit component, streamlit-vizzu , that allow you to interact with an ipyvizzu chart within a Streamlit app without the chart being redrawn on every interaction.","title":"Streamlit"},{"location":"environments/platform/streamlit/#features","text":"The features of ipyvizzu that are available in Streamlit are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Dislay features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details.","title":"Features"},{"location":"environments/platform/streamlit/#installation","text":"Run the following command in your command line in order to install ipyvizzu (visit Installation chapter for more options and details). pip install ipyvizzu streamlit","title":"Installation"},{"location":"environments/platform/streamlit/#sample","text":"Try ipyvizzu in Streamlit with the following sample. # import streamlit, pandas and ipyvizzu from streamlit.components.v1 import html import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget def create_chart(): # initialize Chart chart = Chart( width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL ) # create and add data to Chart data = Data() data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/titanic/titanic.csv\" ) data.add_data_frame(data_frame) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # return generated html code return chart._repr_html_() # generate Chart's html code CHART = create_chart() # display Chart html(CHART, width=650, height=370) Place the above code blocks into a python file (for example called ipyvizzu_example.py ) and run the following command in your command line in order to try it. streamlit run ipyvizzu_example.py Check the Tutorial for more info.","title":"Sample"},{"location":"environments/platform/voila/","text":"Voil\u00e0 Features The features of ipyvizzu that are available in Voil\u00e0 are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Dislay features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details. Installation Run the following command in your command line pip install ipyvizzu voila or place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu Sample Try ipyvizzu in Voil\u00e0 with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\" ) # or Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.ACTUAL) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.BEGIN) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.END) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL) # add data to Chart data = Data() data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/titanic/titanic.csv\" ) data.add_data_frame(data_frame) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL) # chart.show() # chart Place the above code blocks into notebook cells in a notebook file (for example called ipyvizzu_example.ipynb ) and run the following command in your command line in order to try it. voila ipyvizzu_example.ipynb Check the Tutorial for more info.","title":"Voil\u00e0"},{"location":"environments/platform/voila/#voila","text":"","title":"Voil\u00e0"},{"location":"environments/platform/voila/#features","text":"The features of ipyvizzu that are available in Voil\u00e0 are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Dislay features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details.","title":"Features"},{"location":"environments/platform/voila/#installation","text":"Run the following command in your command line pip install ipyvizzu voila or place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu","title":"Installation"},{"location":"environments/platform/voila/#sample","text":"Try ipyvizzu in Voil\u00e0 with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\" ) # or Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.ACTUAL) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.BEGIN) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.END) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL) # add data to Chart data = Data() data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/titanic/titanic.csv\" ) data.add_data_frame(data_frame) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL) # chart.show() # chart Place the above code blocks into notebook cells in a notebook file (for example called ipyvizzu_example.ipynb ) and run the following command in your command line in order to try it. voila ipyvizzu_example.ipynb Check the Tutorial for more info.","title":"Sample"},{"location":"examples/","text":"Examples The ipyvizzu examples are grouped into four categories. Preset charts : Examples of the well-known chart types ipyvizzu offers a shorthand for, as described in the Chart presets chapter of the Tutorial. Animated charts : Simple animations from one well-known chart to another to provide you with inspiration and reusable code for some transitions. Static charts : Examples of well-known chart types configured with the original chart type-agnostic syntax of ipyvizzu .","title":"Examples"},{"location":"examples/#examples","text":"The ipyvizzu examples are grouped into four categories. Preset charts : Examples of the well-known chart types ipyvizzu offers a shorthand for, as described in the Chart presets chapter of the Tutorial. Animated charts : Simple animations from one well-known chart to another to provide you with inspiration and reusable code for some transitions. Static charts : Examples of well-known chart types configured with the original chart type-agnostic syntax of ipyvizzu .","title":"Examples"},{"location":"examples/animated/","text":"Animated charts","title":"Animated charts"},{"location":"examples/animated/#animated-charts","text":"","title":"Animated charts"},{"location":"examples/animated/composition_comparison_pie_coxcomb_column_2dis_2con/","text":"Pie to Coxcomb Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/infinite_data.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Value 1\", \"Joy factors\"], \"color\": \"Joy factors\", \"label\": \"Value 1\", }, \"title\": \"Pie Chart\", \"coordSystem\": \"polar\", } ) ) chart.animate( Config( { \"channels\": { \"x\": [ \"Value 1\", \"Joy factors\", \"Region\", \"Country code\", ], \"label\": None, } } ), duration=\"500ms\", ) chart.animate( Config( { \"channels\": { \"x\": [ \"Value 1\", \"Joy factors\", \"Region\", \"Country code\", ], \"y\": {\"set\": \"Value 3\", \"range\": {\"min\": \"-60%\"}}, }, \"title\": \"Coxcomb Chart\", } ) )","title":"Pie  to Coxcomb"},{"location":"examples/animated/composition_comparison_pie_coxcomb_column_2dis_2con/#pie-to-coxcomb","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/infinite_data.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Value 1\", \"Joy factors\"], \"color\": \"Joy factors\", \"label\": \"Value 1\", }, \"title\": \"Pie Chart\", \"coordSystem\": \"polar\", } ) ) chart.animate( Config( { \"channels\": { \"x\": [ \"Value 1\", \"Joy factors\", \"Region\", \"Country code\", ], \"label\": None, } } ), duration=\"500ms\", ) chart.animate( Config( { \"channels\": { \"x\": [ \"Value 1\", \"Joy factors\", \"Region\", \"Country code\", ], \"y\": {\"set\": \"Value 3\", \"range\": {\"min\": \"-60%\"}}, }, \"title\": \"Coxcomb Chart\", } ) )","title":"Pie  to Coxcomb"},{"location":"examples/animated/composition_comparison_waterfall_column_2dis_1con/","text":"Waterfall to Column Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Year\", \"Value 5 (+/-)\"], \"color\": { \"set\": [\"Value 5 (+/-)\"], \"range\": {\"min\": \"-45\", \"max\": \"45\"}, }, \"noop\": \"Country\", \"label\": \"Value 5 (+/-)\", }, \"title\": \"Waterfall Chart\", \"legend\": \"color\", } ), Style( { \"plot\": { \"marker\": { \"colorGradient\": \"#3d51b8 0,#6389ec 0.15,#9fbffa 0.35,#d5d7d9 0.5,#f4b096 0.65,#e36c56 0.85,#ac1727 1\", \"label\": {\"position\": \"top\"}, } } } ), ) chart.animate( Config( {\"channels\": {\"y\": \"Value 5 (+/-)\"}, \"title\": \"Column Chart\"} ) )","title":"Waterfall  to Column"},{"location":"examples/animated/composition_comparison_waterfall_column_2dis_1con/#waterfall-to-column","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Year\", \"Value 5 (+/-)\"], \"color\": { \"set\": [\"Value 5 (+/-)\"], \"range\": {\"min\": \"-45\", \"max\": \"45\"}, }, \"noop\": \"Country\", \"label\": \"Value 5 (+/-)\", }, \"title\": \"Waterfall Chart\", \"legend\": \"color\", } ), Style( { \"plot\": { \"marker\": { \"colorGradient\": \"#3d51b8 0,#6389ec 0.15,#9fbffa 0.35,#d5d7d9 0.5,#f4b096 0.65,#e36c56 0.85,#ac1727 1\", \"label\": {\"position\": \"top\"}, } } } ), ) chart.animate( Config( {\"channels\": {\"y\": \"Value 5 (+/-)\"}, \"title\": \"Column Chart\"} ) )","title":"Waterfall  to Column"},{"location":"examples/animated/composition_percentage_area_stream_3dis_1con/","text":"Stacked Area to Split Area Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_14.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Value 2 (+)\", \"Country\"], \"color\": \"Country\", }, \"title\": \"Stacked Area Chart\", \"geometry\": \"area\", } ) ) chart.animate( Config({\"title\": \"100% Stacked Area Chart\", \"align\": \"stretch\"}) ) chart.animate( Config( { \"channels\": {\"y\": {\"range\": {\"max\": \"100%\"}}}, \"title\": \"Split Area Chart\", \"align\": \"min\", \"split\": True, } ) )","title":"Stacked Area  to Split Area"},{"location":"examples/animated/composition_percentage_area_stream_3dis_1con/#stacked-area-to-split-area","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_14.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Value 2 (+)\", \"Country\"], \"color\": \"Country\", }, \"title\": \"Stacked Area Chart\", \"geometry\": \"area\", } ) ) chart.animate( Config({\"title\": \"100% Stacked Area Chart\", \"align\": \"stretch\"}) ) chart.animate( Config( { \"channels\": {\"y\": {\"range\": {\"max\": \"100%\"}}}, \"title\": \"Split Area Chart\", \"align\": \"min\", \"split\": True, } ) )","title":"Stacked Area  to Split Area"},{"location":"examples/animated/composition_percentage_column_3dis_1con/","text":"Stacked Column to Split Column Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_14.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Value 2 (+)\", \"Country\"], \"color\": \"Country\", }, \"title\": \"Stacked Column Chart\", } ) ) chart.animate( Config({\"title\": \"100% Stacked Column Chart\", \"align\": \"stretch\"}) ) chart.animate( Config( { \"channels\": {\"y\": {\"range\": {\"max\": \"100%\"}}}, \"title\": \"Split Column Chart\", \"align\": \"min\", \"split\": True, } ) )","title":"Stacked Column  to Split Column"},{"location":"examples/animated/composition_percentage_column_3dis_1con/#stacked-column-to-split-column","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_14.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Value 2 (+)\", \"Country\"], \"color\": \"Country\", }, \"title\": \"Stacked Column Chart\", } ) ) chart.animate( Config({\"title\": \"100% Stacked Column Chart\", \"align\": \"stretch\"}) ) chart.animate( Config( { \"channels\": {\"y\": {\"range\": {\"max\": \"100%\"}}}, \"title\": \"Split Column Chart\", \"align\": \"min\", \"split\": True, } ) )","title":"Stacked Column  to Split Column"},{"location":"examples/animated/composition_percentage_column_stream_3dis_1con/","text":"Column to 100% Column Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_14.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Value 2 (+)\", \"Country\"], \"noop\": \"Country\", }, \"title\": \"Column Chart\", } ) ) chart.animate( Config( { \"channels\": { \"y\": {\"range\": {\"max\": \"100%\"}}, \"color\": \"Country\", \"noop\": None, }, \"title\": \"Split Column Chart\", \"split\": True, } ) ) chart.animate( Config( { \"channels\": {\"y\": {\"range\": {\"max\": \"auto\"}}}, \"title\": \"Stacked Column Chart\", \"split\": False, } ) ) chart.animate( Config({\"title\": \"100% Column Chart\", \"align\": \"stretch\"}) )","title":"Column  to 100% Column"},{"location":"examples/animated/composition_percentage_column_stream_3dis_1con/#column-to-100-column","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_14.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Value 2 (+)\", \"Country\"], \"noop\": \"Country\", }, \"title\": \"Column Chart\", } ) ) chart.animate( Config( { \"channels\": { \"y\": {\"range\": {\"max\": \"100%\"}}, \"color\": \"Country\", \"noop\": None, }, \"title\": \"Split Column Chart\", \"split\": True, } ) ) chart.animate( Config( { \"channels\": {\"y\": {\"range\": {\"max\": \"auto\"}}}, \"title\": \"Stacked Column Chart\", \"split\": False, } ) ) chart.animate( Config({\"title\": \"100% Column Chart\", \"align\": \"stretch\"}) )","title":"Column  to 100% Column"},{"location":"examples/animated/distribution_relationship_dotplot_dotplot/","text":"Distribution Plot to Scatter Plot Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Joy factors\", \"y\": \"Value 5 (+/-)\", \"color\": \"Joy factors\", \"noop\": \"Country_code\", }, \"title\": \"Distribution Plot\", \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": { \"x\": [\"Joy factors\", \"Value 6 (+/-)\"], \"label\": \"Country_code\", }, \"title\": \"Scatter Plot\", } ) )","title":"Distribution Plot to Scatter Plot"},{"location":"examples/animated/distribution_relationship_dotplot_dotplot/#distribution-plot-to-scatter-plot","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Joy factors\", \"y\": \"Value 5 (+/-)\", \"color\": \"Joy factors\", \"noop\": \"Country_code\", }, \"title\": \"Distribution Plot\", \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": { \"x\": [\"Joy factors\", \"Value 6 (+/-)\"], \"label\": \"Country_code\", }, \"title\": \"Scatter Plot\", } ) )","title":"Distribution Plot to Scatter Plot"},{"location":"examples/animated/drill_aggreg_improve_line/","text":"Single Line to Line I Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": {\"x\": \"Year\", \"y\": \"Value 3 (+)\"}, \"title\": \"Single Line Chart\", \"geometry\": \"line\", } ) ) chart.animate( Config( { \"channels\": { \"y\": [\"Country\", \"Value 3 (+)\"], \"color\": \"Country\", }, \"title\": \"Drill down\", \"geometry\": \"area\", } ) ) chart.animate( Config( { \"channels\": {\"y\": \"Value 3 (+)\"}, \"title\": \"Line Chart I\", \"geometry\": \"line\", } ) )","title":"Single Line  to Line  I"},{"location":"examples/animated/drill_aggreg_improve_line/#single-line-to-line-i","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": {\"x\": \"Year\", \"y\": \"Value 3 (+)\"}, \"title\": \"Single Line Chart\", \"geometry\": \"line\", } ) ) chart.animate( Config( { \"channels\": { \"y\": [\"Country\", \"Value 3 (+)\"], \"color\": \"Country\", }, \"title\": \"Drill down\", \"geometry\": \"area\", } ) ) chart.animate( Config( { \"channels\": {\"y\": \"Value 3 (+)\"}, \"title\": \"Line Chart I\", \"geometry\": \"line\", } ) )","title":"Single Line  to Line  I"},{"location":"examples/animated/drilldown_aggregate_line/","text":"Single Line to Line II Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": { \"set\": \"Value 3 (+)\", \"range\": {\"max\": \"6000000000\"}, }, \"size\": \"Country\", }, \"title\": \"Single Line Chart\", \"geometry\": \"line\", } ) ) chart.animate( Config( { \"channels\": {\"color\": \"Country\", \"size\": None}, \"title\": \"Drill down\", } ) ) chart.animate( Config( { \"channels\": {\"y\": {\"range\": {\"max\": \"auto\"}}}, \"title\": \"Line Chart II\", } ) )","title":"Single Line  to Line  II"},{"location":"examples/animated/drilldown_aggregate_line/#single-line-to-line-ii","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": { \"set\": \"Value 3 (+)\", \"range\": {\"max\": \"6000000000\"}, }, \"size\": \"Country\", }, \"title\": \"Single Line Chart\", \"geometry\": \"line\", } ) ) chart.animate( Config( { \"channels\": {\"color\": \"Country\", \"size\": None}, \"title\": \"Drill down\", } ) ) chart.animate( Config( { \"channels\": {\"y\": {\"range\": {\"max\": \"auto\"}}}, \"title\": \"Line Chart II\", } ) )","title":"Single Line  to Line  II"},{"location":"examples/animated/merge_split_area_stream_3dis_1con/","text":"Stacked Streamgraph to Split Area Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Year\", \"Joy factors\"], \"y\": [\"Value 3 (+)\", \"Country\"], \"color\": \"Country\", }, \"title\": \"Stacked Streamgraph\", \"geometry\": \"area\", \"align\": \"center\", } ) ) chart.animate( Config( { \"channels\": {\"y\": {\"range\": {\"max\": \"100%\"}}}, \"title\": \"Split Area Chart\", \"split\": True, \"align\": \"min\", } ) )","title":"Stacked Streamgraph to Split Area"},{"location":"examples/animated/merge_split_area_stream_3dis_1con/#stacked-streamgraph-to-split-area","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Year\", \"Joy factors\"], \"y\": [\"Value 3 (+)\", \"Country\"], \"color\": \"Country\", }, \"title\": \"Stacked Streamgraph\", \"geometry\": \"area\", \"align\": \"center\", } ) ) chart.animate( Config( { \"channels\": {\"y\": {\"range\": {\"max\": \"100%\"}}}, \"title\": \"Split Area Chart\", \"split\": True, \"align\": \"min\", } ) )","title":"Stacked Streamgraph to Split Area"},{"location":"examples/animated/merge_split_bar/","text":"Stacked Bar to Split Bar Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Value 3 (+)\", \"Country\"], \"y\": [\"Year\", \"Joy factors\"], \"color\": \"Country\", }, \"title\": \"Stacked Bar Chart\", } ) ) chart.animate(Config({\"title\": \"Split Bar Chart\", \"split\": True}))","title":"Stacked Bar  to Split Bar"},{"location":"examples/animated/merge_split_bar/#stacked-bar-to-split-bar","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Value 3 (+)\", \"Country\"], \"y\": [\"Year\", \"Joy factors\"], \"color\": \"Country\", }, \"title\": \"Stacked Bar Chart\", } ) ) chart.animate(Config({\"title\": \"Split Bar Chart\", \"split\": True}))","title":"Stacked Bar  to Split Bar"},{"location":"examples/animated/merge_split_radial_stacked_rectangle_2dis_1con/","text":"Radial Bar to Split Radial Bar Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Country\", \"Value 2 (+)\"], \"y\": {\"set\": \"Year\", \"range\": {\"min\": \"-3\"}}, \"color\": \"Country\", }, \"title\": \"Radial Bar Chart\", \"coordSystem\": \"polar\", } ) ) chart.animate( Config({\"title\": \"Split Radial Bar Chart\", \"split\": True}) )","title":"Radial Bar  to Split Radial Bar"},{"location":"examples/animated/merge_split_radial_stacked_rectangle_2dis_1con/#radial-bar-to-split-radial-bar","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Country\", \"Value 2 (+)\"], \"y\": {\"set\": \"Year\", \"range\": {\"min\": \"-3\"}}, \"color\": \"Country\", }, \"title\": \"Radial Bar Chart\", \"coordSystem\": \"polar\", } ) ) chart.animate( Config({\"title\": \"Split Radial Bar Chart\", \"split\": True}) )","title":"Radial Bar  to Split Radial Bar"},{"location":"examples/animated/orientation_circle/","text":"Dot Plot to Dot Plot with Other Orientation Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Value 5 (+/-)\", \"y\": \"Joy factors\", \"lightness\": \"Joy factors\", \"noop\": \"Year\", }, \"title\": \"Dot Plot\", \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"noop\": \"Joy factors\", }, \"title\": \"Dot Plot with Other Orientation\", } ) )","title":"Dot Plot to Dot Plot with Other Orientation"},{"location":"examples/animated/orientation_circle/#dot-plot-to-dot-plot-with-other-orientation","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Value 5 (+/-)\", \"y\": \"Joy factors\", \"lightness\": \"Joy factors\", \"noop\": \"Year\", }, \"title\": \"Dot Plot\", \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"noop\": \"Joy factors\", }, \"title\": \"Dot Plot with Other Orientation\", } ) )","title":"Dot Plot to Dot Plot with Other Orientation"},{"location":"examples/animated/orientation_dot_circle/","text":"Scatter Plot to Dot Plot Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Value 5 (+/-)\", \"y\": \"Value 6 (+/-)\", \"noop\": \"Joy factors\", \"lightness\": \"Year\", }, \"title\": \"Scatter Plot\", \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": {\"x\": \"Year\"}, \"title\": \"Dot Plot\", \"legend\": \"lightness\", } ) ) chart.animate( Config( { \"channels\": {\"x\": \"Value 5 (+/-)\", \"y\": \"Value 6 (+/-)\"}, \"title\": \"Scatter Plot\", } ) ) chart.animate( Config( { \"channels\": {\"y\": \"Joy factors\", \"noop\": None}, \"title\": \"Dot Plot\", } ) )","title":"Scatter Plot to Dot Plot"},{"location":"examples/animated/orientation_dot_circle/#scatter-plot-to-dot-plot","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Value 5 (+/-)\", \"y\": \"Value 6 (+/-)\", \"noop\": \"Joy factors\", \"lightness\": \"Year\", }, \"title\": \"Scatter Plot\", \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": {\"x\": \"Year\"}, \"title\": \"Dot Plot\", \"legend\": \"lightness\", } ) ) chart.animate( Config( { \"channels\": {\"x\": \"Value 5 (+/-)\", \"y\": \"Value 6 (+/-)\"}, \"title\": \"Scatter Plot\", } ) ) chart.animate( Config( { \"channels\": {\"y\": \"Joy factors\", \"noop\": None}, \"title\": \"Dot Plot\", } ) )","title":"Scatter Plot to Dot Plot"},{"location":"examples/animated/orientation_marimekko_rectangle_2dis_2con/","text":"Marimekko to Marimekko with Other Orientation Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Country\", \"Value 2 (+)\"], \"y\": [\"Joy factors\", \"Value 3 (+)\"], \"color\": \"Joy factors\", \"label\": \"Country\", \"lightness\": \"Country\", }, \"title\": \"Marimekko Chart\", \"align\": \"stretch\", \"orientation\": \"horizontal\", } ) ) chart.animate( Config( { \"title\": \"Marimekko with Other Orientation\", \"orientation\": \"vertical\", } ) )","title":"Marimekko  to Marimekko with Other Orientation"},{"location":"examples/animated/orientation_marimekko_rectangle_2dis_2con/#marimekko-to-marimekko-with-other-orientation","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Country\", \"Value 2 (+)\"], \"y\": [\"Joy factors\", \"Value 3 (+)\"], \"color\": \"Joy factors\", \"label\": \"Country\", \"lightness\": \"Country\", }, \"title\": \"Marimekko Chart\", \"align\": \"stretch\", \"orientation\": \"horizontal\", } ) ) chart.animate( Config( { \"title\": \"Marimekko with Other Orientation\", \"orientation\": \"vertical\", } ) )","title":"Marimekko  to Marimekko with Other Orientation"},{"location":"examples/animated/orientation_rectangle/","text":"Stacked Column to Bar Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/tutorial.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Timeseries\", \"y\": [\"Values 1\", \"Categ. Parent\"], \"color\": \"Categ. Parent\", \"label\": \"Values 1\", }, \"title\": \"Stacked Column Chart\", } ) ) chart.animate( Config( { \"channels\": {\"x\": \"Values 1\", \"y\": \"Categ. Parent\"}, \"title\": \"Bar Chart\", } ) )","title":"Stacked Column  to Bar"},{"location":"examples/animated/orientation_rectangle/#stacked-column-to-bar","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/tutorial.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Timeseries\", \"y\": [\"Values 1\", \"Categ. Parent\"], \"color\": \"Categ. Parent\", \"label\": \"Values 1\", }, \"title\": \"Stacked Column Chart\", } ) ) chart.animate( Config( { \"channels\": {\"x\": \"Values 1\", \"y\": \"Categ. Parent\"}, \"title\": \"Bar Chart\", } ) )","title":"Stacked Column  to Bar"},{"location":"examples/animated/pie_donut2_rectangle_1dis_1con/","text":"Pie to Donut Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Joy factors\", \"Value 2 (+)\"], \"color\": \"Joy factors\", \"label\": \"Value 2 (+)\", }, \"title\": \"Pie Chart\", \"coordSystem\": \"polar\", } ) ) chart.animate( Config( { \"channels\": {\"y\": {\"range\": {\"min\": \"-200%\"}}}, \"title\": \"Donut Chart\", } ) )","title":"Pie  to Donut"},{"location":"examples/animated/pie_donut2_rectangle_1dis_1con/#pie-to-donut","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Joy factors\", \"Value 2 (+)\"], \"color\": \"Joy factors\", \"label\": \"Value 2 (+)\", }, \"title\": \"Pie Chart\", \"coordSystem\": \"polar\", } ) ) chart.animate( Config( { \"channels\": {\"y\": {\"range\": {\"min\": \"-200%\"}}}, \"title\": \"Donut Chart\", } ) )","title":"Pie  to Donut"},{"location":"examples/animated/relationship_comparison_circle_2_bubble_plot/","text":"Bubble Plot to Bubble Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Joy factors\", \"Value 6 (+/-)\"], \"y\": \"Value 5 (+/-)\", \"color\": \"Joy factors\", \"size\": \"Value 2 (+)\", \"label\": \"Country_code\", }, \"title\": \"Bubble Plot\", \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": { \"x\": None, \"y\": None, \"size\": [\"Value 2 (+)\", \"Country_code\"], }, \"title\": \"Stacked Bubble Chart\", } ) ) chart.animate( Config( {\"channels\": {\"size\": \"Value 2 (+)\"}, \"title\": \"Bubble Chart\"} ) )","title":"Bubble Plot to Bubble"},{"location":"examples/animated/relationship_comparison_circle_2_bubble_plot/#bubble-plot-to-bubble","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Joy factors\", \"Value 6 (+/-)\"], \"y\": \"Value 5 (+/-)\", \"color\": \"Joy factors\", \"size\": \"Value 2 (+)\", \"label\": \"Country_code\", }, \"title\": \"Bubble Plot\", \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": { \"x\": None, \"y\": None, \"size\": [\"Value 2 (+)\", \"Country_code\"], }, \"title\": \"Stacked Bubble Chart\", } ) ) chart.animate( Config( {\"channels\": {\"size\": \"Value 2 (+)\"}, \"title\": \"Bubble Chart\"} ) )","title":"Bubble Plot to Bubble"},{"location":"examples/animated/relationship_total_bubble_plot_column/","text":"Bubble Plot to Bar Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Joy factors\", \"Value 6 (+/-)\"], \"y\": \"Value 5 (+/-)\", \"color\": \"Joy factors\", \"size\": \"Value 2 (+)\", \"label\": \"Country_code\", }, \"title\": \"Bubble Plot\", \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": { \"y\": \"Joy factors\", \"x\": [\"Value 2 (+)\", \"Country_code\"], \"label\": None, }, \"title\": \"Bar Chart\", \"geometry\": \"rectangle\", \"orientation\": \"vertical\", } ) ) chart.animate( Config({\"channels\": {\"x\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\"}}) )","title":"Bubble Plot to Bar"},{"location":"examples/animated/relationship_total_bubble_plot_column/#bubble-plot-to-bar","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Joy factors\", \"Value 6 (+/-)\"], \"y\": \"Value 5 (+/-)\", \"color\": \"Joy factors\", \"size\": \"Value 2 (+)\", \"label\": \"Country_code\", }, \"title\": \"Bubble Plot\", \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": { \"y\": \"Joy factors\", \"x\": [\"Value 2 (+)\", \"Country_code\"], \"label\": None, }, \"title\": \"Bar Chart\", \"geometry\": \"rectangle\", \"orientation\": \"vertical\", } ) ) chart.animate( Config({\"channels\": {\"x\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\"}}) )","title":"Bubble Plot to Bar"},{"location":"examples/animated/stack_group_area_line/","text":"Stacked Area to Line Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/tutorial.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Timeseries\", \"y\": { \"set\": [\"Values 1\", \"Categ. Parent\"], \"range\": {\"max\": \"400\"}, }, \"label\": \"Values 1\", \"color\": \"Categ. Parent\", }, \"title\": \"Stacked Area Chart\", \"geometry\": \"area\", } ) ) chart.animate( Config( { \"channels\": {\"y\": \"Values 1\"}, \"title\": \"Line Chart\", \"geometry\": \"line\", } ) ) chart.animate(Config({\"channels\": {\"y\": {\"range\": {\"max\": \"auto\"}}}}))","title":"Stacked Area  to Line"},{"location":"examples/animated/stack_group_area_line/#stacked-area-to-line","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/tutorial.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Timeseries\", \"y\": { \"set\": [\"Values 1\", \"Categ. Parent\"], \"range\": {\"max\": \"400\"}, }, \"label\": \"Values 1\", \"color\": \"Categ. Parent\", }, \"title\": \"Stacked Area Chart\", \"geometry\": \"area\", } ) ) chart.animate( Config( { \"channels\": {\"y\": \"Values 1\"}, \"title\": \"Line Chart\", \"geometry\": \"line\", } ) ) chart.animate(Config({\"channels\": {\"y\": {\"range\": {\"max\": \"auto\"}}}}))","title":"Stacked Area  to Line"},{"location":"examples/animated/stack_group_circle/","text":"Bubble to Stacked Bubble Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"color\": \"Joy factors\", \"size\": \"Value 2 (+)\", \"label\": \"Country_code\", }, \"title\": \"Bubble Chart\", \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": {\"size\": [\"Value 2 (+)\", \"Country_code\"]}, \"title\": \"Stacked Bubble Chart\", } ) )","title":"Bubble  to Stacked Bubble"},{"location":"examples/animated/stack_group_circle/#bubble-to-stacked-bubble","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"color\": \"Joy factors\", \"size\": \"Value 2 (+)\", \"label\": \"Country_code\", }, \"title\": \"Bubble Chart\", \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": {\"size\": [\"Value 2 (+)\", \"Country_code\"]}, \"title\": \"Stacked Bubble Chart\", } ) )","title":"Bubble  to Stacked Bubble"},{"location":"examples/animated/stack_group_treemap/","text":"Treemap to Stacked Treemap Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"size\": \"Value 2 (+)\", \"noop\": \"Country_code\", \"color\": \"Joy factors\", \"label\": \"Country_code\", }, \"title\": \"Treemap\", } ) ) chart.animate( Config( { \"channels\": {\"size\": [\"Value 2 (+)\", \"Country_code\"]}, \"title\": \"Stacked Treemap\", } ) )","title":"Treemap to Stacked Treemap"},{"location":"examples/animated/stack_group_treemap/#treemap-to-stacked-treemap","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"size\": \"Value 2 (+)\", \"noop\": \"Country_code\", \"color\": \"Joy factors\", \"label\": \"Country_code\", }, \"title\": \"Treemap\", } ) ) chart.animate( Config( { \"channels\": {\"size\": [\"Value 2 (+)\", \"Country_code\"]}, \"title\": \"Stacked Treemap\", } ) )","title":"Treemap to Stacked Treemap"},{"location":"examples/animated/total_element_bubble_2_bar/","text":"Stacked Bubble to Bar Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"color\": \"Joy factors\", \"label\": \"Country_code\", \"size\": [\"Country_code\", \"Value 2 (+)\"], }, \"title\": \"Stacked Bubble Chart\", \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": { \"x\": [\"Country_code\", \"Value 2 (+)\"], \"y\": \"Joy factors\", \"label\": None, \"size\": None, }, \"title\": \"Bar Chart\", \"geometry\": \"rectangle\", \"orientation\": \"vertical\", } ) ) chart.animate( Config({\"channels\": {\"x\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\"}}) )","title":"Stacked Bubble  to Bar"},{"location":"examples/animated/total_element_bubble_2_bar/#stacked-bubble-to-bar","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"color\": \"Joy factors\", \"label\": \"Country_code\", \"size\": [\"Country_code\", \"Value 2 (+)\"], }, \"title\": \"Stacked Bubble Chart\", \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": { \"x\": [\"Country_code\", \"Value 2 (+)\"], \"y\": \"Joy factors\", \"label\": None, \"size\": None, }, \"title\": \"Bar Chart\", \"geometry\": \"rectangle\", \"orientation\": \"vertical\", } ) ) chart.animate( Config({\"channels\": {\"x\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\"}}) )","title":"Stacked Bubble  to Bar"},{"location":"examples/animated/total_element_bubble_column/","text":"Stacked Bubble to Column Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"color\": \"Joy factors\", \"label\": \"Country_code\", \"size\": [\"Country_code\", \"Value 2 (+)\"], }, \"title\": \"Stacked Bubble Chart\", \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": { \"x\": \"Joy factors\", \"y\": [\"Country_code\", \"Value 2 (+)\"], \"label\": None, \"size\": None, }, \"title\": \"Column Chart\", \"geometry\": \"rectangle\", \"orientation\": \"vertical\", } ) ) chart.animate( Config({\"channels\": {\"y\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\"}}) )","title":"Stacked Bubble  to Column"},{"location":"examples/animated/total_element_bubble_column/#stacked-bubble-to-column","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"color\": \"Joy factors\", \"label\": \"Country_code\", \"size\": [\"Country_code\", \"Value 2 (+)\"], }, \"title\": \"Stacked Bubble Chart\", \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": { \"x\": \"Joy factors\", \"y\": [\"Country_code\", \"Value 2 (+)\"], \"label\": None, \"size\": None, }, \"title\": \"Column Chart\", \"geometry\": \"rectangle\", \"orientation\": \"vertical\", } ) ) chart.animate( Config({\"channels\": {\"y\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\"}}) )","title":"Stacked Bubble  to Column"},{"location":"examples/animated/treemap_radial/","text":"Treemap to Radial Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"color\": \"Joy factors\", \"size\": \"Value 2 (+)\", \"label\": \"Joy factors\", }, \"title\": \"Treemap\", } ) ) chart.animate( Config( { \"channels\": { \"x\": \"Value 2 (+)\", \"y\": {\"set\": \"Joy factors\", \"range\": {\"min\": \"-30%\"}}, \"size\": None, \"label\": \"Value 2 (+)\", }, \"title\": \"Radial Chart\", \"coordSystem\": \"polar\", } ) )","title":"Treemap to Radial"},{"location":"examples/animated/treemap_radial/#treemap-to-radial","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"color\": \"Joy factors\", \"size\": \"Value 2 (+)\", \"label\": \"Joy factors\", }, \"title\": \"Treemap\", } ) ) chart.animate( Config( { \"channels\": { \"x\": \"Value 2 (+)\", \"y\": {\"set\": \"Joy factors\", \"range\": {\"min\": \"-30%\"}}, \"size\": None, \"label\": \"Value 2 (+)\", }, \"title\": \"Radial Chart\", \"coordSystem\": \"polar\", } ) )","title":"Treemap to Radial"},{"location":"examples/animated/zoom_area/","text":"Stacked Area to Zoomed Stacked Area Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Year\", \"Joy factors\"], \"y\": [\"Value 3 (+)\", \"Country_code\"], \"color\": \"Country_code\", }, \"title\": \"Stacked Area\", \"geometry\": \"area\", } ) ) chart.animate( data.filter( \"\"\" data_6.filter(record) && record.Year < 12 && record.Year > 6 \"\"\" ), Config({\"title\": \"Zoomed Stacked Area\"}), )","title":"Stacked Area to Zoomed Stacked Area"},{"location":"examples/animated/zoom_area/#stacked-area-to-zoomed-stacked-area","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Year\", \"Joy factors\"], \"y\": [\"Value 3 (+)\", \"Country_code\"], \"color\": \"Country_code\", }, \"title\": \"Stacked Area\", \"geometry\": \"area\", } ) ) chart.animate( data.filter( \"\"\" data_6.filter(record) && record.Year < 12 && record.Year > 6 \"\"\" ), Config({\"title\": \"Zoomed Stacked Area\"}), )","title":"Stacked Area to Zoomed Stacked Area"},{"location":"examples/animated/zoom_area_polar/","text":"Polar Stacked Area to Zoomed Polar Stacked Area Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Year\", \"Joy factors\"], \"y\": [\"Value 3 (+)\", \"Country_code\"], \"color\": \"Country_code\", }, \"title\": \"Polar Stacked Area\", \"geometry\": \"area\", \"coordSystem\": \"polar\", } ) ) chart.animate( data.filter( \"\"\" data_6.filter(record) && record.Year < 12 && record.Year > 6 \"\"\" ), Config({\"title\": \"Zoomed Polar Stacked Area\"}), )","title":"Polar Stacked Area to Zoomed Polar Stacked Area"},{"location":"examples/animated/zoom_area_polar/#polar-stacked-area-to-zoomed-polar-stacked-area","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Year\", \"Joy factors\"], \"y\": [\"Value 3 (+)\", \"Country_code\"], \"color\": \"Country_code\", }, \"title\": \"Polar Stacked Area\", \"geometry\": \"area\", \"coordSystem\": \"polar\", } ) ) chart.animate( data.filter( \"\"\" data_6.filter(record) && record.Year < 12 && record.Year > 6 \"\"\" ), Config({\"title\": \"Zoomed Polar Stacked Area\"}), )","title":"Polar Stacked Area to Zoomed Polar Stacked Area"},{"location":"examples/animated/zoom_line/","text":"Line chart to Zoomed Line chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Year\", \"Joy factors\"], \"y\": \"Value 3 (+)\", \"color\": \"Country_code\", }, \"title\": \"Line chart\", \"geometry\": \"line\", } ) ) chart.animate( data.filter( \"\"\" data_6.filter(record) && record.Year < 8 && record.Year > 2 \"\"\" ), Config({\"title\": \"Zoomed Line chart\"}), )","title":"Line chart to Zoomed Line chart"},{"location":"examples/animated/zoom_line/#line-chart-to-zoomed-line-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Year\", \"Joy factors\"], \"y\": \"Value 3 (+)\", \"color\": \"Country_code\", }, \"title\": \"Line chart\", \"geometry\": \"line\", } ) ) chart.animate( data.filter( \"\"\" data_6.filter(record) && record.Year < 8 && record.Year > 2 \"\"\" ), Config({\"title\": \"Zoomed Line chart\"}), )","title":"Line chart to Zoomed Line chart"},{"location":"examples/animated/zoom_line_polar/","text":"Polar Line chart to Zoomed Polar Line chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Year\", \"Joy factors\"], \"y\": \"Value 3 (+)\", \"color\": \"Country_code\", }, \"title\": \"Polar Line chart\", \"geometry\": \"line\", \"coordSystem\": \"polar\", } ) ) chart.animate( data.filter( \"\"\" data_6.filter(record) && record.Year < 8 && record.Year > 2 \"\"\" ), Config({\"title\": \"Zoomed Polar Line chart\"}), )","title":"Polar Line chart to Zoomed Polar Line chart"},{"location":"examples/animated/zoom_line_polar/#polar-line-chart-to-zoomed-polar-line-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Year\", \"Joy factors\"], \"y\": \"Value 3 (+)\", \"color\": \"Country_code\", }, \"title\": \"Polar Line chart\", \"geometry\": \"line\", \"coordSystem\": \"polar\", } ) ) chart.animate( data.filter( \"\"\" data_6.filter(record) && record.Year < 8 && record.Year > 2 \"\"\" ), Config({\"title\": \"Zoomed Polar Line chart\"}), )","title":"Polar Line chart to Zoomed Polar Line chart"},{"location":"examples/presets/","text":"Preset charts","title":"Preset charts"},{"location":"examples/presets/#preset-charts","text":"","title":"Preset charts"},{"location":"examples/presets/02_C_R_column/","text":"Column Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.column( { \"x\": \"Joy factors\", \"y\": \"Value 2 (+)\", \"title\": \"Column Chart\", } ) )","title":"Column Chart"},{"location":"examples/presets/02_C_R_column/#column-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.column( { \"x\": \"Joy factors\", \"y\": \"Value 2 (+)\", \"title\": \"Column Chart\", } ) )","title":"Column Chart"},{"location":"examples/presets/03_C_R_grouped_column_negative/","text":"Grouped Column Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.groupedColumn( { \"x\": \"Country\", \"y\": \"Value 5 (+/-)\", \"groupedBy\": \"Joy factors\", \"title\": \"Grouped Column Chart\", } ) )","title":"Grouped Column Chart"},{"location":"examples/presets/03_C_R_grouped_column_negative/#grouped-column-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.groupedColumn( { \"x\": \"Country\", \"y\": \"Value 5 (+/-)\", \"groupedBy\": \"Joy factors\", \"title\": \"Grouped Column Chart\", } ) )","title":"Grouped Column Chart"},{"location":"examples/presets/04_C_R_stacked_column/","text":"Stacked Column Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.stackedColumn( { \"x\": \"Country\", \"y\": \"Value 2 (+)\", \"stackedBy\": \"Joy factors\", \"title\": \"Stacked Column Chart\", } ) )","title":"Stacked Column Chart"},{"location":"examples/presets/04_C_R_stacked_column/#stacked-column-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.stackedColumn( { \"x\": \"Country\", \"y\": \"Value 2 (+)\", \"stackedBy\": \"Joy factors\", \"title\": \"Stacked Column Chart\", } ) )","title":"Stacked Column Chart"},{"location":"examples/presets/05_C_R_splitted_column/","text":"Splitted Column Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.splittedColumn( { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"splittedBy\": \"Joy factors\", \"title\": \"Splitted Column Chart\", } ) )","title":"Splitted Column Chart"},{"location":"examples/presets/05_C_R_splitted_column/#splitted-column-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.splittedColumn( { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"splittedBy\": \"Joy factors\", \"title\": \"Splitted Column Chart\", } ) )","title":"Splitted Column Chart"},{"location":"examples/presets/06_C_R_percentage_column/","text":"Percentage Column Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.percentageColumn( { \"x\": \"Country\", \"y\": \"Value 2 (+)\", \"stackedBy\": \"Joy factors\", \"title\": \"Percentage Column Chart\", } ) )","title":"Percentage Column Chart"},{"location":"examples/presets/06_C_R_percentage_column/#percentage-column-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.percentageColumn( { \"x\": \"Country\", \"y\": \"Value 2 (+)\", \"stackedBy\": \"Joy factors\", \"title\": \"Percentage Column Chart\", } ) )","title":"Percentage Column Chart"},{"location":"examples/presets/08_C_R_waterfall/","text":"Waterfall Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.waterfall( { \"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"title\": \"Waterfall Chart\", } ), Style( { \"plot\": { \"marker\": { \"colorGradient\": \"#ff001b 0,#ff001b 0.5,#7e79e8 0.5,#7e79e8 1\", \"label\": {\"position\": \"top\"}, } } } ), )","title":"Waterfall Chart"},{"location":"examples/presets/08_C_R_waterfall/#waterfall-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.waterfall( { \"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"title\": \"Waterfall Chart\", } ), Style( { \"plot\": { \"marker\": { \"colorGradient\": \"#ff001b 0,#ff001b 0.5,#7e79e8 0.5,#7e79e8 1\", \"label\": {\"position\": \"top\"}, } } } ), )","title":"Waterfall Chart"},{"location":"examples/presets/09_C_R_stacked_mekko/","text":"Stacked Mekko Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.mekko( { \"x\": \"Value 1 (+)\", \"y\": \"Value 2 (+)\", \"stackedBy\": \"Joy factors\", \"groupedBy\": \"Country\", \"title\": \"Stacked Mekko Chart\", } ) )","title":"Stacked Mekko Chart"},{"location":"examples/presets/09_C_R_stacked_mekko/#stacked-mekko-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.mekko( { \"x\": \"Value 1 (+)\", \"y\": \"Value 2 (+)\", \"stackedBy\": \"Joy factors\", \"groupedBy\": \"Country\", \"title\": \"Stacked Mekko Chart\", } ) )","title":"Stacked Mekko Chart"},{"location":"examples/presets/10_C_R_marimekko/","text":"Marimekko Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.marimekko( { \"x\": \"Value 2 (+)\", \"y\": \"Value 3 (+)\", \"stackedBy\": \"Joy factors\", \"groupedBy\": \"Country\", \"title\": \"Marimekko Chart\", } ) )","title":"Marimekko Chart"},{"location":"examples/presets/10_C_R_marimekko/#marimekko-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.marimekko( { \"x\": \"Value 2 (+)\", \"y\": \"Value 3 (+)\", \"stackedBy\": \"Joy factors\", \"groupedBy\": \"Country\", \"title\": \"Marimekko Chart\", } ) )","title":"Marimekko Chart"},{"location":"examples/presets/13_C_R_bar_negative/","text":"Bar Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.bar( {\"x\": \"Value 5 (+/-)\", \"y\": \"Country\", \"title\": \"Bar Chart\"} ) )","title":"Bar Chart"},{"location":"examples/presets/13_C_R_bar_negative/#bar-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.bar( {\"x\": \"Value 5 (+/-)\", \"y\": \"Country\", \"title\": \"Bar Chart\"} ) )","title":"Bar Chart"},{"location":"examples/presets/14_C_R_grouped_bar_negative/","text":"Grouped Bar Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.groupedBar( { \"x\": \"Value 5 (+/-)\", \"y\": \"Country\", \"groupedBy\": \"Joy factors\", \"title\": \"Grouped Bar Chart\", } ) )","title":"Grouped Bar Chart"},{"location":"examples/presets/14_C_R_grouped_bar_negative/#grouped-bar-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.groupedBar( { \"x\": \"Value 5 (+/-)\", \"y\": \"Country\", \"groupedBy\": \"Joy factors\", \"title\": \"Grouped Bar Chart\", } ) )","title":"Grouped Bar Chart"},{"location":"examples/presets/15_C_R_stacked_bar/","text":"Stacked Bar Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.stackedBar( { \"x\": \"Value 2 (+)\", \"y\": \"Country\", \"stackedBy\": \"Joy factors\", \"title\": \"Stacked Bar Chart\", } ) )","title":"Stacked Bar Chart"},{"location":"examples/presets/15_C_R_stacked_bar/#stacked-bar-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.stackedBar( { \"x\": \"Value 2 (+)\", \"y\": \"Country\", \"stackedBy\": \"Joy factors\", \"title\": \"Stacked Bar Chart\", } ) )","title":"Stacked Bar Chart"},{"location":"examples/presets/16_C_R_splitted_bar/","text":"Splitted Bar Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.splittedBar( { \"x\": \"Value 2 (+)\", \"y\": \"Year\", \"splittedBy\": \"Joy factors\", \"title\": \"Splitted Bar Chart\", } ) )","title":"Splitted Bar Chart"},{"location":"examples/presets/16_C_R_splitted_bar/#splitted-bar-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.splittedBar( { \"x\": \"Value 2 (+)\", \"y\": \"Year\", \"splittedBy\": \"Joy factors\", \"title\": \"Splitted Bar Chart\", } ) )","title":"Splitted Bar Chart"},{"location":"examples/presets/17_C_R_percentage_bar/","text":"Percentage Bar Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.percentageBar( { \"x\": \"Value 2 (+)\", \"y\": \"Country\", \"stackedBy\": \"Joy factors\", \"title\": \"Percentage Bar Chart\", } ) )","title":"Percentage Bar Chart"},{"location":"examples/presets/17_C_R_percentage_bar/#percentage-bar-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.percentageBar( { \"x\": \"Value 2 (+)\", \"y\": \"Country\", \"stackedBy\": \"Joy factors\", \"title\": \"Percentage Bar Chart\", } ) )","title":"Percentage Bar Chart"},{"location":"examples/presets/20_C_C_lollipop_chart/","text":"Lollipop Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.lollipop( {\"x\": \"Year\", \"y\": \"Value 1 (+)\", \"title\": \"Lollipop Chart\"} ) )","title":"Lollipop Chart"},{"location":"examples/presets/20_C_C_lollipop_chart/#lollipop-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.lollipop( {\"x\": \"Year\", \"y\": \"Value 1 (+)\", \"title\": \"Lollipop Chart\"} ) )","title":"Lollipop Chart"},{"location":"examples/presets/22_C_C_scatter/","text":"Scatter Plot Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.scatter( { \"x\": \"Value 6 (+/-)\", \"y\": \"Value 5 (+/-)\", \"dividedBy\": \"Year\", \"title\": \"Scatter Plot\", } ) )","title":"Scatter Plot"},{"location":"examples/presets/22_C_C_scatter/#scatter-plot","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.scatter( { \"x\": \"Value 6 (+/-)\", \"y\": \"Value 5 (+/-)\", \"dividedBy\": \"Year\", \"title\": \"Scatter Plot\", } ) )","title":"Scatter Plot"},{"location":"examples/presets/24_C_C_bubbleplot/","text":"Bubble Plot Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.bubbleplot( { \"x\": \"Value 4 (+/-)\", \"y\": \"Value 5 (+/-)\", \"color\": \"Joy factors\", \"dividedBy\": \"Country\", \"size\": \"Value 3 (+)\", \"title\": \"Bubble Plot\", } ) )","title":"Bubble Plot"},{"location":"examples/presets/24_C_C_bubbleplot/#bubble-plot","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.bubbleplot( { \"x\": \"Value 4 (+/-)\", \"y\": \"Value 5 (+/-)\", \"color\": \"Joy factors\", \"dividedBy\": \"Country\", \"size\": \"Value 3 (+)\", \"title\": \"Bubble Plot\", } ) )","title":"Bubble Plot"},{"location":"examples/presets/27_C_A_area_negative/","text":"Area Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.area( {\"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"title\": \"Area Chart\"} ) )","title":"Area Chart"},{"location":"examples/presets/27_C_A_area_negative/#area-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.area( {\"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"title\": \"Area Chart\"} ) )","title":"Area Chart"},{"location":"examples/presets/28_C_A_stacked_area/","text":"Stacked Area Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.stackedArea( { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"stackedBy\": \"Country\", \"title\": \"Stacked Area Chart\", } ) )","title":"Stacked Area Chart"},{"location":"examples/presets/28_C_A_stacked_area/#stacked-area-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.stackedArea( { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"stackedBy\": \"Country\", \"title\": \"Stacked Area Chart\", } ) )","title":"Stacked Area Chart"},{"location":"examples/presets/29_C_A_percentage_area/","text":"Percentage Area Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.percentageArea( { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"stackedBy\": \"Country\", \"title\": \"Percentage Area Chart\", } ) )","title":"Percentage Area Chart"},{"location":"examples/presets/29_C_A_percentage_area/#percentage-area-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.percentageArea( { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"stackedBy\": \"Country\", \"title\": \"Percentage Area Chart\", } ) )","title":"Percentage Area Chart"},{"location":"examples/presets/31_C_A_splitted_area/","text":"Splitted Area Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.splittedArea( { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"splittedBy\": \"Country\", \"title\": \"Splitted Area Chart\", } ) )","title":"Splitted Area Chart"},{"location":"examples/presets/31_C_A_splitted_area/#splitted-area-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.splittedArea( { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"splittedBy\": \"Country\", \"title\": \"Splitted Area Chart\", } ) )","title":"Splitted Area Chart"},{"location":"examples/presets/32_C_A_stream/","text":"Stream Graph Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/music_industry_history_1.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.stream( { \"x\": \"Year\", \"y\": \"Revenue [m$]\", \"stackedBy\": \"Format\", \"title\": \"Stream Graph\", } ), Style( { \"plot\": { \"yAxis\": {\"interlacing\": {\"color\": \"#ffffff00\"}}, \"xAxis\": {\"label\": {\"angle\": \"-45deg\"}}, } } ), )","title":"Stream Graph"},{"location":"examples/presets/32_C_A_stream/#stream-graph","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/music_industry_history_1.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.stream( { \"x\": \"Year\", \"y\": \"Revenue [m$]\", \"stackedBy\": \"Format\", \"title\": \"Stream Graph\", } ), Style( { \"plot\": { \"yAxis\": {\"interlacing\": {\"color\": \"#ffffff00\"}}, \"xAxis\": {\"label\": {\"angle\": \"-45deg\"}}, } } ), )","title":"Stream Graph"},{"location":"examples/presets/33_C_A_vertical_stream/","text":"Vertical Stream Graph Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/music_industry_history_1.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.verticalStream( { \"x\": \"Revenue [m$]\", \"y\": \"Year\", \"stackedBy\": \"Format\", \"title\": \"Vertical Stream Graph\", } ), Style( {\"plot\": {\"xAxis\": {\"interlacing\": {\"color\": \"#ffffff00\"}}}} ), )","title":"Vertical Stream Graph"},{"location":"examples/presets/33_C_A_vertical_stream/#vertical-stream-graph","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/music_industry_history_1.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.verticalStream( { \"x\": \"Revenue [m$]\", \"y\": \"Year\", \"stackedBy\": \"Format\", \"title\": \"Vertical Stream Graph\", } ), Style( {\"plot\": {\"xAxis\": {\"interlacing\": {\"color\": \"#ffffff00\"}}}} ), )","title":"Vertical Stream Graph"},{"location":"examples/presets/34_C_A_violin/","text":"Violin Graph Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/music_industry_history_1.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.violin( { \"x\": \"Year\", \"y\": \"Revenue [m$]\", \"splittedBy\": \"Format\", \"title\": \"Violin Graph\", } ), Style( { \"plot\": { \"yAxis\": {\"interlacing\": {\"color\": \"#ffffff00\"}}, \"xAxis\": {\"label\": {\"angle\": \"-45deg\"}}, } } ), )","title":"Violin Graph"},{"location":"examples/presets/34_C_A_violin/#violin-graph","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/music_industry_history_1.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.violin( { \"x\": \"Year\", \"y\": \"Revenue [m$]\", \"splittedBy\": \"Format\", \"title\": \"Violin Graph\", } ), Style( { \"plot\": { \"yAxis\": {\"interlacing\": {\"color\": \"#ffffff00\"}}, \"xAxis\": {\"label\": {\"angle\": \"-45deg\"}}, } } ), )","title":"Violin Graph"},{"location":"examples/presets/35_C_A_vertical_violin/","text":"Vertical Violin Graph Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/music_industry_history_1.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.verticalViolin( { \"x\": \"Revenue [m$]\", \"y\": \"Year\", \"splittedBy\": \"Format\", \"title\": \"Vertical Violin Graph\", } ), Style( {\"plot\": {\"xAxis\": {\"interlacing\": {\"color\": \"#ffffff00\"}}}} ), )","title":"Vertical Violin Graph"},{"location":"examples/presets/35_C_A_vertical_violin/#vertical-violin-graph","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/music_industry_history_1.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.verticalViolin( { \"x\": \"Revenue [m$]\", \"y\": \"Year\", \"splittedBy\": \"Format\", \"title\": \"Vertical Violin Graph\", } ), Style( {\"plot\": {\"xAxis\": {\"interlacing\": {\"color\": \"#ffffff00\"}}}} ), )","title":"Vertical Violin Graph"},{"location":"examples/presets/38_C_L_line/","text":"Line Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.line( { \"x\": \"Year\", \"y\": \"Value 6 (+/-)\", \"dividedBy\": \"Country\", \"title\": \"Line Chart\", } ) )","title":"Line Chart"},{"location":"examples/presets/38_C_L_line/#line-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.line( { \"x\": \"Year\", \"y\": \"Value 6 (+/-)\", \"dividedBy\": \"Country\", \"title\": \"Line Chart\", } ) )","title":"Line Chart"},{"location":"examples/presets/39_C_L_vertical_line/","text":"Vertical Line Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.line( { \"x\": \"Value 6 (+/-)\", \"y\": \"Year\", \"dividedBy\": \"Country\", \"title\": \"Vertical Line Chart\", } ) )","title":"Vertical Line Chart"},{"location":"examples/presets/39_C_L_vertical_line/#vertical-line-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.line( { \"x\": \"Value 6 (+/-)\", \"y\": \"Year\", \"dividedBy\": \"Country\", \"title\": \"Vertical Line Chart\", } ) )","title":"Vertical Line Chart"},{"location":"examples/presets/40_P_R_pie/","text":"Pie Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.pie( { \"angle\": \"Value 2 (+)\", \"by\": \"Joy factors\", \"title\": \"Pie Chart\", } ) )","title":"Pie Chart"},{"location":"examples/presets/40_P_R_pie/#pie-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.pie( { \"angle\": \"Value 2 (+)\", \"by\": \"Joy factors\", \"title\": \"Pie Chart\", } ) )","title":"Pie Chart"},{"location":"examples/presets/42_P_R_polar_column/","text":"Polar Column Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.polarColumn( { \"angle\": \"Joy factors\", \"radius\": \"Value 2 (+)\", \"title\": \"Polar Column Chart\", } ) )","title":"Polar Column Chart"},{"location":"examples/presets/42_P_R_polar_column/#polar-column-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.polarColumn( { \"angle\": \"Joy factors\", \"radius\": \"Value 2 (+)\", \"title\": \"Polar Column Chart\", } ) )","title":"Polar Column Chart"},{"location":"examples/presets/42a_P_R_polar_stacked_column/","text":"Polar Stacked Column Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.polarStackedColumn( { \"angle\": \"Country\", \"radius\": \"Value 2 (+)\", \"stackedBy\": \"Joy factors\", \"title\": \"Polar Stacked Column Chart\", } ) )","title":"Polar Stacked Column Chart"},{"location":"examples/presets/42a_P_R_polar_stacked_column/#polar-stacked-column-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.polarStackedColumn( { \"angle\": \"Country\", \"radius\": \"Value 2 (+)\", \"stackedBy\": \"Joy factors\", \"title\": \"Polar Stacked Column Chart\", } ) )","title":"Polar Stacked Column Chart"},{"location":"examples/presets/44_P_R_variable_radius_pie_chart/","text":"Variable Radius Pie Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.variableRadiusPie( { \"angle\": \"Value 2 (+)\", \"radius\": \"Value 1 (+)\", \"by\": \"Joy factors\", \"title\": \"Variable Radius Pie Chart\", } ) )","title":"Variable Radius Pie Chart"},{"location":"examples/presets/44_P_R_variable_radius_pie_chart/#variable-radius-pie-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.variableRadiusPie( { \"angle\": \"Value 2 (+)\", \"radius\": \"Value 1 (+)\", \"by\": \"Joy factors\", \"title\": \"Variable Radius Pie Chart\", } ) )","title":"Variable Radius Pie Chart"},{"location":"examples/presets/49_P_R_radial_bar/","text":"Radial Bar Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.radialBar( { \"angle\": \"Value 1 (+)\", \"radius\": \"Country\", \"title\": \"Radial Bar Chart\", } ) )","title":"Radial Bar Chart"},{"location":"examples/presets/49_P_R_radial_bar/#radial-bar-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.radialBar( { \"angle\": \"Value 1 (+)\", \"radius\": \"Country\", \"title\": \"Radial Bar Chart\", } ) )","title":"Radial Bar Chart"},{"location":"examples/presets/50_P_R_radial_stacked_bar/","text":"Radial Stacked Bar Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.radialStackedBar( { \"angle\": \"Value 2 (+)\", \"radius\": \"Country\", \"stackedBy\": \"Joy factors\", \"title\": \"Radial Stacked Bar Chart\", } ) )","title":"Radial Stacked Bar Chart"},{"location":"examples/presets/50_P_R_radial_stacked_bar/#radial-stacked-bar-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.radialStackedBar( { \"angle\": \"Value 2 (+)\", \"radius\": \"Country\", \"stackedBy\": \"Joy factors\", \"title\": \"Radial Stacked Bar Chart\", } ) )","title":"Radial Stacked Bar Chart"},{"location":"examples/presets/51_P_R_donut/","text":"Donut Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.donut( { \"angle\": \"Value 2 (+)\", \"stackedBy\": \"Joy factors\", \"title\": \"Donut Chart\", } ) )","title":"Donut Chart"},{"location":"examples/presets/51_P_R_donut/#donut-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.donut( { \"angle\": \"Value 2 (+)\", \"stackedBy\": \"Joy factors\", \"title\": \"Donut Chart\", } ) )","title":"Donut Chart"},{"location":"examples/presets/52_P_R_nested_donut/","text":"Nested Donut Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_3.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.nestedDonut( { \"angle\": \"Value 2 (+)\", \"stackedBy\": \"Joy factors\", \"radius\": \"Country\", \"title\": \"Nested Donut Chart\", } ), Style( { \"plot\": { \"marker\": { \"rectangleSpacing\": \"0\", \"borderWidth\": 1, \"borderOpacity\": 0, } } } ), )","title":"Nested Donut Chart"},{"location":"examples/presets/52_P_R_nested_donut/#nested-donut-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_3.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.nestedDonut( { \"angle\": \"Value 2 (+)\", \"stackedBy\": \"Joy factors\", \"radius\": \"Country\", \"title\": \"Nested Donut Chart\", } ), Style( { \"plot\": { \"marker\": { \"rectangleSpacing\": \"0\", \"borderWidth\": 1, \"borderOpacity\": 0, } } } ), )","title":"Nested Donut Chart"},{"location":"examples/presets/53_P_C_polar_scatter/","text":"Polar Scatter Plot Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.polarScatter( { \"angle\": \"Value 3 (+)\", \"radius\": \"Value 2 (+)\", \"dividedBy\": \"Country\", \"title\": \"Polar Scatter Plot\", } ) )","title":"Polar Scatter Plot"},{"location":"examples/presets/53_P_C_polar_scatter/#polar-scatter-plot","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.polarScatter( { \"angle\": \"Value 3 (+)\", \"radius\": \"Value 2 (+)\", \"dividedBy\": \"Country\", \"title\": \"Polar Scatter Plot\", } ) )","title":"Polar Scatter Plot"},{"location":"examples/presets/56_P_A_polar_line/","text":"Polar Line Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.polarLine( { \"angle\": \"Year\", \"radius\": \"Value 2 (+)\", \"dividedBy\": \"Country\", \"title\": \"Polar Line Chart\", } ) )","title":"Polar Line Chart"},{"location":"examples/presets/56_P_A_polar_line/#polar-line-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.polarLine( { \"angle\": \"Year\", \"radius\": \"Value 2 (+)\", \"dividedBy\": \"Country\", \"title\": \"Polar Line Chart\", } ) )","title":"Polar Line Chart"},{"location":"examples/presets/58_W_R_treemap/","text":"Treemap Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.treemap( { \"size\": \"Value 2 (+)\", \"color\": \"Country_code\", \"title\": \"Treemap\", } ) )","title":"Treemap"},{"location":"examples/presets/58_W_R_treemap/#treemap","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.treemap( { \"size\": \"Value 2 (+)\", \"color\": \"Country_code\", \"title\": \"Treemap\", } ) )","title":"Treemap"},{"location":"examples/presets/59_W_R_stacked_treemap/","text":"Stacked Treemap Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.stackedTreemap( { \"size\": \"Value 2 (+)\", \"color\": \"Joy factors\", \"title\": \"Stacked Treemap\", \"dividedBy\": \"Country_code\", } ) )","title":"Stacked Treemap"},{"location":"examples/presets/59_W_R_stacked_treemap/#stacked-treemap","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.stackedTreemap( { \"size\": \"Value 2 (+)\", \"color\": \"Joy factors\", \"title\": \"Stacked Treemap\", \"dividedBy\": \"Country_code\", } ) )","title":"Stacked Treemap"},{"location":"examples/presets/60_W_R_heatmap/","text":"Heatmap Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.heatmap( { \"x\": \"Year\", \"y\": \"Country_code\", \"lightness\": \"Value 3 (+)\", \"title\": \"Heatmap\", } ), Style({\"plot\": {\"marker\": {\"rectangleSpacing\": 0}}}), )","title":"Heatmap"},{"location":"examples/presets/60_W_R_heatmap/#heatmap","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.heatmap( { \"x\": \"Year\", \"y\": \"Country_code\", \"lightness\": \"Value 3 (+)\", \"title\": \"Heatmap\", } ), Style({\"plot\": {\"marker\": {\"rectangleSpacing\": 0}}}), )","title":"Heatmap"},{"location":"examples/presets/61_W_R_bubble_chart/","text":"Bubble Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.bubble( { \"size\": \"Value 5 (+/-)\", \"color\": \"Country_code\", \"title\": \"Bubble Chart\", } ) )","title":"Bubble Chart"},{"location":"examples/presets/61_W_R_bubble_chart/#bubble-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.bubble( { \"size\": \"Value 5 (+/-)\", \"color\": \"Country_code\", \"title\": \"Bubble Chart\", } ) )","title":"Bubble Chart"},{"location":"examples/presets/62_W_R_stacked_bubble/","text":"Stacked Bubble Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.stackedBubble( { \"size\": \"Value 2 (+)\", \"color\": \"Joy factors\", \"stackedBy\": \"Country_code\", \"title\": \"Stacked Bubble Chart\", } ) )","title":"Stacked Bubble Chart"},{"location":"examples/presets/62_W_R_stacked_bubble/#stacked-bubble-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.stackedBubble( { \"size\": \"Value 2 (+)\", \"color\": \"Joy factors\", \"stackedBy\": \"Country_code\", \"title\": \"Stacked Bubble Chart\", } ) )","title":"Stacked Bubble Chart"},{"location":"examples/static/","text":"Static charts","title":"Static charts"},{"location":"examples/static/#static-charts","text":"","title":"Static charts"},{"location":"examples/static/NO_spiderweb_line_2dis_1con/","text":"Polar Line Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"color\": \"Country\", }, \"title\": \"Polar Line Chart\", \"geometry\": \"line\", \"coordSystem\": \"polar\", } ) )","title":"Polar Line Chart"},{"location":"examples/static/NO_spiderweb_line_2dis_1con/#polar-line-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"color\": \"Country\", }, \"title\": \"Polar Line Chart\", \"geometry\": \"line\", \"coordSystem\": \"polar\", } ) )","title":"Polar Line Chart"},{"location":"examples/static/area_negative_1dis_1con/","text":"Area Chart with (-) Nums Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"label\": \"Value 5 (+/-)\", }, \"title\": \"Area Chart with (-) Nums\", \"geometry\": \"area\", } ) )","title":"Area Chart with (-) Nums"},{"location":"examples/static/area_negative_1dis_1con/#area-chart-with-nums","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"label\": \"Value 5 (+/-)\", }, \"title\": \"Area Chart with (-) Nums\", \"geometry\": \"area\", } ) )","title":"Area Chart with (-) Nums"},{"location":"examples/static/bar_rectangle_negative_1dis_1con/","text":"Bar Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Value 5 (+/-)\", \"y\": \"Country\", \"color\": \"Country\", \"label\": \"Value 5 (+/-)\", }, \"title\": \"Bar Chart\", \"orientation\": \"vertical\", } ) )","title":"Bar Chart"},{"location":"examples/static/bar_rectangle_negative_1dis_1con/#bar-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Value 5 (+/-)\", \"y\": \"Country\", \"color\": \"Country\", \"label\": \"Value 5 (+/-)\", }, \"title\": \"Bar Chart\", \"orientation\": \"vertical\", } ) )","title":"Bar Chart"},{"location":"examples/static/bubble_circle_1dis_2con/","text":"Bubble Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"color\": \"Country_code\", \"label\": \"Country_code\", \"size\": \"Value 5 (+/-)\", }, \"title\": \"Bubble Chart\", \"geometry\": \"circle\", } ) )","title":"Bubble Chart"},{"location":"examples/static/bubble_circle_1dis_2con/#bubble-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"color\": \"Country_code\", \"label\": \"Country_code\", \"size\": \"Value 5 (+/-)\", }, \"title\": \"Bubble Chart\", \"geometry\": \"circle\", } ) )","title":"Bubble Chart"},{"location":"examples/static/bubble_circle_2dis_2con/","text":"Stacked Bubble Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"color\": \"Joy factors\", \"size\": [\"Country_code\", \"Value 2 (+)\"], \"label\": \"Country_code\", }, \"title\": \"Stacked Bubble Chart\", \"geometry\": \"circle\", } ) )","title":"Stacked Bubble Chart"},{"location":"examples/static/bubble_circle_2dis_2con/#stacked-bubble-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"color\": \"Joy factors\", \"size\": [\"Country_code\", \"Value 2 (+)\"], \"label\": \"Country_code\", }, \"title\": \"Stacked Bubble Chart\", \"geometry\": \"circle\", } ) )","title":"Stacked Bubble Chart"},{"location":"examples/static/column_grouped_rectangle_negative_2dis_1con/","text":"Grouped Column Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Joy factors\", \"Country\"], \"y\": \"Value 5 (+/-)\", \"color\": \"Joy factors\", \"label\": \"Value 5 (+/-)\", }, \"title\": \"Grouped Column Chart\", } ), Style( { \"plot\": { \"marker\": { \"label\": { \"fontSize\": 6, \"orientation\": \"vertical\", \"angle\": -3.14, } } } } ), )","title":"Grouped Column Chart"},{"location":"examples/static/column_grouped_rectangle_negative_2dis_1con/#grouped-column-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Joy factors\", \"Country\"], \"y\": \"Value 5 (+/-)\", \"color\": \"Joy factors\", \"label\": \"Value 5 (+/-)\", }, \"title\": \"Grouped Column Chart\", } ), Style( { \"plot\": { \"marker\": { \"label\": { \"fontSize\": 6, \"orientation\": \"vertical\", \"angle\": -3.14, } } } } ), )","title":"Grouped Column Chart"},{"location":"examples/static/column_stacked_rectangle_1dis_1con/","text":"Single Stacked Column Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": [\"Joy factors\", \"Value 2 (+)\"], \"color\": \"Joy factors\", \"label\": \"Value 2 (+)\", }, \"title\": \"Single Stacked Column Chart\", } ) )","title":"Single Stacked Column Chart"},{"location":"examples/static/column_stacked_rectangle_1dis_1con/#single-stacked-column-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": [\"Joy factors\", \"Value 2 (+)\"], \"color\": \"Joy factors\", \"label\": \"Value 2 (+)\", }, \"title\": \"Single Stacked Column Chart\", } ) )","title":"Single Stacked Column Chart"},{"location":"examples/static/column_stacked_rectangle_negative_2dis_1con/","text":"Stacked Column Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Country\", \"y\": [\"Joy factors\", \"Value 2 (+)\"], \"color\": \"Joy factors\", \"label\": \"Value 2 (+)\", }, \"title\": \"Stacked Column Chart\", } ), Style( { \"plot\": { \"xAxis\": {\"label\": {\"angle\": 2.3}}, \"marker\": { \"label\": { \"fontSize\": 7, \"orientation\": \"vertical\", \"angle\": -3.14, } }, } } ), )","title":"Stacked Column Chart"},{"location":"examples/static/column_stacked_rectangle_negative_2dis_1con/#stacked-column-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Country\", \"y\": [\"Joy factors\", \"Value 2 (+)\"], \"color\": \"Joy factors\", \"label\": \"Value 2 (+)\", }, \"title\": \"Stacked Column Chart\", } ), Style( { \"plot\": { \"xAxis\": {\"label\": {\"angle\": 2.3}}, \"marker\": { \"label\": { \"fontSize\": 7, \"orientation\": \"vertical\", \"angle\": -3.14, } }, } } ), )","title":"Stacked Column Chart"},{"location":"examples/static/coxcomb_stacked_rectangle_2dis_1con/","text":"Coxcomb Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Joy factors\", \"Value 2 (+)\"], \"color\": \"Joy factors\", }, \"title\": \"Coxcomb Chart\", \"coordSystem\": \"polar\", } ) )","title":"Coxcomb Chart"},{"location":"examples/static/coxcomb_stacked_rectangle_2dis_1con/#coxcomb-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Joy factors\", \"Value 2 (+)\"], \"color\": \"Joy factors\", }, \"title\": \"Coxcomb Chart\", \"coordSystem\": \"polar\", } ) )","title":"Coxcomb Chart"},{"location":"examples/static/donut_rectangle_1dis_1con/","text":"Donut Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Joy factors\", \"Value 2 (+)\"], \"y\": {\"range\": {\"min\": \"-200%\"}}, \"color\": \"Joy factors\", \"label\": \"Value 2 (+)\", }, \"title\": \"Donut Chart\", \"coordSystem\": \"polar\", } ) )","title":"Donut Chart"},{"location":"examples/static/donut_rectangle_1dis_1con/#donut-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Joy factors\", \"Value 2 (+)\"], \"y\": {\"range\": {\"min\": \"-200%\"}}, \"color\": \"Joy factors\", \"label\": \"Value 2 (+)\", }, \"title\": \"Donut Chart\", \"coordSystem\": \"polar\", } ) )","title":"Donut Chart"},{"location":"examples/static/dotplot_circle_negative_1dis_1con/","text":"Dot Plot Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": {\"x\": [\"Year\", \"Value 5 (+/-)\"]}, \"title\": \"Dot Plot\", \"geometry\": \"circle\", } ) )","title":"Dot Plot"},{"location":"examples/static/dotplot_circle_negative_1dis_1con/#dot-plot","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": {\"x\": [\"Year\", \"Value 5 (+/-)\"]}, \"title\": \"Dot Plot\", \"geometry\": \"circle\", } ) )","title":"Dot Plot"},{"location":"examples/static/histogram_rectangle_negative_1dis_1con/","text":"Histogram Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"label\": \"Value 5 (+/-)\", }, \"title\": \"Histogram\", \"align\": \"none\", } ), Style({\"plot.marker.rectangleSpacing\": 0.07}), )","title":"Histogram"},{"location":"examples/static/histogram_rectangle_negative_1dis_1con/#histogram","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"label\": \"Value 5 (+/-)\", }, \"title\": \"Histogram\", \"align\": \"none\", } ), Style({\"plot.marker.rectangleSpacing\": 0.07}), )","title":"Histogram"},{"location":"examples/static/line_negative_1dis_1con/","text":"Single Line Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"label\": \"Value 5 (+/-)\", }, \"title\": \"Single Line Chart\", \"geometry\": \"line\", } ) )","title":"Single Line Chart"},{"location":"examples/static/line_negative_1dis_1con/#single-line-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"label\": \"Value 5 (+/-)\", }, \"title\": \"Single Line Chart\", \"geometry\": \"line\", } ) )","title":"Single Line Chart"},{"location":"examples/static/line_negative_2dis_1con/","text":"Line Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"color\": \"Country\", }, \"title\": \"Line Chart\", \"geometry\": \"line\", } ) )","title":"Line Chart"},{"location":"examples/static/line_negative_2dis_1con/#line-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"color\": \"Country\", }, \"title\": \"Line Chart\", \"geometry\": \"line\", } ) )","title":"Line Chart"},{"location":"examples/static/marimekko_rectangle_2dis_2con/","text":"Marimekko Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Country\", \"Value 2 (+)\"], \"y\": [\"Joy factors\", \"Value 3 (+)\"], \"color\": \"Joy factors\", \"label\": [\"Country\", \"Value 2 (+)\"], }, \"title\": \"Marimekko Chart\", \"align\": \"stretch\", \"orientation\": \"horizontal\", } ), Style( { \"plot\": { \"marker\": { \"label\": { \"format\": \"dimensionsFirst\", \"fontSize\": \"0.7em\", } } } } ), )","title":"Marimekko Chart"},{"location":"examples/static/marimekko_rectangle_2dis_2con/#marimekko-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Country\", \"Value 2 (+)\"], \"y\": [\"Joy factors\", \"Value 3 (+)\"], \"color\": \"Joy factors\", \"label\": [\"Country\", \"Value 2 (+)\"], }, \"title\": \"Marimekko Chart\", \"align\": \"stretch\", \"orientation\": \"horizontal\", } ), Style( { \"plot\": { \"marker\": { \"label\": { \"format\": \"dimensionsFirst\", \"fontSize\": \"0.7em\", } } } } ), )","title":"Marimekko Chart"},{"location":"examples/static/mekko_rectangle_1dis_2con/","text":"Mekko Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Country\", \"Value 2 (+)\"], \"y\": { \"set\": [\"Value 1 (+)\"], \"range\": {\"max\": \"110%\"}, }, \"color\": \"Country\", \"label\": [\"Value 2 (+)\", \"Country\"], }, \"title\": \"Mekko Chart\", } ) )","title":"Mekko Chart"},{"location":"examples/static/mekko_rectangle_1dis_2con/#mekko-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Country\", \"Value 2 (+)\"], \"y\": { \"set\": [\"Value 1 (+)\"], \"range\": {\"max\": \"110%\"}, }, \"color\": \"Country\", \"label\": [\"Value 2 (+)\", \"Country\"], }, \"title\": \"Mekko Chart\", } ) )","title":"Mekko Chart"},{"location":"examples/static/pie_rectangle_1dis_1con/","text":"Pie Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Joy factors\", \"Value 2 (+)\"], \"color\": \"Joy factors\", \"label\": \"Value 2 (+)\", }, \"title\": \"Pie Chart\", \"coordSystem\": \"polar\", } ) )","title":"Pie Chart"},{"location":"examples/static/pie_rectangle_1dis_1con/#pie-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Joy factors\", \"Value 2 (+)\"], \"color\": \"Joy factors\", \"label\": \"Value 2 (+)\", }, \"title\": \"Pie Chart\", \"coordSystem\": \"polar\", } ) )","title":"Pie Chart"},{"location":"examples/static/radial_rectangle_1dis_1con/","text":"Radial Bar Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Value 2 (+)\", \"y\": { \"set\": [\"Joy factors\"], \"range\": {\"min\": \"-30%\"}, }, \"color\": \"Joy factors\", \"label\": \"Value 2 (+)\", }, \"title\": \"Radial Bar Chart\", \"coordSystem\": \"polar\", } ) )","title":"Radial Bar Chart"},{"location":"examples/static/radial_rectangle_1dis_1con/#radial-bar-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Value 2 (+)\", \"y\": { \"set\": [\"Joy factors\"], \"range\": {\"min\": \"-30%\"}, }, \"color\": \"Joy factors\", \"label\": \"Value 2 (+)\", }, \"title\": \"Radial Bar Chart\", \"coordSystem\": \"polar\", } ) )","title":"Radial Bar Chart"},{"location":"examples/static/radial_stacked_rectangle_2dis_1con/","text":"Stacked Radial Bar Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Country\", \"Value 2 (+)\"], \"y\": {\"set\": [\"Year\"], \"range\": {\"min\": \"-20%\"}}, \"color\": \"Country\", \"lightness\": \"Year\", }, \"title\": \"Stacked Radial Bar Chart\", \"coordSystem\": \"polar\", } ) )","title":"Stacked Radial Bar Chart"},{"location":"examples/static/radial_stacked_rectangle_2dis_1con/#stacked-radial-bar-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Country\", \"Value 2 (+)\"], \"y\": {\"set\": [\"Year\"], \"range\": {\"min\": \"-20%\"}}, \"color\": \"Country\", \"lightness\": \"Year\", }, \"title\": \"Stacked Radial Bar Chart\", \"coordSystem\": \"polar\", } ) )","title":"Stacked Radial Bar Chart"},{"location":"examples/static/scatterplot_circle_negative_1dis_2con/","text":"Scatter Plot Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Value 6 (+/-)\", \"y\": \"Value 5 (+/-)\", \"noop\": \"Year\", \"label\": \"Year\", }, \"title\": \"Scatter Plot\", \"geometry\": \"circle\", } ) )","title":"Scatter Plot"},{"location":"examples/static/scatterplot_circle_negative_1dis_2con/#scatter-plot","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Value 6 (+/-)\", \"y\": \"Value 5 (+/-)\", \"noop\": \"Year\", \"label\": \"Year\", }, \"title\": \"Scatter Plot\", \"geometry\": \"circle\", } ) )","title":"Scatter Plot"},{"location":"examples/static/scatterplot_circle_negative_2dis_3con/","text":"Bubble Plot Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Value 6 (+/-)\", \"y\": \"Value 5 (+/-)\", \"color\": \"Country\", \"size\": \"Value 4 (+/-)\", \"label\": \"Value 5 (+/-)\", }, \"title\": \"Bubble Plot\", \"geometry\": \"circle\", } ) )","title":"Bubble Plot"},{"location":"examples/static/scatterplot_circle_negative_2dis_3con/#bubble-plot","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Value 6 (+/-)\", \"y\": \"Value 5 (+/-)\", \"color\": \"Country\", \"size\": \"Value 4 (+/-)\", \"label\": \"Value 5 (+/-)\", }, \"title\": \"Bubble Plot\", \"geometry\": \"circle\", } ) )","title":"Bubble Plot"},{"location":"examples/static/spiderweb_area_1dis_1con/","text":"Polar Area Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": { \"set\": [\"Value 2 (+)\"], \"range\": {\"max\": \"130%\"}, }, \"label\": \"Value 2 (+)\", }, \"title\": \"Polar Area Chart\", \"geometry\": \"area\", \"coordSystem\": \"polar\", } ), Style( { \"plot\": { \"marker\": { \"label\": { \"orientation\": \"tangential\", \"angle\": -1.57, } } } } ), )","title":"Polar Area Chart"},{"location":"examples/static/spiderweb_area_1dis_1con/#polar-area-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": { \"set\": [\"Value 2 (+)\"], \"range\": {\"max\": \"130%\"}, }, \"label\": \"Value 2 (+)\", }, \"title\": \"Polar Area Chart\", \"geometry\": \"area\", \"coordSystem\": \"polar\", } ), Style( { \"plot\": { \"marker\": { \"label\": { \"orientation\": \"tangential\", \"angle\": -1.57, } } } } ), )","title":"Polar Area Chart"},{"location":"examples/static/spiderweb_line_1dis_1con/","text":"Polar Single Line Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": { \"set\": [\"Value 2 (+)\"], \"range\": {\"max\": \"130%\"}, }, \"label\": \"Value 2 (+)\", }, \"title\": \"Polar Single Line Chart\", \"geometry\": \"line\", \"coordSystem\": \"polar\", } ), Style( { \"plot\": { \"marker\": { \"label\": { \"orientation\": \"tangential\", \"angle\": -1.57, } } } } ), )","title":"Polar Single Line Chart"},{"location":"examples/static/spiderweb_line_1dis_1con/#polar-single-line-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": { \"set\": [\"Value 2 (+)\"], \"range\": {\"max\": \"130%\"}, }, \"label\": \"Value 2 (+)\", }, \"title\": \"Polar Single Line Chart\", \"geometry\": \"line\", \"coordSystem\": \"polar\", } ), Style( { \"plot\": { \"marker\": { \"label\": { \"orientation\": \"tangential\", \"angle\": -1.57, } } } } ), )","title":"Polar Single Line Chart"},{"location":"examples/static/stacked_area_2dis_1con/","text":"Stacked Area Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", }, \"title\": \"Stacked Area Chart\", \"geometry\": \"area\", } ) )","title":"Stacked Area Chart"},{"location":"examples/static/stacked_area_2dis_1con/#stacked-area-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", }, \"title\": \"Stacked Area Chart\", \"geometry\": \"area\", } ) )","title":"Stacked Area Chart"},{"location":"examples/static/stacked_mekko_rectangle_2dis_2con/","text":"Stacked Mekko Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Country\", \"Value 2 (+)\"], \"y\": { \"set\": [\"Joy factors\", \"Value 3 (+)\"], \"range\": {\"max\": \"110%\"}, }, \"color\": \"Joy factors\", \"label\": [\"Value 2 (+)\", \"Country\"], }, \"title\": \"Stacked Mekko Chart\", \"orientation\": \"horizontal\", } ) )","title":"Stacked Mekko Chart"},{"location":"examples/static/stacked_mekko_rectangle_2dis_2con/#stacked-mekko-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Country\", \"Value 2 (+)\"], \"y\": { \"set\": [\"Joy factors\", \"Value 3 (+)\"], \"range\": {\"max\": \"110%\"}, }, \"color\": \"Joy factors\", \"label\": [\"Value 2 (+)\", \"Country\"], }, \"title\": \"Stacked Mekko Chart\", \"orientation\": \"horizontal\", } ) )","title":"Stacked Mekko Chart"},{"location":"examples/static/stream_stacked_area_3dis_1con/","text":"Stacked Streamgraph Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Year\", \"Joy factors\"], \"y\": [\"Value 3 (+)\", \"Country_code\"], \"color\": \"Country_code\", }, \"title\": \"Stacked Streamgraph\", \"geometry\": \"area\", \"align\": \"center\", } ) )","title":"Stacked Streamgraph"},{"location":"examples/static/stream_stacked_area_3dis_1con/#stacked-streamgraph","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Year\", \"Joy factors\"], \"y\": [\"Value 3 (+)\", \"Country_code\"], \"color\": \"Country_code\", }, \"title\": \"Stacked Streamgraph\", \"geometry\": \"area\", \"align\": \"center\", } ) )","title":"Stacked Streamgraph"},{"location":"examples/static/treemap_rectangle_1dis_1con/","text":"Treemap Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"label\": \"Country_code\", \"size\": \"Value 2 (+)\", }, \"title\": \"Treemap\", } ) )","title":"Treemap"},{"location":"examples/static/treemap_rectangle_1dis_1con/#treemap","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"label\": \"Country_code\", \"size\": \"Value 2 (+)\", }, \"title\": \"Treemap\", } ) )","title":"Treemap"},{"location":"examples/static/treemap_rectangle_2dis_2con/","text":"Stacked Treemap Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"color\": \"Joy factors\", \"size\": [\"Value 2 (+)\", \"Country_code\"], \"label\": \"Country_code\", \"lightness\": \"Value 2 (+)\", }, \"title\": \"Stacked Treemap\", } ) )","title":"Stacked Treemap"},{"location":"examples/static/treemap_rectangle_2dis_2con/#stacked-treemap","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"color\": \"Joy factors\", \"size\": [\"Value 2 (+)\", \"Country_code\"], \"label\": \"Country_code\", \"lightness\": \"Value 2 (+)\", }, \"title\": \"Stacked Treemap\", } ) )","title":"Stacked Treemap"},{"location":"examples/static/waterfall_rectangle_negative_1dis_1con/","text":"Waterfall Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Year\", \"Value 5 (+/-)\"], \"label\": \"Value 5 (+/-)\", }, \"title\": \"Waterfall Chart\", \"legend\": None, } ), Style({\"plot\": {\"marker\": {\"label\": {\"position\": \"top\"}}}}), )","title":"Waterfall Chart"},{"location":"examples/static/waterfall_rectangle_negative_1dis_1con/#waterfall-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Year\", \"Value 5 (+/-)\"], \"label\": \"Value 5 (+/-)\", }, \"title\": \"Waterfall Chart\", \"legend\": None, } ), Style({\"plot\": {\"marker\": {\"label\": {\"position\": \"top\"}}}}), )","title":"Waterfall Chart"},{"location":"reference/ipyvizzu/","text":"ipyvizzu Build animated charts in Jupyter Notebook and similar environments with a simple Python syntax. ipyvizzu.ChartProperty Bases: Enum An enum class for storing chart properties. Source code in ipyvizzu/template.py class ChartProperty(Enum): \"\"\"An enum class for storing chart properties.\"\"\" CONFIG = \"config\" \"\"\"An enum key-value for storing config chart property.\"\"\" STYLE = \"style\" \"\"\"An enum key-value for storing style chart property.\"\"\" CONFIG = 'config' class-attribute An enum key-value for storing config chart property. STYLE = 'style' class-attribute An enum key-value for storing style chart property. ipyvizzu.EventHandler A class for representing an event handler. Source code in ipyvizzu/event.py class EventHandler: \"\"\"A class for representing an event handler.\"\"\" def __init__(self, event: str, handler: str): \"\"\" EventHandler constructor. It generates a uuid for the event handler, stores the event type and the body of the handler function. Args: event: The type of the event. handler: The body of the handler function. \"\"\" self._id = uuid.uuid4().hex[:7] self._event = event self._handler = \" \".join(handler.split()) @property def id(self) -> str: # pylint: disable=invalid-name \"\"\" A property for storing an id. Returns: The uuid of the event handler. \"\"\" return self._id @property def event(self) -> str: \"\"\" A property for storing an event type. Returns: The type of the event. \"\"\" return self._event @property def handler(self) -> str: \"\"\" A property for storing an event handler function. Returns: The body of the handler function. \"\"\" return self._handler id: str property A property for storing an id. Returns: Type Description str The uuid of the event handler. event: str property A property for storing an event type. Returns: Type Description str The type of the event. handler: str property A property for storing an event handler function. Returns: Type Description str The body of the handler function. __init__(event, handler) EventHandler constructor. It generates a uuid for the event handler, stores the event type and the body of the handler function. Parameters: Name Type Description Default event str The type of the event. required handler str The body of the handler function. required Source code in ipyvizzu/event.py def __init__(self, event: str, handler: str): \"\"\" EventHandler constructor. It generates a uuid for the event handler, stores the event type and the body of the handler function. Args: event: The type of the event. handler: The body of the handler function. \"\"\" self._id = uuid.uuid4().hex[:7] self._event = event self._handler = \" \".join(handler.split()) ipyvizzu.RawJavaScript A class for representing raw JavaScript code. Source code in ipyvizzu/json.py class RawJavaScript: \"\"\"A class for representing raw JavaScript code.\"\"\" # pylint: disable=too-few-public-methods def __init__(self, raw: Optional[str]): \"\"\" RawJavaScript constructor. It stores raw JavaScript code as a string. Args: raw: JavaScript code as `str`. \"\"\" self._raw = raw @property def raw(self) -> Optional[str]: \"\"\" A property for storing raw JavaScript code as a string. Returns: Raw JavaScript code as `str`. \"\"\" return self._raw raw: Optional[str] property A property for storing raw JavaScript code as a string. Returns: Type Description Optional [ str ] Raw JavaScript code as str . __init__(raw) RawJavaScript constructor. It stores raw JavaScript code as a string. Parameters: Name Type Description Default raw Optional [ str ] JavaScript code as str . required Source code in ipyvizzu/json.py def __init__(self, raw: Optional[str]): \"\"\" RawJavaScript constructor. It stores raw JavaScript code as a string. Args: raw: JavaScript code as `str`. \"\"\" self._raw = raw ipyvizzu.Method A class for storing and dumping any kind of data. Source code in ipyvizzu/method.py class Method: \"\"\"A class for storing and dumping any kind of data.\"\"\" # pylint: disable=too-few-public-methods _data: dict def dump(self) -> dict: \"\"\" A method for returning the stored data. Returns: The stored data. \"\"\" return self._data dump() A method for returning the stored data. Returns: Type Description dict The stored data. Source code in ipyvizzu/method.py def dump(self) -> dict: \"\"\" A method for returning the stored data. Returns: The stored data. \"\"\" return self._data ipyvizzu.Chart A class for representing a wrapper over Vizzu chart. Source code in ipyvizzu/chart.py class Chart: \"\"\"A class for representing a wrapper over Vizzu chart.\"\"\" VIZZU: str = \"https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js\" \"\"\"A variable for storing the default url of vizzu package.\"\"\" def __init__( self, vizzu: Optional[str] = VIZZU, width: Optional[str] = \"800px\", height: Optional[str] = \"480px\", display: Optional[Union[DisplayTarget, str]] = DisplayTarget.ACTUAL, ): \"\"\" Chart constructor. Args: vizzu: The url of Vizzu JavaScript package. width: The width of the chart. height: The height of the chart. display: The display behaviour of the chart. \"\"\" self._chart_id = uuid.uuid4().hex[:7] self._display_target = DisplayTarget(display) self._calls: List[str] = [] self._showed = False self._scroll_into_view = False ipyvizzurawjs = pkgutil.get_data(__name__, \"templates/ipyvizzu.js\") ipyvizzujs = ipyvizzurawjs.decode(\"utf-8\") # type: ignore self._display(DisplayTemplate.IPYVIZZUJS.format(ipyvizzujs=ipyvizzujs)) self._display( DisplayTemplate.INIT.format( chart_id=self._chart_id, vizzu=vizzu, div_width=width, div_height=height, ) ) if self._display_target != DisplayTarget.MANUAL: self._register_events() @staticmethod def _register_events() -> None: ipy = get_ipython() if ipy is not None: ipy.events.register(\"pre_run_cell\", Chart._register_pre_run_cell) @staticmethod def _register_pre_run_cell() -> None: display_javascript(DisplayTemplate.CLEAR_INHIBITSCROLL, raw=True) @property def scroll_into_view(self) -> bool: \"\"\" A property for turning on/off the scroll into view feature. Returns: The value of the property (default `False`). \"\"\" return self._scroll_into_view @scroll_into_view.setter def scroll_into_view(self, scroll_into_view: Optional[bool]): self._scroll_into_view = bool(scroll_into_view) def animate( self, *animations: Animation, **options: Optional[Union[str, int, float, dict]] ) -> None: \"\"\" A method for changing the state of the chart. Args: *animations: List of Animation objects such as [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style]. **options: Dictionary of animation options for example `duration=1`. Raises: ValueError: If `animations` is not set. Example: Reset the chart styles: chart.animate(Style(None)) \"\"\" if not animations: raise ValueError(\"No animation was set.\") animation = self._merge_animations(animations) animate = Animate(animation, options) self._display( DisplayTemplate.ANIMATE.format( display_target=self._display_target.value, chart_id=self._chart_id, scroll=str(self._scroll_into_view).lower(), **animate.dump(), ) ) @staticmethod def _merge_animations( animations: Tuple[Animation, ...], ) -> Union[Animation, AnimationMerger]: if len(animations) == 1: return animations[0] merger = AnimationMerger() for animation in animations: merger.merge(animation) return merger def feature(self, name: str, enabled: bool) -> None: \"\"\" A method for turning on/off features of the chart. Args: name: The name of the chart feature. enabled: The new state of the chart feature. Example: Turn on `tooltip` of the chart: chart.feature(\"tooltip\", True) \"\"\" self._display( DisplayTemplate.FEATURE.format( chart_id=self._chart_id, **Feature(name, enabled).dump(), ) ) def store(self) -> Snapshot: \"\"\" A method for saving and storing the actual state of the chart. Returns: A snapshot animation object wich stores the actual state of the chart. Example: Save and restore the actual state of the chart: snapshot = chart.store() ... chart.animate(snapshot) \"\"\" snapshot_id = uuid.uuid4().hex[:7] self._display( DisplayTemplate.STORE.format( chart_id=self._chart_id, **Store(snapshot_id).dump() ) ) return Snapshot(snapshot_id) def on( # pylint: disable=invalid-name self, event: str, handler: str ) -> EventHandler: \"\"\" A method for creating and turning on an event handler. Args: event: The type of the event. handler: The JavaScript method of the event. Returns: The turned on event handler object. Example: Turn on an event handler which prints an alert message when someone clicks on the chart: handler = chart.on(\"click\", \"alert(JSON.stringify(event.data));\") \"\"\" event_handler = EventHandler(event, handler) self._display( DisplayTemplate.SET_EVENT.format( chart_id=self._chart_id, **EventOn(event_handler).dump(), ) ) return event_handler def off(self, event_handler: EventHandler) -> None: \"\"\" A method for turning off an event handler. Args: event_handler: A previously created event handler object. Example: Turn off a previously created event handler: chart.off(handler) \"\"\" self._display( DisplayTemplate.CLEAR_EVENT.format( chart_id=self._chart_id, **EventOff(event_handler).dump(), ) ) def log(self, chart_property: ChartProperty) -> None: \"\"\" A method for printing chart properties to the browser console. Args: chart_property: A chart property such as [CONFIG][ipyvizzu.template.ChartProperty] and [STYLE][ipyvizzu.template.ChartProperty]. Example: Log the actual style of the chart to the browser console: chart.log(ChartProperty.STYLE) \"\"\" self._display( DisplayTemplate.LOG.format( chart_id=self._chart_id, **Log(chart_property).dump() ) ) def _repr_html_(self) -> str: assert ( self._display_target == DisplayTarget.MANUAL ), \"chart._repr_html_() can be used with display=DisplayTarget.MANUAL only\" assert not self._showed, \"cannot be used after chart displayed.\" self._showed = True html_id = uuid.uuid4().hex[:7] script = ( self._calls[0] + \"\\n\" + \"\\n\".join(self._calls[1:]).replace( \"element\", f'document.getElementById(\"{html_id}\")' ) ) return f'<div id=\"{html_id}\"><script>{script}</script></div>' def show(self) -> None: \"\"\" A method for displaying the assembled JavaScript code. Raises: AssertionError: If [display][ipyvizzu.Chart.__init__] is not [DisplayTarget.MANUAL][ipyvizzu.template.DisplayTarget]. AssertionError: If chart already has been displayed. \"\"\" assert ( self._display_target == DisplayTarget.MANUAL ), \"chart.show() can be used with display=DisplayTarget.MANUAL only\" assert not self._showed, \"cannot be used after chart displayed\" display_javascript( \"\\n\".join(self._calls), raw=True, ) self._showed = True def _display(self, javascript: str) -> None: if self._display_target != DisplayTarget.MANUAL: display_javascript( javascript, raw=True, ) else: assert not self._showed, \"cannot be used after chart displayed\" self._calls.append(javascript) VIZZU: str = 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' class-attribute A variable for storing the default url of vizzu package. scroll_into_view: bool writable property A property for turning on/off the scroll into view feature. Returns: Type Description bool The value of the property (default False ). __init__(vizzu=VIZZU, width='800px', height='480px', display=DisplayTarget.ACTUAL) Chart constructor. Parameters: Name Type Description Default vizzu Optional [ str ] The url of Vizzu JavaScript package. VIZZU width Optional [ str ] The width of the chart. '800px' height Optional [ str ] The height of the chart. '480px' display Optional [ Union [ DisplayTarget , str ]] The display behaviour of the chart. DisplayTarget.ACTUAL Source code in ipyvizzu/chart.py def __init__( self, vizzu: Optional[str] = VIZZU, width: Optional[str] = \"800px\", height: Optional[str] = \"480px\", display: Optional[Union[DisplayTarget, str]] = DisplayTarget.ACTUAL, ): \"\"\" Chart constructor. Args: vizzu: The url of Vizzu JavaScript package. width: The width of the chart. height: The height of the chart. display: The display behaviour of the chart. \"\"\" self._chart_id = uuid.uuid4().hex[:7] self._display_target = DisplayTarget(display) self._calls: List[str] = [] self._showed = False self._scroll_into_view = False ipyvizzurawjs = pkgutil.get_data(__name__, \"templates/ipyvizzu.js\") ipyvizzujs = ipyvizzurawjs.decode(\"utf-8\") # type: ignore self._display(DisplayTemplate.IPYVIZZUJS.format(ipyvizzujs=ipyvizzujs)) self._display( DisplayTemplate.INIT.format( chart_id=self._chart_id, vizzu=vizzu, div_width=width, div_height=height, ) ) if self._display_target != DisplayTarget.MANUAL: self._register_events() animate(*animations, **options) A method for changing the state of the chart. Parameters: Name Type Description Default *animations Animation List of Animation objects such as Data , Config and Style . () **options Optional [ Union [ str , int , float , dict ]] Dictionary of animation options for example duration=1 . {} Raises: Type Description ValueError If animations is not set. Example Reset the chart styles: chart.animate(Style(None)) Source code in ipyvizzu/chart.py def animate( self, *animations: Animation, **options: Optional[Union[str, int, float, dict]] ) -> None: \"\"\" A method for changing the state of the chart. Args: *animations: List of Animation objects such as [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style]. **options: Dictionary of animation options for example `duration=1`. Raises: ValueError: If `animations` is not set. Example: Reset the chart styles: chart.animate(Style(None)) \"\"\" if not animations: raise ValueError(\"No animation was set.\") animation = self._merge_animations(animations) animate = Animate(animation, options) self._display( DisplayTemplate.ANIMATE.format( display_target=self._display_target.value, chart_id=self._chart_id, scroll=str(self._scroll_into_view).lower(), **animate.dump(), ) ) feature(name, enabled) A method for turning on/off features of the chart. Parameters: Name Type Description Default name str The name of the chart feature. required enabled bool The new state of the chart feature. required Example Turn on tooltip of the chart: chart.feature(\"tooltip\", True) Source code in ipyvizzu/chart.py def feature(self, name: str, enabled: bool) -> None: \"\"\" A method for turning on/off features of the chart. Args: name: The name of the chart feature. enabled: The new state of the chart feature. Example: Turn on `tooltip` of the chart: chart.feature(\"tooltip\", True) \"\"\" self._display( DisplayTemplate.FEATURE.format( chart_id=self._chart_id, **Feature(name, enabled).dump(), ) ) store() A method for saving and storing the actual state of the chart. Returns: Type Description Snapshot A snapshot animation object wich stores the actual state of the chart. Example Save and restore the actual state of the chart: snapshot = chart.store() ... chart.animate(snapshot) Source code in ipyvizzu/chart.py def store(self) -> Snapshot: \"\"\" A method for saving and storing the actual state of the chart. Returns: A snapshot animation object wich stores the actual state of the chart. Example: Save and restore the actual state of the chart: snapshot = chart.store() ... chart.animate(snapshot) \"\"\" snapshot_id = uuid.uuid4().hex[:7] self._display( DisplayTemplate.STORE.format( chart_id=self._chart_id, **Store(snapshot_id).dump() ) ) return Snapshot(snapshot_id) on(event, handler) A method for creating and turning on an event handler. Parameters: Name Type Description Default event str The type of the event. required handler str The JavaScript method of the event. required Returns: Type Description EventHandler The turned on event handler object. Example Turn on an event handler which prints an alert message when someone clicks on the chart: handler = chart.on(\"click\", \"alert(JSON.stringify(event.data));\") Source code in ipyvizzu/chart.py def on( # pylint: disable=invalid-name self, event: str, handler: str ) -> EventHandler: \"\"\" A method for creating and turning on an event handler. Args: event: The type of the event. handler: The JavaScript method of the event. Returns: The turned on event handler object. Example: Turn on an event handler which prints an alert message when someone clicks on the chart: handler = chart.on(\"click\", \"alert(JSON.stringify(event.data));\") \"\"\" event_handler = EventHandler(event, handler) self._display( DisplayTemplate.SET_EVENT.format( chart_id=self._chart_id, **EventOn(event_handler).dump(), ) ) return event_handler off(event_handler) A method for turning off an event handler. Parameters: Name Type Description Default event_handler EventHandler A previously created event handler object. required Example Turn off a previously created event handler: chart.off(handler) Source code in ipyvizzu/chart.py def off(self, event_handler: EventHandler) -> None: \"\"\" A method for turning off an event handler. Args: event_handler: A previously created event handler object. Example: Turn off a previously created event handler: chart.off(handler) \"\"\" self._display( DisplayTemplate.CLEAR_EVENT.format( chart_id=self._chart_id, **EventOff(event_handler).dump(), ) ) log(chart_property) A method for printing chart properties to the browser console. Parameters: Name Type Description Default chart_property ChartProperty A chart property such as CONFIG and STYLE . required Example Log the actual style of the chart to the browser console: chart.log(ChartProperty.STYLE) Source code in ipyvizzu/chart.py def log(self, chart_property: ChartProperty) -> None: \"\"\" A method for printing chart properties to the browser console. Args: chart_property: A chart property such as [CONFIG][ipyvizzu.template.ChartProperty] and [STYLE][ipyvizzu.template.ChartProperty]. Example: Log the actual style of the chart to the browser console: chart.log(ChartProperty.STYLE) \"\"\" self._display( DisplayTemplate.LOG.format( chart_id=self._chart_id, **Log(chart_property).dump() ) ) show() A method for displaying the assembled JavaScript code. Raises: Type Description AssertionError If display is not DisplayTarget.MANUAL . AssertionError If chart already has been displayed. Source code in ipyvizzu/chart.py def show(self) -> None: \"\"\" A method for displaying the assembled JavaScript code. Raises: AssertionError: If [display][ipyvizzu.Chart.__init__] is not [DisplayTarget.MANUAL][ipyvizzu.template.DisplayTarget]. AssertionError: If chart already has been displayed. \"\"\" assert ( self._display_target == DisplayTarget.MANUAL ), \"chart.show() can be used with display=DisplayTarget.MANUAL only\" assert not self._showed, \"cannot be used after chart displayed\" display_javascript( \"\\n\".join(self._calls), raw=True, ) self._showed = True ipyvizzu.DisplayTarget Bases: Enum An enum class for storing chart display options. Source code in ipyvizzu/template.py class DisplayTarget(Enum): \"\"\"An enum class for storing chart display options.\"\"\" BEGIN = \"begin\" \"\"\"Display all animation steps after the constructor's cell.\"\"\" END = \"end\" \"\"\"Display all animation steps after the last running cell.\"\"\" ACTUAL = \"actual\" \"\"\"Display the actual animation step after the currently running cell.\"\"\" MANUAL = \"manual\" \"\"\"Display all animation steps after calling a show method.\"\"\" BEGIN = 'begin' class-attribute Display all animation steps after the constructor's cell. END = 'end' class-attribute Display all animation steps after the last running cell. ACTUAL = 'actual' class-attribute Display the actual animation step after the currently running cell. MANUAL = 'manual' class-attribute Display all animation steps after calling a show method. ipyvizzu.Animation An abstract class for representing animation objects that have dump and build methods. Source code in ipyvizzu/animation.py class Animation: \"\"\" An abstract class for representing animation objects that have `dump` and `build` methods. \"\"\" def dump(self) -> str: \"\"\" A method for converting the built dictionary into string. Returns: An str that has been json dumped with [RawJavaScriptEncoder][ipyvizzu.json.RawJavaScriptEncoder] from a dictionary. \"\"\" return json.dumps(self.build(), cls=RawJavaScriptEncoder) @abc.abstractmethod def build(self) -> dict: \"\"\" An abstract method for returning a dictionary with values that can be converted into json string. Returns: A dictionary that stored in the animation object. \"\"\" dump() A method for converting the built dictionary into string. Returns: Type Description str An str that has been json dumped with RawJavaScriptEncoder from a dictionary. Source code in ipyvizzu/animation.py def dump(self) -> str: \"\"\" A method for converting the built dictionary into string. Returns: An str that has been json dumped with [RawJavaScriptEncoder][ipyvizzu.json.RawJavaScriptEncoder] from a dictionary. \"\"\" return json.dumps(self.build(), cls=RawJavaScriptEncoder) build() abstractmethod An abstract method for returning a dictionary with values that can be converted into json string. Returns: Type Description dict A dictionary that stored in the animation object. Source code in ipyvizzu/animation.py @abc.abstractmethod def build(self) -> dict: \"\"\" An abstract method for returning a dictionary with values that can be converted into json string. Returns: A dictionary that stored in the animation object. \"\"\" ipyvizzu.Animate Bases: Method A class for dumping chart independent parameters to DisplayTemplate.ANIMATE template. Source code in ipyvizzu/method.py class Animate(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.ANIMATE][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__( self, chart_target: Union[Animation, AnimationMerger], chart_anim_opts: Optional[dict] = None, ): \"\"\" Animate constructor. It stores and dumps `chart_target` and `chart_anim_opts` parameters. Args: chart_target: Animation object such as [Data][ipyvizzu.animation.Data] [Config][ipyvizzu.animation.Config] or [Style][ipyvizzu.animation.Style]. chart_anim_opts: Animation options' dictionary. If it is not set, it dumps `undefined`. \"\"\" self._data = { \"chart_target\": chart_target.dump(), \"chart_anim_opts\": PlainAnimation(chart_anim_opts).dump() if chart_anim_opts else \"undefined\", } __init__(chart_target, chart_anim_opts=None) Animate constructor. It stores and dumps chart_target and chart_anim_opts parameters. Parameters: Name Type Description Default chart_target Union [ Animation , AnimationMerger ] Animation object such as Data Config or Style . required chart_anim_opts Optional [ dict ] Animation options' dictionary. If it is not set, it dumps undefined . None Source code in ipyvizzu/method.py def __init__( self, chart_target: Union[Animation, AnimationMerger], chart_anim_opts: Optional[dict] = None, ): \"\"\" Animate constructor. It stores and dumps `chart_target` and `chart_anim_opts` parameters. Args: chart_target: Animation object such as [Data][ipyvizzu.animation.Data] [Config][ipyvizzu.animation.Config] or [Style][ipyvizzu.animation.Style]. chart_anim_opts: Animation options' dictionary. If it is not set, it dumps `undefined`. \"\"\" self._data = { \"chart_target\": chart_target.dump(), \"chart_anim_opts\": PlainAnimation(chart_anim_opts).dump() if chart_anim_opts else \"undefined\", } ipyvizzu.DisplayTemplate A class for storing JavaScript snippet templates. Source code in ipyvizzu/template.py class DisplayTemplate: \"\"\"A class for storing JavaScript snippet templates.\"\"\" # pylint: disable=too-few-public-methods IPYVIZZUJS: str = \"{ipyvizzujs}\" \"\"\"ipyvizzu JavaScript class.\"\"\" INIT: str = ( \"window.ipyvizzu.createChart(element, \" + \"'{chart_id}', '{vizzu}', '{div_width}', '{div_height}');\" ) \"\"\"Call createChart JavaScript method.\"\"\" ANIMATE: str = ( \"window.ipyvizzu.animate(element, \" + \"'{chart_id}', '{display_target}', {scroll}, \" + \"lib => {{ return {chart_target} }}, {chart_anim_opts});\" ) \"\"\"Call animate JavaScript method.\"\"\" FEATURE: str = ( \"window.ipyvizzu.feature(element, '{chart_id}', '{name}', {enabled});\" ) \"\"\"Call feature JavaScript method.\"\"\" STORE: str = \"window.ipyvizzu.store(element, '{chart_id}', '{id}');\" \"\"\"Call store JavaScript method.\"\"\" SET_EVENT: str = ( \"window.ipyvizzu.setEvent(element, \" + \"'{chart_id}', '{id}', '{event}', event => {{ {handler} }});\" ) \"\"\"Call setEvent JavaScript method.\"\"\" CLEAR_EVENT: str = ( \"window.ipyvizzu.clearEvent(element, '{chart_id}', '{id}', '{event}');\" ) \"\"\"Call clearEvent JavaScript method.\"\"\" LOG: str = \"window.ipyvizzu.log(element, '{chart_id}', '{chart_property}');\" \"\"\"Call log JavaScript method.\"\"\" CLEAR_INHIBITSCROLL: str = ( \"if (window.IpyVizzu) { window.IpyVizzu.clearInhibitScroll(element); }\" ) \"\"\"Call clearInhibitScroll JavaScript method if ipyvizzu JavaScript class exists.\"\"\" IPYVIZZUJS: str = '{ipyvizzujs}' class-attribute ipyvizzu JavaScript class. INIT: str = 'window.ipyvizzu.createChart(element, ' + \"'{chart_id}', '{vizzu}', '{div_width}', '{div_height}');\" class-attribute Call createChart JavaScript method. ANIMATE: str = 'window.ipyvizzu.animate(element, ' + \"'{chart_id}', '{display_target}', {scroll}, \" + 'lib => {{ return {chart_target} }}, {chart_anim_opts});' class-attribute Call animate JavaScript method. FEATURE: str = \"window.ipyvizzu.feature(element, '{chart_id}', '{name}', {enabled});\" class-attribute Call feature JavaScript method. STORE: str = \"window.ipyvizzu.store(element, '{chart_id}', '{id}');\" class-attribute Call store JavaScript method. SET_EVENT: str = 'window.ipyvizzu.setEvent(element, ' + \"'{chart_id}', '{id}', '{event}', event => {{ {handler} }});\" class-attribute Call setEvent JavaScript method. CLEAR_EVENT: str = \"window.ipyvizzu.clearEvent(element, '{chart_id}', '{id}', '{event}');\" class-attribute Call clearEvent JavaScript method. LOG: str = \"window.ipyvizzu.log(element, '{chart_id}', '{chart_property}');\" class-attribute Call log JavaScript method. CLEAR_INHIBITSCROLL: str = 'if (window.IpyVizzu) { window.IpyVizzu.clearInhibitScroll(element); }' class-attribute Call clearInhibitScroll JavaScript method if ipyvizzu JavaScript class exists. ipyvizzu.RawJavaScriptEncoder Bases: json . JSONEncoder A class for representing a custom json encoder, it can encode objects that contain RawJavaScript values. Source code in ipyvizzu/json.py class RawJavaScriptEncoder(json.JSONEncoder): \"\"\" A class for representing a custom json encoder, it can encode objects that contain [RawJavaScript][ipyvizzu.json.RawJavaScript] values. \"\"\" def __init__(self, *args, **kwargs): \"\"\" RawJavaScriptEncoder constructor. It extends [JSONEncoder][json.JSONEncoder] with an instance variable (`_raw_replacements`). The `_raw_replacements` dictionary stores the `uuids` and JavaScript codes of the [RawJavaScript][ipyvizzu.json.RawJavaScript] objects. \"\"\" json.JSONEncoder.__init__(self, *args, **kwargs) self._raw_replacements = {} def default(self, o): \"\"\" Overrides [JSONEncoder.default][json.JSONEncoder.default] method. It replaces [RawJavaScript][ipyvizzu.json.RawJavaScript] object with `uuid` and it stores raw JavaScript code with `uuid` key in the `_raw_replacements` dictionary. \"\"\" if isinstance(o, RawJavaScript): key = uuid.uuid4().hex self._raw_replacements[key] = o.raw return key return json.JSONEncoder.default(self, o) def encode(self, o): \"\"\" Overrides [JSONEncoder.encode][json.JSONEncoder.encode] method. It replaces `uuids` with raw JavaScript code without apostrophes. \"\"\" result = json.JSONEncoder.encode(self, o) for key, val in self._raw_replacements.items(): result = result.replace(f'\"{key}\"', val) return result __init__(*args, **kwargs) RawJavaScriptEncoder constructor. It extends JSONEncoder with an instance variable ( _raw_replacements ). The _raw_replacements dictionary stores the uuids and JavaScript codes of the RawJavaScript objects. Source code in ipyvizzu/json.py def __init__(self, *args, **kwargs): \"\"\" RawJavaScriptEncoder constructor. It extends [JSONEncoder][json.JSONEncoder] with an instance variable (`_raw_replacements`). The `_raw_replacements` dictionary stores the `uuids` and JavaScript codes of the [RawJavaScript][ipyvizzu.json.RawJavaScript] objects. \"\"\" json.JSONEncoder.__init__(self, *args, **kwargs) self._raw_replacements = {} default(o) Overrides JSONEncoder.default method. It replaces RawJavaScript object with uuid and it stores raw JavaScript code with uuid key in the _raw_replacements dictionary. Source code in ipyvizzu/json.py def default(self, o): \"\"\" Overrides [JSONEncoder.default][json.JSONEncoder.default] method. It replaces [RawJavaScript][ipyvizzu.json.RawJavaScript] object with `uuid` and it stores raw JavaScript code with `uuid` key in the `_raw_replacements` dictionary. \"\"\" if isinstance(o, RawJavaScript): key = uuid.uuid4().hex self._raw_replacements[key] = o.raw return key return json.JSONEncoder.default(self, o) encode(o) Overrides JSONEncoder.encode method. It replaces uuids with raw JavaScript code without apostrophes. Source code in ipyvizzu/json.py def encode(self, o): \"\"\" Overrides [JSONEncoder.encode][json.JSONEncoder.encode] method. It replaces `uuids` with raw JavaScript code without apostrophes. \"\"\" result = json.JSONEncoder.encode(self, o) for key, val in self._raw_replacements.items(): result = result.replace(f'\"{key}\"', val) return result ipyvizzu.PlainAnimation Bases: dict , Animation A class for representing plain animation. It can build any dictionary. Source code in ipyvizzu/animation.py class PlainAnimation(dict, Animation): \"\"\" A class for representing plain animation. It can build any dictionary. \"\"\" def build(self) -> dict: \"\"\" A method for returning the plain animation dictionary. Returns: A dictionary that stored in the plain animation object. \"\"\" return self build() A method for returning the plain animation dictionary. Returns: Type Description dict A dictionary that stored in the plain animation object. Source code in ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for returning the plain animation dictionary. Returns: A dictionary that stored in the plain animation object. \"\"\" return self ipyvizzu.InferType Bases: Enum An enum class for storing data infer types. Source code in ipyvizzu/animation.py class InferType(Enum): \"\"\"An enum class for storing data infer types.\"\"\" DIMENSION = \"dimension\" \"\"\"An enum key-value for storing dimension infer type.\"\"\" MEASURE = \"measure\" \"\"\"An enum key-value for storing measure infer type.\"\"\" DIMENSION = 'dimension' class-attribute An enum key-value for storing dimension infer type. MEASURE = 'measure' class-attribute An enum key-value for storing measure infer type. ipyvizzu.Feature Bases: Method A class for dumping chart independent parameters to DisplayTemplate.FEATURE template. Source code in ipyvizzu/method.py class Feature(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.FEATURE][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, name: str, enabled: bool): \"\"\" Feature constructor. It stores and dumps `name` and `enabled` parameters. Args: name: The name of a chart feature. enabled: The new state of a chart feature. \"\"\" self._data = {\"name\": name, \"enabled\": json.dumps(enabled)} __init__(name, enabled) Feature constructor. It stores and dumps name and enabled parameters. Parameters: Name Type Description Default name str The name of a chart feature. required enabled bool The new state of a chart feature. required Source code in ipyvizzu/method.py def __init__(self, name: str, enabled: bool): \"\"\" Feature constructor. It stores and dumps `name` and `enabled` parameters. Args: name: The name of a chart feature. enabled: The new state of a chart feature. \"\"\" self._data = {\"name\": name, \"enabled\": json.dumps(enabled)} ipyvizzu.Data Bases: dict , Animation A class for representing data animation. It can build data option of the chart. Source code in ipyvizzu/animation.py class Data(dict, Animation): \"\"\" A class for representing data animation. It can build data option of the chart. \"\"\" @classmethod def filter(cls, filter_expr: Optional[str] = None): # -> Data: \"\"\" A class method for creating a [Data][ipyvizzu.animation.Data] class instance with a data filter. Args: filter_expr: The JavaScript data filter expression. Returns: (Data): A data animation instance that contains a data filter. Example: Create a [Data][ipyvizzu.animation.Data] class with a data filter: filter = Data.filter(\"record['Genres'] == 'Pop'\") \"\"\" data = cls() data.set_filter(filter_expr) return data def set_filter(self, filter_expr: Optional[str] = None) -> None: \"\"\" A method for adding a filter to an existing [Data][ipyvizzu.animation.Data] class instance. Args: filter_expr: The JavaScript data filter expression. Example: Add a data filter to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.set_filter(\"record['Genres'] == 'Pop'\") \"\"\" filter_expr_raw_js = ( RawJavaScript(f\"record => {{ return ({' '.join(filter_expr.split())}) }}\") if filter_expr is not None else filter_expr ) self.update({\"filter\": filter_expr_raw_js}) @classmethod def from_json(cls, filename: Union[str, bytes, PathLike]): # -> Data: \"\"\" A method for returning a [Data][ipyvizzu.animation.Data] class instance which has been created from a json file. Args: filename: The path of the data source json file. Returns: (Data): A data animation instance that has been created from a json file. \"\"\" with open(filename, \"r\", encoding=\"utf8\") as file_desc: return cls(json.load(file_desc)) def add_record(self, record: list) -> None: \"\"\" A method for adding a record to an existing [Data][ipyvizzu.animation.Data] class instance. Args: record: A list that contains data values. Example: Adding a record to a [Data][ipyvizzu.animation.Data] class instance: data = Data() record = [\"Pop\", \"Hard\", 114] data.add_record(record) \"\"\" self._add_value(\"records\", record) def add_records(self, records: List[list]) -> None: \"\"\" A method for adding records to an existing [Data][ipyvizzu.animation.Data] class instance. Args: records: A list that contains data records. Example: Adding records to a [Data][ipyvizzu.animation.Data] class instance: data = Data() records = [ [\"Pop\", \"Hard\", 114], [\"Rock\", \"Hard\", 96], [\"Pop\", \"Experimental\", 127], [\"Rock\", \"Experimental\", 83], ] data.add_records(records) \"\"\" list(map(self.add_record, records)) def add_series(self, name: str, values: Optional[list] = None, **kwargs) -> None: \"\"\" A method for adding a series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the series. values: The data values of the series. **kwargs (Optional): Arbitrary keyword arguments. For example infer type can be set with the `type` keywod argument. Example: Adding a series without values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series(\"Genres\") Adding a series without values and with infer type to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series(\"Kinds\", type=\"dimension\") Adding a series with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series( \"Popularity\", [114, 96, 127, 83] ) \"\"\" self._add_named_value(\"series\", name, values, **kwargs) def add_dimension(self, name: str, values: Optional[list] = None, **kwargs) -> None: \"\"\" A method for adding a dimension to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the dimension. values: The data values of the dimension. **kwargs (Optional): Arbitrary keyword arguments. Example: Adding a dimension with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_dimension(\"Genres\", [\"Pop\", \"Rock\"]) \"\"\" self._add_named_value(\"dimensions\", name, values, **kwargs) def add_measure(self, name: str, values: Optional[list] = None, **kwargs) -> None: \"\"\" A method for adding a measure to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the measure. values: The data values of the measure. **kwargs (Optional): Arbitrary keyword arguments. Example: Adding a measure with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_measure( \"Popularity\", [ [114, 96], [127, 83], ], ) \"\"\" self._add_named_value(\"measures\", name, values, **kwargs) def add_data_frame( self, data_frame: Union[pd.DataFrame, pd.Series], default_measure_value: Optional[Any] = 0, default_dimension_value: Optional[Any] = \"\", ) -> None: \"\"\" A method for adding data frame to an existing [Data][ipyvizzu.animation.Data] class instance. Args: data_frame: The pandas data frame object. default_measure_value: The default measure value to fill the empty values. default_dimension_value: The default dimension value to fill the empty values. Raises: TypeError: If `data_frame` is not instance of [pd.DataFrame][pandas.DataFrame] or [pd.Series][pandas.Series]. Example: Adding a data frame to a [Data][ipyvizzu.animation.Data] class instance: data_frame = pd.DataFrame( { \"Genres\": [\"Pop\", \"Rock\", \"Pop\", \"Rock\"], \"Kinds\": [\"Hard\", \"Hard\", \"Experimental\", \"Experimental\"], \"Popularity\": [114, 96, 127, 83], } ) data = Data() data.add_data_frame(data_frame) \"\"\" if not isinstance(data_frame, type(None)): if isinstance(data_frame, pd.Series): data_frame = pd.DataFrame(data_frame) if not isinstance(data_frame, pd.DataFrame): raise TypeError( \"data_frame must be instance of pandas.DataFrame or pandas.Series\" ) for name in data_frame.columns: values = [] if is_numeric_dtype(data_frame[name].dtype): infer_type = InferType.MEASURE values = ( data_frame[name] .fillna(default_measure_value) .astype(float) .values.tolist() ) else: infer_type = InferType.DIMENSION values = ( data_frame[name] .fillna(default_dimension_value) .astype(str) .values.tolist() ) self.add_series( name, values, type=infer_type.value, ) def add_data_frame_index( self, data_frame: Union[pd.DataFrame, pd.Series], name: Optional[str], ) -> None: \"\"\" A method for adding data frame's index to an existing [Data][ipyvizzu.animation.Data] class instance. Args: data_frame: The pandas data frame object. name: The name of the index series. Raises: TypeError: If `data_frame` is not instance of [pd.DataFrame][pandas.DataFrame] or [pd.Series][pandas.Series]. Example: Adding a data frame's index to a [Data][ipyvizzu.animation.Data] class instance: data_frame = pd.DataFrame( {\"Popularity\": [114, 96]}, index=[\"x\", \"y\"] ) data = Data() data.add_data_frame_index(data_frame, \"DataFrameIndex\") data.add_data_frame(data_frame) \"\"\" if data_frame is not None: if isinstance(data_frame, pd.Series): data_frame = pd.DataFrame(data_frame) if not isinstance(data_frame, pd.DataFrame): raise TypeError( \"data_frame must be instance of pandas.DataFrame or pandas.Series\" ) self.add_series( str(name), [str(i) for i in data_frame.index], type=InferType.DIMENSION.value, ) def _add_named_value( self, dest: str, name: str, values: Optional[list] = None, **kwargs ) -> None: value = {\"name\": name, **kwargs} if values is not None: value[\"values\"] = values # type: ignore self._add_value(dest, value) def _add_value(self, dest: str, value: Union[dict, list]) -> None: self.setdefault(dest, []).append(value) def build(self) -> dict: \"\"\" A method for validating and returning the data animation dictionary. Returns: A dictionary that stored in the data animation object. It contains a `data` key whose value is the stored animation. \"\"\" jsonschema.validate(self, DATA_SCHEMA) return {\"data\": self} filter(filter_expr=None) classmethod A class method for creating a Data class instance with a data filter. Parameters: Name Type Description Default filter_expr Optional [ str ] The JavaScript data filter expression. None Returns: Type Description Data A data animation instance that contains a data filter. Example Create a Data class with a data filter: filter = Data.filter(\"record['Genres'] == 'Pop'\") Source code in ipyvizzu/animation.py @classmethod def filter(cls, filter_expr: Optional[str] = None): # -> Data: \"\"\" A class method for creating a [Data][ipyvizzu.animation.Data] class instance with a data filter. Args: filter_expr: The JavaScript data filter expression. Returns: (Data): A data animation instance that contains a data filter. Example: Create a [Data][ipyvizzu.animation.Data] class with a data filter: filter = Data.filter(\"record['Genres'] == 'Pop'\") \"\"\" data = cls() data.set_filter(filter_expr) return data set_filter(filter_expr=None) A method for adding a filter to an existing Data class instance. Parameters: Name Type Description Default filter_expr Optional [ str ] The JavaScript data filter expression. None Example Add a data filter to a Data class instance: data = Data() data.set_filter(\"record['Genres'] == 'Pop'\") Source code in ipyvizzu/animation.py def set_filter(self, filter_expr: Optional[str] = None) -> None: \"\"\" A method for adding a filter to an existing [Data][ipyvizzu.animation.Data] class instance. Args: filter_expr: The JavaScript data filter expression. Example: Add a data filter to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.set_filter(\"record['Genres'] == 'Pop'\") \"\"\" filter_expr_raw_js = ( RawJavaScript(f\"record => {{ return ({' '.join(filter_expr.split())}) }}\") if filter_expr is not None else filter_expr ) self.update({\"filter\": filter_expr_raw_js}) from_json(filename) classmethod A method for returning a Data class instance which has been created from a json file. Parameters: Name Type Description Default filename Union [ str , bytes , PathLike ] The path of the data source json file. required Returns: Type Description Data A data animation instance that has been created from a json file. Source code in ipyvizzu/animation.py @classmethod def from_json(cls, filename: Union[str, bytes, PathLike]): # -> Data: \"\"\" A method for returning a [Data][ipyvizzu.animation.Data] class instance which has been created from a json file. Args: filename: The path of the data source json file. Returns: (Data): A data animation instance that has been created from a json file. \"\"\" with open(filename, \"r\", encoding=\"utf8\") as file_desc: return cls(json.load(file_desc)) add_record(record) A method for adding a record to an existing Data class instance. Parameters: Name Type Description Default record list A list that contains data values. required Example Adding a record to a Data class instance: data = Data() record = [\"Pop\", \"Hard\", 114] data.add_record(record) Source code in ipyvizzu/animation.py def add_record(self, record: list) -> None: \"\"\" A method for adding a record to an existing [Data][ipyvizzu.animation.Data] class instance. Args: record: A list that contains data values. Example: Adding a record to a [Data][ipyvizzu.animation.Data] class instance: data = Data() record = [\"Pop\", \"Hard\", 114] data.add_record(record) \"\"\" self._add_value(\"records\", record) add_records(records) A method for adding records to an existing Data class instance. Parameters: Name Type Description Default records List [ list ] A list that contains data records. required Example Adding records to a Data class instance: data = Data() records = [ [\"Pop\", \"Hard\", 114], [\"Rock\", \"Hard\", 96], [\"Pop\", \"Experimental\", 127], [\"Rock\", \"Experimental\", 83], ] data.add_records(records) Source code in ipyvizzu/animation.py def add_records(self, records: List[list]) -> None: \"\"\" A method for adding records to an existing [Data][ipyvizzu.animation.Data] class instance. Args: records: A list that contains data records. Example: Adding records to a [Data][ipyvizzu.animation.Data] class instance: data = Data() records = [ [\"Pop\", \"Hard\", 114], [\"Rock\", \"Hard\", 96], [\"Pop\", \"Experimental\", 127], [\"Rock\", \"Experimental\", 83], ] data.add_records(records) \"\"\" list(map(self.add_record, records)) add_series(name, values=None, **kwargs) A method for adding a series to an existing Data class instance. Parameters: Name Type Description Default name str The name of the series. required values Optional [ list ] The data values of the series. None **kwargs Optional Arbitrary keyword arguments. For example infer type can be set with the type keywod argument. {} Example Adding a series without values to a Data class instance: data = Data() data.add_series(\"Genres\") Adding a series without values and with infer type to a Data class instance: data = Data() data.add_series(\"Kinds\", type=\"dimension\") Adding a series with values to a Data class instance: data = Data() data.add_series( \"Popularity\", [114, 96, 127, 83] ) Source code in ipyvizzu/animation.py def add_series(self, name: str, values: Optional[list] = None, **kwargs) -> None: \"\"\" A method for adding a series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the series. values: The data values of the series. **kwargs (Optional): Arbitrary keyword arguments. For example infer type can be set with the `type` keywod argument. Example: Adding a series without values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series(\"Genres\") Adding a series without values and with infer type to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series(\"Kinds\", type=\"dimension\") Adding a series with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series( \"Popularity\", [114, 96, 127, 83] ) \"\"\" self._add_named_value(\"series\", name, values, **kwargs) add_dimension(name, values=None, **kwargs) A method for adding a dimension to an existing Data class instance. Parameters: Name Type Description Default name str The name of the dimension. required values Optional [ list ] The data values of the dimension. None **kwargs Optional Arbitrary keyword arguments. {} Example Adding a dimension with values to a Data class instance: data = Data() data.add_dimension(\"Genres\", [\"Pop\", \"Rock\"]) Source code in ipyvizzu/animation.py def add_dimension(self, name: str, values: Optional[list] = None, **kwargs) -> None: \"\"\" A method for adding a dimension to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the dimension. values: The data values of the dimension. **kwargs (Optional): Arbitrary keyword arguments. Example: Adding a dimension with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_dimension(\"Genres\", [\"Pop\", \"Rock\"]) \"\"\" self._add_named_value(\"dimensions\", name, values, **kwargs) add_measure(name, values=None, **kwargs) A method for adding a measure to an existing Data class instance. Parameters: Name Type Description Default name str The name of the measure. required values Optional [ list ] The data values of the measure. None **kwargs Optional Arbitrary keyword arguments. {} Example Adding a measure with values to a Data class instance: data = Data() data.add_measure( \"Popularity\", [ [114, 96], [127, 83], ], ) Source code in ipyvizzu/animation.py def add_measure(self, name: str, values: Optional[list] = None, **kwargs) -> None: \"\"\" A method for adding a measure to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the measure. values: The data values of the measure. **kwargs (Optional): Arbitrary keyword arguments. Example: Adding a measure with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_measure( \"Popularity\", [ [114, 96], [127, 83], ], ) \"\"\" self._add_named_value(\"measures\", name, values, **kwargs) add_data_frame(data_frame, default_measure_value=0, default_dimension_value='') A method for adding data frame to an existing Data class instance. Parameters: Name Type Description Default data_frame Union [ pd . DataFrame , pd . Series ] The pandas data frame object. required default_measure_value Optional [ Any ] The default measure value to fill the empty values. 0 default_dimension_value Optional [ Any ] The default dimension value to fill the empty values. '' Raises: Type Description TypeError If data_frame is not instance of pd.DataFrame or pd.Series . Example Adding a data frame to a Data class instance: data_frame = pd.DataFrame( { \"Genres\": [\"Pop\", \"Rock\", \"Pop\", \"Rock\"], \"Kinds\": [\"Hard\", \"Hard\", \"Experimental\", \"Experimental\"], \"Popularity\": [114, 96, 127, 83], } ) data = Data() data.add_data_frame(data_frame) Source code in ipyvizzu/animation.py def add_data_frame( self, data_frame: Union[pd.DataFrame, pd.Series], default_measure_value: Optional[Any] = 0, default_dimension_value: Optional[Any] = \"\", ) -> None: \"\"\" A method for adding data frame to an existing [Data][ipyvizzu.animation.Data] class instance. Args: data_frame: The pandas data frame object. default_measure_value: The default measure value to fill the empty values. default_dimension_value: The default dimension value to fill the empty values. Raises: TypeError: If `data_frame` is not instance of [pd.DataFrame][pandas.DataFrame] or [pd.Series][pandas.Series]. Example: Adding a data frame to a [Data][ipyvizzu.animation.Data] class instance: data_frame = pd.DataFrame( { \"Genres\": [\"Pop\", \"Rock\", \"Pop\", \"Rock\"], \"Kinds\": [\"Hard\", \"Hard\", \"Experimental\", \"Experimental\"], \"Popularity\": [114, 96, 127, 83], } ) data = Data() data.add_data_frame(data_frame) \"\"\" if not isinstance(data_frame, type(None)): if isinstance(data_frame, pd.Series): data_frame = pd.DataFrame(data_frame) if not isinstance(data_frame, pd.DataFrame): raise TypeError( \"data_frame must be instance of pandas.DataFrame or pandas.Series\" ) for name in data_frame.columns: values = [] if is_numeric_dtype(data_frame[name].dtype): infer_type = InferType.MEASURE values = ( data_frame[name] .fillna(default_measure_value) .astype(float) .values.tolist() ) else: infer_type = InferType.DIMENSION values = ( data_frame[name] .fillna(default_dimension_value) .astype(str) .values.tolist() ) self.add_series( name, values, type=infer_type.value, ) add_data_frame_index(data_frame, name) A method for adding data frame's index to an existing Data class instance. Parameters: Name Type Description Default data_frame Union [ pd . DataFrame , pd . Series ] The pandas data frame object. required name Optional [ str ] The name of the index series. required Raises: Type Description TypeError If data_frame is not instance of pd.DataFrame or pd.Series . Example Adding a data frame's index to a Data class instance: data_frame = pd.DataFrame( {\"Popularity\": [114, 96]}, index=[\"x\", \"y\"] ) data = Data() data.add_data_frame_index(data_frame, \"DataFrameIndex\") data.add_data_frame(data_frame) Source code in ipyvizzu/animation.py def add_data_frame_index( self, data_frame: Union[pd.DataFrame, pd.Series], name: Optional[str], ) -> None: \"\"\" A method for adding data frame's index to an existing [Data][ipyvizzu.animation.Data] class instance. Args: data_frame: The pandas data frame object. name: The name of the index series. Raises: TypeError: If `data_frame` is not instance of [pd.DataFrame][pandas.DataFrame] or [pd.Series][pandas.Series]. Example: Adding a data frame's index to a [Data][ipyvizzu.animation.Data] class instance: data_frame = pd.DataFrame( {\"Popularity\": [114, 96]}, index=[\"x\", \"y\"] ) data = Data() data.add_data_frame_index(data_frame, \"DataFrameIndex\") data.add_data_frame(data_frame) \"\"\" if data_frame is not None: if isinstance(data_frame, pd.Series): data_frame = pd.DataFrame(data_frame) if not isinstance(data_frame, pd.DataFrame): raise TypeError( \"data_frame must be instance of pandas.DataFrame or pandas.Series\" ) self.add_series( str(name), [str(i) for i in data_frame.index], type=InferType.DIMENSION.value, ) build() A method for validating and returning the data animation dictionary. Returns: Type Description dict A dictionary that stored in the data animation object. It contains a data key whose value is the stored animation. Source code in ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for validating and returning the data animation dictionary. Returns: A dictionary that stored in the data animation object. It contains a `data` key whose value is the stored animation. \"\"\" jsonschema.validate(self, DATA_SCHEMA) return {\"data\": self} ipyvizzu.Store Bases: Method A class for dumping chart independent parameters to DisplayTemplate.STORE template. Source code in ipyvizzu/method.py class Store(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.STORE][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, snapshot_id: str): \"\"\" Store constructor. It stores and dumps `snapshot_id` parameter. Args: snapshot_id: The id of snapshot object. \"\"\" self._data = {\"id\": snapshot_id} __init__(snapshot_id) Store constructor. It stores and dumps snapshot_id parameter. Parameters: Name Type Description Default snapshot_id str The id of snapshot object. required Source code in ipyvizzu/method.py def __init__(self, snapshot_id: str): \"\"\" Store constructor. It stores and dumps `snapshot_id` parameter. Args: snapshot_id: The id of snapshot object. \"\"\" self._data = {\"id\": snapshot_id} ipyvizzu.EventOn Bases: Method A class for dumping chart independent parameters to DisplayTemplate.SET_EVENT template. Source code in ipyvizzu/method.py class EventOn(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.SET_EVENT][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, event_handler: EventHandler): \"\"\" EventOn constructor. It stores and dumps the `id`, the `event` and the `handler` of the event handler object. Args: event_handler: An event handler object. \"\"\" self._data = { \"id\": event_handler.id, \"event\": event_handler.event, \"handler\": event_handler.handler, } __init__(event_handler) EventOn constructor. It stores and dumps the id , the event and the handler of the event handler object. Parameters: Name Type Description Default event_handler EventHandler An event handler object. required Source code in ipyvizzu/method.py def __init__(self, event_handler: EventHandler): \"\"\" EventOn constructor. It stores and dumps the `id`, the `event` and the `handler` of the event handler object. Args: event_handler: An event handler object. \"\"\" self._data = { \"id\": event_handler.id, \"event\": event_handler.event, \"handler\": event_handler.handler, } ipyvizzu.EventOff Bases: Method A class for dumping chart independent parameters to DisplayTemplate.CLEAR_EVENT template. Source code in ipyvizzu/method.py class EventOff(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.CLEAR_EVENT][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, event_handler: EventHandler): \"\"\" EventOff constructor. It stores and dumps the `id` and the `event` of the event handler object. Args: event_handler: An event handler object. \"\"\" self._data = {\"id\": event_handler.id, \"event\": event_handler.event} __init__(event_handler) EventOff constructor. It stores and dumps the id and the event of the event handler object. Parameters: Name Type Description Default event_handler EventHandler An event handler object. required Source code in ipyvizzu/method.py def __init__(self, event_handler: EventHandler): \"\"\" EventOff constructor. It stores and dumps the `id` and the `event` of the event handler object. Args: event_handler: An event handler object. \"\"\" self._data = {\"id\": event_handler.id, \"event\": event_handler.event} ipyvizzu.Log Bases: Method A class for dumping chart independent parameters to DisplayTemplate.LOG template. Source code in ipyvizzu/method.py class Log(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.LOG][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, chart_property: ChartProperty): \"\"\" Log constructor. It stores and dumps the value of the chart property object. Args: chart_property: A chart property such as [CONFIG][ipyvizzu.template.ChartProperty] and [STYLE][ipyvizzu.template.ChartProperty]. \"\"\" self._data = {\"chart_property\": chart_property.value} __init__(chart_property) Log constructor. It stores and dumps the value of the chart property object. Parameters: Name Type Description Default chart_property ChartProperty A chart property such as CONFIG and STYLE . required Source code in ipyvizzu/method.py def __init__(self, chart_property: ChartProperty): \"\"\" Log constructor. It stores and dumps the value of the chart property object. Args: chart_property: A chart property such as [CONFIG][ipyvizzu.template.ChartProperty] and [STYLE][ipyvizzu.template.ChartProperty]. \"\"\" self._data = {\"chart_property\": chart_property.value} ipyvizzu.Config Bases: Animation A class for representing config animation. It can build config option of the chart. Source code in ipyvizzu/animation.py class Config(Animation, metaclass=ConfigAttr): \"\"\" A class for representing config animation. It can build config option of the chart. \"\"\" def __init__(self, data: Optional[dict]): \"\"\" Config constructor. Args: data: A config animation dictionary. \"\"\" self._data = data def build(self) -> dict: \"\"\" A method for returning the config animation dictionary. Returns: A dictionary that stored in the config animation object. It contains a `config` key whose value is the stored animation. \"\"\" return {\"config\": self._data} __init__(data) Config constructor. Parameters: Name Type Description Default data Optional [ dict ] A config animation dictionary. required Source code in ipyvizzu/animation.py def __init__(self, data: Optional[dict]): \"\"\" Config constructor. Args: data: A config animation dictionary. \"\"\" self._data = data build() A method for returning the config animation dictionary. Returns: Type Description dict A dictionary that stored in the config animation object. It contains a config key whose value is the stored animation. Source code in ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for returning the config animation dictionary. Returns: A dictionary that stored in the config animation object. It contains a `config` key whose value is the stored animation. \"\"\" return {\"config\": self._data} ipyvizzu.Style Bases: Animation A class for representing style animation. It can build style option of the chart. Source code in ipyvizzu/animation.py class Style(Animation): \"\"\" A class for representing style animation. It can build style option of the chart. \"\"\" def __init__(self, data: Optional[dict]): \"\"\" Style constructor. Args: data: A style animation dictionary. \"\"\" self._data = data def build(self) -> dict: \"\"\" A method for returning the style animation dictionary. Returns: A dictionary that stored in the style animation object. It contains a `style` key whose value is the stored animation. \"\"\" return {\"style\": self._data} __init__(data) Style constructor. Parameters: Name Type Description Default data Optional [ dict ] A style animation dictionary. required Source code in ipyvizzu/animation.py def __init__(self, data: Optional[dict]): \"\"\" Style constructor. Args: data: A style animation dictionary. \"\"\" self._data = data build() A method for returning the style animation dictionary. Returns: Type Description dict A dictionary that stored in the style animation object. It contains a style key whose value is the stored animation. Source code in ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for returning the style animation dictionary. Returns: A dictionary that stored in the style animation object. It contains a `style` key whose value is the stored animation. \"\"\" return {\"style\": self._data} ipyvizzu.Snapshot Bases: Animation A class for representing snapshot animation. It can build the snapshot id of the chart. Source code in ipyvizzu/animation.py class Snapshot(Animation): \"\"\" A class for representing snapshot animation. It can build the snapshot id of the chart. \"\"\" def __init__(self, name: str): \"\"\" Snapshot constructor. Args: name: A snapshot id. \"\"\" self._name = name def dump(self) -> str: \"\"\" A method for overwriting the [Animation.dump][ipyvizzu.animation.Animation.dump] method. It dumps the stored snapshot id as a string. Returns: An str that contains the stored snapshot id. \"\"\" return f\"'{self._name}'\" def build(self): \"\"\" A method for preventing to merge [Snapshot][ipyvizzu.animation.Snapshot] with other animations. Raises: NotImplementedError: If the [build][ipyvizzu.animation.Snapshot.build] method has been called, because [Snapshot][ipyvizzu.animation.Snapshot] cannot be merged with other animations. \"\"\" raise NotImplementedError(\"Snapshot cannot be merged with other animations\") __init__(name) Snapshot constructor. Parameters: Name Type Description Default name str A snapshot id. required Source code in ipyvizzu/animation.py def __init__(self, name: str): \"\"\" Snapshot constructor. Args: name: A snapshot id. \"\"\" self._name = name dump() A method for overwriting the Animation.dump method. It dumps the stored snapshot id as a string. Returns: Type Description str An str that contains the stored snapshot id. Source code in ipyvizzu/animation.py def dump(self) -> str: \"\"\" A method for overwriting the [Animation.dump][ipyvizzu.animation.Animation.dump] method. It dumps the stored snapshot id as a string. Returns: An str that contains the stored snapshot id. \"\"\" return f\"'{self._name}'\" build() A method for preventing to merge Snapshot with other animations. Raises: Type Description NotImplementedError If the build method has been called, because Snapshot cannot be merged with other animations. Source code in ipyvizzu/animation.py def build(self): \"\"\" A method for preventing to merge [Snapshot][ipyvizzu.animation.Snapshot] with other animations. Raises: NotImplementedError: If the [build][ipyvizzu.animation.Snapshot.build] method has been called, because [Snapshot][ipyvizzu.animation.Snapshot] cannot be merged with other animations. \"\"\" raise NotImplementedError(\"Snapshot cannot be merged with other animations\") ipyvizzu.AnimationMerger Bases: dict , Animation A class for merging different types of animations. Source code in ipyvizzu/animation.py class AnimationMerger(dict, Animation): \"\"\"A class for merging different types of animations.\"\"\" def merge(self, animation: Animation) -> None: \"\"\" A method for merging an animation with the previously merged animations. Args: animation: An animation to be merged with with previously merged animations. Raises: ValueError: If the type of an animation is already merged. \"\"\" data = self._validate(animation) self.update(data) def _validate(self, animation: Animation) -> dict: data = animation.build() common_keys = set(data).intersection(self) if common_keys: raise ValueError(f\"Animation is already merged: {common_keys}\") return data def build(self) -> dict: \"\"\" A method for returning a merged dictionary from different types of animations. Returns: A merged dictionary from [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style] animations. \"\"\" return self merge(animation) A method for merging an animation with the previously merged animations. Parameters: Name Type Description Default animation Animation An animation to be merged with with previously merged animations. required Raises: Type Description ValueError If the type of an animation is already merged. Source code in ipyvizzu/animation.py def merge(self, animation: Animation) -> None: \"\"\" A method for merging an animation with the previously merged animations. Args: animation: An animation to be merged with with previously merged animations. Raises: ValueError: If the type of an animation is already merged. \"\"\" data = self._validate(animation) self.update(data) build() A method for returning a merged dictionary from different types of animations. Returns: Type Description dict A merged dictionary from Data , Config and Style animations. Source code in ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for returning a merged dictionary from different types of animations. Returns: A merged dictionary from [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style] animations. \"\"\" return self ipyvizzu.animation A module for working with chart animations. Animation An abstract class for representing animation objects that have dump and build methods. Source code in ipyvizzu/animation.py class Animation: \"\"\" An abstract class for representing animation objects that have `dump` and `build` methods. \"\"\" def dump(self) -> str: \"\"\" A method for converting the built dictionary into string. Returns: An str that has been json dumped with [RawJavaScriptEncoder][ipyvizzu.json.RawJavaScriptEncoder] from a dictionary. \"\"\" return json.dumps(self.build(), cls=RawJavaScriptEncoder) @abc.abstractmethod def build(self) -> dict: \"\"\" An abstract method for returning a dictionary with values that can be converted into json string. Returns: A dictionary that stored in the animation object. \"\"\" dump() A method for converting the built dictionary into string. Returns: Type Description str An str that has been json dumped with RawJavaScriptEncoder from a dictionary. Source code in ipyvizzu/animation.py def dump(self) -> str: \"\"\" A method for converting the built dictionary into string. Returns: An str that has been json dumped with [RawJavaScriptEncoder][ipyvizzu.json.RawJavaScriptEncoder] from a dictionary. \"\"\" return json.dumps(self.build(), cls=RawJavaScriptEncoder) build() abstractmethod An abstract method for returning a dictionary with values that can be converted into json string. Returns: Type Description dict A dictionary that stored in the animation object. Source code in ipyvizzu/animation.py @abc.abstractmethod def build(self) -> dict: \"\"\" An abstract method for returning a dictionary with values that can be converted into json string. Returns: A dictionary that stored in the animation object. \"\"\" PlainAnimation Bases: dict , Animation A class for representing plain animation. It can build any dictionary. Source code in ipyvizzu/animation.py class PlainAnimation(dict, Animation): \"\"\" A class for representing plain animation. It can build any dictionary. \"\"\" def build(self) -> dict: \"\"\" A method for returning the plain animation dictionary. Returns: A dictionary that stored in the plain animation object. \"\"\" return self build() A method for returning the plain animation dictionary. Returns: Type Description dict A dictionary that stored in the plain animation object. Source code in ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for returning the plain animation dictionary. Returns: A dictionary that stored in the plain animation object. \"\"\" return self InferType Bases: Enum An enum class for storing data infer types. Source code in ipyvizzu/animation.py class InferType(Enum): \"\"\"An enum class for storing data infer types.\"\"\" DIMENSION = \"dimension\" \"\"\"An enum key-value for storing dimension infer type.\"\"\" MEASURE = \"measure\" \"\"\"An enum key-value for storing measure infer type.\"\"\" DIMENSION = 'dimension' class-attribute An enum key-value for storing dimension infer type. MEASURE = 'measure' class-attribute An enum key-value for storing measure infer type. Data Bases: dict , Animation A class for representing data animation. It can build data option of the chart. Source code in ipyvizzu/animation.py class Data(dict, Animation): \"\"\" A class for representing data animation. It can build data option of the chart. \"\"\" @classmethod def filter(cls, filter_expr: Optional[str] = None): # -> Data: \"\"\" A class method for creating a [Data][ipyvizzu.animation.Data] class instance with a data filter. Args: filter_expr: The JavaScript data filter expression. Returns: (Data): A data animation instance that contains a data filter. Example: Create a [Data][ipyvizzu.animation.Data] class with a data filter: filter = Data.filter(\"record['Genres'] == 'Pop'\") \"\"\" data = cls() data.set_filter(filter_expr) return data def set_filter(self, filter_expr: Optional[str] = None) -> None: \"\"\" A method for adding a filter to an existing [Data][ipyvizzu.animation.Data] class instance. Args: filter_expr: The JavaScript data filter expression. Example: Add a data filter to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.set_filter(\"record['Genres'] == 'Pop'\") \"\"\" filter_expr_raw_js = ( RawJavaScript(f\"record => {{ return ({' '.join(filter_expr.split())}) }}\") if filter_expr is not None else filter_expr ) self.update({\"filter\": filter_expr_raw_js}) @classmethod def from_json(cls, filename: Union[str, bytes, PathLike]): # -> Data: \"\"\" A method for returning a [Data][ipyvizzu.animation.Data] class instance which has been created from a json file. Args: filename: The path of the data source json file. Returns: (Data): A data animation instance that has been created from a json file. \"\"\" with open(filename, \"r\", encoding=\"utf8\") as file_desc: return cls(json.load(file_desc)) def add_record(self, record: list) -> None: \"\"\" A method for adding a record to an existing [Data][ipyvizzu.animation.Data] class instance. Args: record: A list that contains data values. Example: Adding a record to a [Data][ipyvizzu.animation.Data] class instance: data = Data() record = [\"Pop\", \"Hard\", 114] data.add_record(record) \"\"\" self._add_value(\"records\", record) def add_records(self, records: List[list]) -> None: \"\"\" A method for adding records to an existing [Data][ipyvizzu.animation.Data] class instance. Args: records: A list that contains data records. Example: Adding records to a [Data][ipyvizzu.animation.Data] class instance: data = Data() records = [ [\"Pop\", \"Hard\", 114], [\"Rock\", \"Hard\", 96], [\"Pop\", \"Experimental\", 127], [\"Rock\", \"Experimental\", 83], ] data.add_records(records) \"\"\" list(map(self.add_record, records)) def add_series(self, name: str, values: Optional[list] = None, **kwargs) -> None: \"\"\" A method for adding a series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the series. values: The data values of the series. **kwargs (Optional): Arbitrary keyword arguments. For example infer type can be set with the `type` keywod argument. Example: Adding a series without values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series(\"Genres\") Adding a series without values and with infer type to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series(\"Kinds\", type=\"dimension\") Adding a series with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series( \"Popularity\", [114, 96, 127, 83] ) \"\"\" self._add_named_value(\"series\", name, values, **kwargs) def add_dimension(self, name: str, values: Optional[list] = None, **kwargs) -> None: \"\"\" A method for adding a dimension to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the dimension. values: The data values of the dimension. **kwargs (Optional): Arbitrary keyword arguments. Example: Adding a dimension with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_dimension(\"Genres\", [\"Pop\", \"Rock\"]) \"\"\" self._add_named_value(\"dimensions\", name, values, **kwargs) def add_measure(self, name: str, values: Optional[list] = None, **kwargs) -> None: \"\"\" A method for adding a measure to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the measure. values: The data values of the measure. **kwargs (Optional): Arbitrary keyword arguments. Example: Adding a measure with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_measure( \"Popularity\", [ [114, 96], [127, 83], ], ) \"\"\" self._add_named_value(\"measures\", name, values, **kwargs) def add_data_frame( self, data_frame: Union[pd.DataFrame, pd.Series], default_measure_value: Optional[Any] = 0, default_dimension_value: Optional[Any] = \"\", ) -> None: \"\"\" A method for adding data frame to an existing [Data][ipyvizzu.animation.Data] class instance. Args: data_frame: The pandas data frame object. default_measure_value: The default measure value to fill the empty values. default_dimension_value: The default dimension value to fill the empty values. Raises: TypeError: If `data_frame` is not instance of [pd.DataFrame][pandas.DataFrame] or [pd.Series][pandas.Series]. Example: Adding a data frame to a [Data][ipyvizzu.animation.Data] class instance: data_frame = pd.DataFrame( { \"Genres\": [\"Pop\", \"Rock\", \"Pop\", \"Rock\"], \"Kinds\": [\"Hard\", \"Hard\", \"Experimental\", \"Experimental\"], \"Popularity\": [114, 96, 127, 83], } ) data = Data() data.add_data_frame(data_frame) \"\"\" if not isinstance(data_frame, type(None)): if isinstance(data_frame, pd.Series): data_frame = pd.DataFrame(data_frame) if not isinstance(data_frame, pd.DataFrame): raise TypeError( \"data_frame must be instance of pandas.DataFrame or pandas.Series\" ) for name in data_frame.columns: values = [] if is_numeric_dtype(data_frame[name].dtype): infer_type = InferType.MEASURE values = ( data_frame[name] .fillna(default_measure_value) .astype(float) .values.tolist() ) else: infer_type = InferType.DIMENSION values = ( data_frame[name] .fillna(default_dimension_value) .astype(str) .values.tolist() ) self.add_series( name, values, type=infer_type.value, ) def add_data_frame_index( self, data_frame: Union[pd.DataFrame, pd.Series], name: Optional[str], ) -> None: \"\"\" A method for adding data frame's index to an existing [Data][ipyvizzu.animation.Data] class instance. Args: data_frame: The pandas data frame object. name: The name of the index series. Raises: TypeError: If `data_frame` is not instance of [pd.DataFrame][pandas.DataFrame] or [pd.Series][pandas.Series]. Example: Adding a data frame's index to a [Data][ipyvizzu.animation.Data] class instance: data_frame = pd.DataFrame( {\"Popularity\": [114, 96]}, index=[\"x\", \"y\"] ) data = Data() data.add_data_frame_index(data_frame, \"DataFrameIndex\") data.add_data_frame(data_frame) \"\"\" if data_frame is not None: if isinstance(data_frame, pd.Series): data_frame = pd.DataFrame(data_frame) if not isinstance(data_frame, pd.DataFrame): raise TypeError( \"data_frame must be instance of pandas.DataFrame or pandas.Series\" ) self.add_series( str(name), [str(i) for i in data_frame.index], type=InferType.DIMENSION.value, ) def _add_named_value( self, dest: str, name: str, values: Optional[list] = None, **kwargs ) -> None: value = {\"name\": name, **kwargs} if values is not None: value[\"values\"] = values # type: ignore self._add_value(dest, value) def _add_value(self, dest: str, value: Union[dict, list]) -> None: self.setdefault(dest, []).append(value) def build(self) -> dict: \"\"\" A method for validating and returning the data animation dictionary. Returns: A dictionary that stored in the data animation object. It contains a `data` key whose value is the stored animation. \"\"\" jsonschema.validate(self, DATA_SCHEMA) return {\"data\": self} filter(filter_expr=None) classmethod A class method for creating a Data class instance with a data filter. Parameters: Name Type Description Default filter_expr Optional [ str ] The JavaScript data filter expression. None Returns: Type Description Data A data animation instance that contains a data filter. Example Create a Data class with a data filter: filter = Data.filter(\"record['Genres'] == 'Pop'\") Source code in ipyvizzu/animation.py @classmethod def filter(cls, filter_expr: Optional[str] = None): # -> Data: \"\"\" A class method for creating a [Data][ipyvizzu.animation.Data] class instance with a data filter. Args: filter_expr: The JavaScript data filter expression. Returns: (Data): A data animation instance that contains a data filter. Example: Create a [Data][ipyvizzu.animation.Data] class with a data filter: filter = Data.filter(\"record['Genres'] == 'Pop'\") \"\"\" data = cls() data.set_filter(filter_expr) return data set_filter(filter_expr=None) A method for adding a filter to an existing Data class instance. Parameters: Name Type Description Default filter_expr Optional [ str ] The JavaScript data filter expression. None Example Add a data filter to a Data class instance: data = Data() data.set_filter(\"record['Genres'] == 'Pop'\") Source code in ipyvizzu/animation.py def set_filter(self, filter_expr: Optional[str] = None) -> None: \"\"\" A method for adding a filter to an existing [Data][ipyvizzu.animation.Data] class instance. Args: filter_expr: The JavaScript data filter expression. Example: Add a data filter to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.set_filter(\"record['Genres'] == 'Pop'\") \"\"\" filter_expr_raw_js = ( RawJavaScript(f\"record => {{ return ({' '.join(filter_expr.split())}) }}\") if filter_expr is not None else filter_expr ) self.update({\"filter\": filter_expr_raw_js}) from_json(filename) classmethod A method for returning a Data class instance which has been created from a json file. Parameters: Name Type Description Default filename Union [ str , bytes , PathLike ] The path of the data source json file. required Returns: Type Description Data A data animation instance that has been created from a json file. Source code in ipyvizzu/animation.py @classmethod def from_json(cls, filename: Union[str, bytes, PathLike]): # -> Data: \"\"\" A method for returning a [Data][ipyvizzu.animation.Data] class instance which has been created from a json file. Args: filename: The path of the data source json file. Returns: (Data): A data animation instance that has been created from a json file. \"\"\" with open(filename, \"r\", encoding=\"utf8\") as file_desc: return cls(json.load(file_desc)) add_record(record) A method for adding a record to an existing Data class instance. Parameters: Name Type Description Default record list A list that contains data values. required Example Adding a record to a Data class instance: data = Data() record = [\"Pop\", \"Hard\", 114] data.add_record(record) Source code in ipyvizzu/animation.py def add_record(self, record: list) -> None: \"\"\" A method for adding a record to an existing [Data][ipyvizzu.animation.Data] class instance. Args: record: A list that contains data values. Example: Adding a record to a [Data][ipyvizzu.animation.Data] class instance: data = Data() record = [\"Pop\", \"Hard\", 114] data.add_record(record) \"\"\" self._add_value(\"records\", record) add_records(records) A method for adding records to an existing Data class instance. Parameters: Name Type Description Default records List [ list ] A list that contains data records. required Example Adding records to a Data class instance: data = Data() records = [ [\"Pop\", \"Hard\", 114], [\"Rock\", \"Hard\", 96], [\"Pop\", \"Experimental\", 127], [\"Rock\", \"Experimental\", 83], ] data.add_records(records) Source code in ipyvizzu/animation.py def add_records(self, records: List[list]) -> None: \"\"\" A method for adding records to an existing [Data][ipyvizzu.animation.Data] class instance. Args: records: A list that contains data records. Example: Adding records to a [Data][ipyvizzu.animation.Data] class instance: data = Data() records = [ [\"Pop\", \"Hard\", 114], [\"Rock\", \"Hard\", 96], [\"Pop\", \"Experimental\", 127], [\"Rock\", \"Experimental\", 83], ] data.add_records(records) \"\"\" list(map(self.add_record, records)) add_series(name, values=None, **kwargs) A method for adding a series to an existing Data class instance. Parameters: Name Type Description Default name str The name of the series. required values Optional [ list ] The data values of the series. None **kwargs Optional Arbitrary keyword arguments. For example infer type can be set with the type keywod argument. {} Example Adding a series without values to a Data class instance: data = Data() data.add_series(\"Genres\") Adding a series without values and with infer type to a Data class instance: data = Data() data.add_series(\"Kinds\", type=\"dimension\") Adding a series with values to a Data class instance: data = Data() data.add_series( \"Popularity\", [114, 96, 127, 83] ) Source code in ipyvizzu/animation.py def add_series(self, name: str, values: Optional[list] = None, **kwargs) -> None: \"\"\" A method for adding a series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the series. values: The data values of the series. **kwargs (Optional): Arbitrary keyword arguments. For example infer type can be set with the `type` keywod argument. Example: Adding a series without values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series(\"Genres\") Adding a series without values and with infer type to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series(\"Kinds\", type=\"dimension\") Adding a series with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series( \"Popularity\", [114, 96, 127, 83] ) \"\"\" self._add_named_value(\"series\", name, values, **kwargs) add_dimension(name, values=None, **kwargs) A method for adding a dimension to an existing Data class instance. Parameters: Name Type Description Default name str The name of the dimension. required values Optional [ list ] The data values of the dimension. None **kwargs Optional Arbitrary keyword arguments. {} Example Adding a dimension with values to a Data class instance: data = Data() data.add_dimension(\"Genres\", [\"Pop\", \"Rock\"]) Source code in ipyvizzu/animation.py def add_dimension(self, name: str, values: Optional[list] = None, **kwargs) -> None: \"\"\" A method for adding a dimension to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the dimension. values: The data values of the dimension. **kwargs (Optional): Arbitrary keyword arguments. Example: Adding a dimension with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_dimension(\"Genres\", [\"Pop\", \"Rock\"]) \"\"\" self._add_named_value(\"dimensions\", name, values, **kwargs) add_measure(name, values=None, **kwargs) A method for adding a measure to an existing Data class instance. Parameters: Name Type Description Default name str The name of the measure. required values Optional [ list ] The data values of the measure. None **kwargs Optional Arbitrary keyword arguments. {} Example Adding a measure with values to a Data class instance: data = Data() data.add_measure( \"Popularity\", [ [114, 96], [127, 83], ], ) Source code in ipyvizzu/animation.py def add_measure(self, name: str, values: Optional[list] = None, **kwargs) -> None: \"\"\" A method for adding a measure to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the measure. values: The data values of the measure. **kwargs (Optional): Arbitrary keyword arguments. Example: Adding a measure with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_measure( \"Popularity\", [ [114, 96], [127, 83], ], ) \"\"\" self._add_named_value(\"measures\", name, values, **kwargs) add_data_frame(data_frame, default_measure_value=0, default_dimension_value='') A method for adding data frame to an existing Data class instance. Parameters: Name Type Description Default data_frame Union [ pd . DataFrame , pd . Series ] The pandas data frame object. required default_measure_value Optional [ Any ] The default measure value to fill the empty values. 0 default_dimension_value Optional [ Any ] The default dimension value to fill the empty values. '' Raises: Type Description TypeError If data_frame is not instance of pd.DataFrame or pd.Series . Example Adding a data frame to a Data class instance: data_frame = pd.DataFrame( { \"Genres\": [\"Pop\", \"Rock\", \"Pop\", \"Rock\"], \"Kinds\": [\"Hard\", \"Hard\", \"Experimental\", \"Experimental\"], \"Popularity\": [114, 96, 127, 83], } ) data = Data() data.add_data_frame(data_frame) Source code in ipyvizzu/animation.py def add_data_frame( self, data_frame: Union[pd.DataFrame, pd.Series], default_measure_value: Optional[Any] = 0, default_dimension_value: Optional[Any] = \"\", ) -> None: \"\"\" A method for adding data frame to an existing [Data][ipyvizzu.animation.Data] class instance. Args: data_frame: The pandas data frame object. default_measure_value: The default measure value to fill the empty values. default_dimension_value: The default dimension value to fill the empty values. Raises: TypeError: If `data_frame` is not instance of [pd.DataFrame][pandas.DataFrame] or [pd.Series][pandas.Series]. Example: Adding a data frame to a [Data][ipyvizzu.animation.Data] class instance: data_frame = pd.DataFrame( { \"Genres\": [\"Pop\", \"Rock\", \"Pop\", \"Rock\"], \"Kinds\": [\"Hard\", \"Hard\", \"Experimental\", \"Experimental\"], \"Popularity\": [114, 96, 127, 83], } ) data = Data() data.add_data_frame(data_frame) \"\"\" if not isinstance(data_frame, type(None)): if isinstance(data_frame, pd.Series): data_frame = pd.DataFrame(data_frame) if not isinstance(data_frame, pd.DataFrame): raise TypeError( \"data_frame must be instance of pandas.DataFrame or pandas.Series\" ) for name in data_frame.columns: values = [] if is_numeric_dtype(data_frame[name].dtype): infer_type = InferType.MEASURE values = ( data_frame[name] .fillna(default_measure_value) .astype(float) .values.tolist() ) else: infer_type = InferType.DIMENSION values = ( data_frame[name] .fillna(default_dimension_value) .astype(str) .values.tolist() ) self.add_series( name, values, type=infer_type.value, ) add_data_frame_index(data_frame, name) A method for adding data frame's index to an existing Data class instance. Parameters: Name Type Description Default data_frame Union [ pd . DataFrame , pd . Series ] The pandas data frame object. required name Optional [ str ] The name of the index series. required Raises: Type Description TypeError If data_frame is not instance of pd.DataFrame or pd.Series . Example Adding a data frame's index to a Data class instance: data_frame = pd.DataFrame( {\"Popularity\": [114, 96]}, index=[\"x\", \"y\"] ) data = Data() data.add_data_frame_index(data_frame, \"DataFrameIndex\") data.add_data_frame(data_frame) Source code in ipyvizzu/animation.py def add_data_frame_index( self, data_frame: Union[pd.DataFrame, pd.Series], name: Optional[str], ) -> None: \"\"\" A method for adding data frame's index to an existing [Data][ipyvizzu.animation.Data] class instance. Args: data_frame: The pandas data frame object. name: The name of the index series. Raises: TypeError: If `data_frame` is not instance of [pd.DataFrame][pandas.DataFrame] or [pd.Series][pandas.Series]. Example: Adding a data frame's index to a [Data][ipyvizzu.animation.Data] class instance: data_frame = pd.DataFrame( {\"Popularity\": [114, 96]}, index=[\"x\", \"y\"] ) data = Data() data.add_data_frame_index(data_frame, \"DataFrameIndex\") data.add_data_frame(data_frame) \"\"\" if data_frame is not None: if isinstance(data_frame, pd.Series): data_frame = pd.DataFrame(data_frame) if not isinstance(data_frame, pd.DataFrame): raise TypeError( \"data_frame must be instance of pandas.DataFrame or pandas.Series\" ) self.add_series( str(name), [str(i) for i in data_frame.index], type=InferType.DIMENSION.value, ) build() A method for validating and returning the data animation dictionary. Returns: Type Description dict A dictionary that stored in the data animation object. It contains a data key whose value is the stored animation. Source code in ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for validating and returning the data animation dictionary. Returns: A dictionary that stored in the data animation object. It contains a `data` key whose value is the stored animation. \"\"\" jsonschema.validate(self, DATA_SCHEMA) return {\"data\": self} ConfigAttr Bases: type A metaclass class for the Config class. Returns a Config class with a chart preset if the __getattr__ method called. Source code in ipyvizzu/animation.py class ConfigAttr(type): \"\"\" A metaclass class for the [Config][ipyvizzu.animation.Config] class. Returns a [Config][ipyvizzu.animation.Config] class with a chart preset if the `__getattr__` method called. \"\"\" @classmethod def __getattr__(mcs, name): config_attr = mcs(\"ConfigAttr\", (object,), {\"name\": name}) return config_attr._get_preset # pylint: disable=no-member def _get_preset(cls, preset): config = Config(RawJavaScript(f\"lib.presets.{cls.name}({preset})\")) return config Config Bases: Animation A class for representing config animation. It can build config option of the chart. Source code in ipyvizzu/animation.py class Config(Animation, metaclass=ConfigAttr): \"\"\" A class for representing config animation. It can build config option of the chart. \"\"\" def __init__(self, data: Optional[dict]): \"\"\" Config constructor. Args: data: A config animation dictionary. \"\"\" self._data = data def build(self) -> dict: \"\"\" A method for returning the config animation dictionary. Returns: A dictionary that stored in the config animation object. It contains a `config` key whose value is the stored animation. \"\"\" return {\"config\": self._data} __init__(data) Config constructor. Parameters: Name Type Description Default data Optional [ dict ] A config animation dictionary. required Source code in ipyvizzu/animation.py def __init__(self, data: Optional[dict]): \"\"\" Config constructor. Args: data: A config animation dictionary. \"\"\" self._data = data build() A method for returning the config animation dictionary. Returns: Type Description dict A dictionary that stored in the config animation object. It contains a config key whose value is the stored animation. Source code in ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for returning the config animation dictionary. Returns: A dictionary that stored in the config animation object. It contains a `config` key whose value is the stored animation. \"\"\" return {\"config\": self._data} Style Bases: Animation A class for representing style animation. It can build style option of the chart. Source code in ipyvizzu/animation.py class Style(Animation): \"\"\" A class for representing style animation. It can build style option of the chart. \"\"\" def __init__(self, data: Optional[dict]): \"\"\" Style constructor. Args: data: A style animation dictionary. \"\"\" self._data = data def build(self) -> dict: \"\"\" A method for returning the style animation dictionary. Returns: A dictionary that stored in the style animation object. It contains a `style` key whose value is the stored animation. \"\"\" return {\"style\": self._data} __init__(data) Style constructor. Parameters: Name Type Description Default data Optional [ dict ] A style animation dictionary. required Source code in ipyvizzu/animation.py def __init__(self, data: Optional[dict]): \"\"\" Style constructor. Args: data: A style animation dictionary. \"\"\" self._data = data build() A method for returning the style animation dictionary. Returns: Type Description dict A dictionary that stored in the style animation object. It contains a style key whose value is the stored animation. Source code in ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for returning the style animation dictionary. Returns: A dictionary that stored in the style animation object. It contains a `style` key whose value is the stored animation. \"\"\" return {\"style\": self._data} Snapshot Bases: Animation A class for representing snapshot animation. It can build the snapshot id of the chart. Source code in ipyvizzu/animation.py class Snapshot(Animation): \"\"\" A class for representing snapshot animation. It can build the snapshot id of the chart. \"\"\" def __init__(self, name: str): \"\"\" Snapshot constructor. Args: name: A snapshot id. \"\"\" self._name = name def dump(self) -> str: \"\"\" A method for overwriting the [Animation.dump][ipyvizzu.animation.Animation.dump] method. It dumps the stored snapshot id as a string. Returns: An str that contains the stored snapshot id. \"\"\" return f\"'{self._name}'\" def build(self): \"\"\" A method for preventing to merge [Snapshot][ipyvizzu.animation.Snapshot] with other animations. Raises: NotImplementedError: If the [build][ipyvizzu.animation.Snapshot.build] method has been called, because [Snapshot][ipyvizzu.animation.Snapshot] cannot be merged with other animations. \"\"\" raise NotImplementedError(\"Snapshot cannot be merged with other animations\") __init__(name) Snapshot constructor. Parameters: Name Type Description Default name str A snapshot id. required Source code in ipyvizzu/animation.py def __init__(self, name: str): \"\"\" Snapshot constructor. Args: name: A snapshot id. \"\"\" self._name = name dump() A method for overwriting the Animation.dump method. It dumps the stored snapshot id as a string. Returns: Type Description str An str that contains the stored snapshot id. Source code in ipyvizzu/animation.py def dump(self) -> str: \"\"\" A method for overwriting the [Animation.dump][ipyvizzu.animation.Animation.dump] method. It dumps the stored snapshot id as a string. Returns: An str that contains the stored snapshot id. \"\"\" return f\"'{self._name}'\" build() A method for preventing to merge Snapshot with other animations. Raises: Type Description NotImplementedError If the build method has been called, because Snapshot cannot be merged with other animations. Source code in ipyvizzu/animation.py def build(self): \"\"\" A method for preventing to merge [Snapshot][ipyvizzu.animation.Snapshot] with other animations. Raises: NotImplementedError: If the [build][ipyvizzu.animation.Snapshot.build] method has been called, because [Snapshot][ipyvizzu.animation.Snapshot] cannot be merged with other animations. \"\"\" raise NotImplementedError(\"Snapshot cannot be merged with other animations\") AnimationMerger Bases: dict , Animation A class for merging different types of animations. Source code in ipyvizzu/animation.py class AnimationMerger(dict, Animation): \"\"\"A class for merging different types of animations.\"\"\" def merge(self, animation: Animation) -> None: \"\"\" A method for merging an animation with the previously merged animations. Args: animation: An animation to be merged with with previously merged animations. Raises: ValueError: If the type of an animation is already merged. \"\"\" data = self._validate(animation) self.update(data) def _validate(self, animation: Animation) -> dict: data = animation.build() common_keys = set(data).intersection(self) if common_keys: raise ValueError(f\"Animation is already merged: {common_keys}\") return data def build(self) -> dict: \"\"\" A method for returning a merged dictionary from different types of animations. Returns: A merged dictionary from [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style] animations. \"\"\" return self merge(animation) A method for merging an animation with the previously merged animations. Parameters: Name Type Description Default animation Animation An animation to be merged with with previously merged animations. required Raises: Type Description ValueError If the type of an animation is already merged. Source code in ipyvizzu/animation.py def merge(self, animation: Animation) -> None: \"\"\" A method for merging an animation with the previously merged animations. Args: animation: An animation to be merged with with previously merged animations. Raises: ValueError: If the type of an animation is already merged. \"\"\" data = self._validate(animation) self.update(data) build() A method for returning a merged dictionary from different types of animations. Returns: Type Description dict A merged dictionary from Data , Config and Style animations. Source code in ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for returning a merged dictionary from different types of animations. Returns: A merged dictionary from [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style] animations. \"\"\" return self ipyvizzu.chart A module for working with Vizzu charts. Chart A class for representing a wrapper over Vizzu chart. Source code in ipyvizzu/chart.py class Chart: \"\"\"A class for representing a wrapper over Vizzu chart.\"\"\" VIZZU: str = \"https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js\" \"\"\"A variable for storing the default url of vizzu package.\"\"\" def __init__( self, vizzu: Optional[str] = VIZZU, width: Optional[str] = \"800px\", height: Optional[str] = \"480px\", display: Optional[Union[DisplayTarget, str]] = DisplayTarget.ACTUAL, ): \"\"\" Chart constructor. Args: vizzu: The url of Vizzu JavaScript package. width: The width of the chart. height: The height of the chart. display: The display behaviour of the chart. \"\"\" self._chart_id = uuid.uuid4().hex[:7] self._display_target = DisplayTarget(display) self._calls: List[str] = [] self._showed = False self._scroll_into_view = False ipyvizzurawjs = pkgutil.get_data(__name__, \"templates/ipyvizzu.js\") ipyvizzujs = ipyvizzurawjs.decode(\"utf-8\") # type: ignore self._display(DisplayTemplate.IPYVIZZUJS.format(ipyvizzujs=ipyvizzujs)) self._display( DisplayTemplate.INIT.format( chart_id=self._chart_id, vizzu=vizzu, div_width=width, div_height=height, ) ) if self._display_target != DisplayTarget.MANUAL: self._register_events() @staticmethod def _register_events() -> None: ipy = get_ipython() if ipy is not None: ipy.events.register(\"pre_run_cell\", Chart._register_pre_run_cell) @staticmethod def _register_pre_run_cell() -> None: display_javascript(DisplayTemplate.CLEAR_INHIBITSCROLL, raw=True) @property def scroll_into_view(self) -> bool: \"\"\" A property for turning on/off the scroll into view feature. Returns: The value of the property (default `False`). \"\"\" return self._scroll_into_view @scroll_into_view.setter def scroll_into_view(self, scroll_into_view: Optional[bool]): self._scroll_into_view = bool(scroll_into_view) def animate( self, *animations: Animation, **options: Optional[Union[str, int, float, dict]] ) -> None: \"\"\" A method for changing the state of the chart. Args: *animations: List of Animation objects such as [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style]. **options: Dictionary of animation options for example `duration=1`. Raises: ValueError: If `animations` is not set. Example: Reset the chart styles: chart.animate(Style(None)) \"\"\" if not animations: raise ValueError(\"No animation was set.\") animation = self._merge_animations(animations) animate = Animate(animation, options) self._display( DisplayTemplate.ANIMATE.format( display_target=self._display_target.value, chart_id=self._chart_id, scroll=str(self._scroll_into_view).lower(), **animate.dump(), ) ) @staticmethod def _merge_animations( animations: Tuple[Animation, ...], ) -> Union[Animation, AnimationMerger]: if len(animations) == 1: return animations[0] merger = AnimationMerger() for animation in animations: merger.merge(animation) return merger def feature(self, name: str, enabled: bool) -> None: \"\"\" A method for turning on/off features of the chart. Args: name: The name of the chart feature. enabled: The new state of the chart feature. Example: Turn on `tooltip` of the chart: chart.feature(\"tooltip\", True) \"\"\" self._display( DisplayTemplate.FEATURE.format( chart_id=self._chart_id, **Feature(name, enabled).dump(), ) ) def store(self) -> Snapshot: \"\"\" A method for saving and storing the actual state of the chart. Returns: A snapshot animation object wich stores the actual state of the chart. Example: Save and restore the actual state of the chart: snapshot = chart.store() ... chart.animate(snapshot) \"\"\" snapshot_id = uuid.uuid4().hex[:7] self._display( DisplayTemplate.STORE.format( chart_id=self._chart_id, **Store(snapshot_id).dump() ) ) return Snapshot(snapshot_id) def on( # pylint: disable=invalid-name self, event: str, handler: str ) -> EventHandler: \"\"\" A method for creating and turning on an event handler. Args: event: The type of the event. handler: The JavaScript method of the event. Returns: The turned on event handler object. Example: Turn on an event handler which prints an alert message when someone clicks on the chart: handler = chart.on(\"click\", \"alert(JSON.stringify(event.data));\") \"\"\" event_handler = EventHandler(event, handler) self._display( DisplayTemplate.SET_EVENT.format( chart_id=self._chart_id, **EventOn(event_handler).dump(), ) ) return event_handler def off(self, event_handler: EventHandler) -> None: \"\"\" A method for turning off an event handler. Args: event_handler: A previously created event handler object. Example: Turn off a previously created event handler: chart.off(handler) \"\"\" self._display( DisplayTemplate.CLEAR_EVENT.format( chart_id=self._chart_id, **EventOff(event_handler).dump(), ) ) def log(self, chart_property: ChartProperty) -> None: \"\"\" A method for printing chart properties to the browser console. Args: chart_property: A chart property such as [CONFIG][ipyvizzu.template.ChartProperty] and [STYLE][ipyvizzu.template.ChartProperty]. Example: Log the actual style of the chart to the browser console: chart.log(ChartProperty.STYLE) \"\"\" self._display( DisplayTemplate.LOG.format( chart_id=self._chart_id, **Log(chart_property).dump() ) ) def _repr_html_(self) -> str: assert ( self._display_target == DisplayTarget.MANUAL ), \"chart._repr_html_() can be used with display=DisplayTarget.MANUAL only\" assert not self._showed, \"cannot be used after chart displayed.\" self._showed = True html_id = uuid.uuid4().hex[:7] script = ( self._calls[0] + \"\\n\" + \"\\n\".join(self._calls[1:]).replace( \"element\", f'document.getElementById(\"{html_id}\")' ) ) return f'<div id=\"{html_id}\"><script>{script}</script></div>' def show(self) -> None: \"\"\" A method for displaying the assembled JavaScript code. Raises: AssertionError: If [display][ipyvizzu.Chart.__init__] is not [DisplayTarget.MANUAL][ipyvizzu.template.DisplayTarget]. AssertionError: If chart already has been displayed. \"\"\" assert ( self._display_target == DisplayTarget.MANUAL ), \"chart.show() can be used with display=DisplayTarget.MANUAL only\" assert not self._showed, \"cannot be used after chart displayed\" display_javascript( \"\\n\".join(self._calls), raw=True, ) self._showed = True def _display(self, javascript: str) -> None: if self._display_target != DisplayTarget.MANUAL: display_javascript( javascript, raw=True, ) else: assert not self._showed, \"cannot be used after chart displayed\" self._calls.append(javascript) VIZZU: str = 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' class-attribute A variable for storing the default url of vizzu package. scroll_into_view: bool writable property A property for turning on/off the scroll into view feature. Returns: Type Description bool The value of the property (default False ). __init__(vizzu=VIZZU, width='800px', height='480px', display=DisplayTarget.ACTUAL) Chart constructor. Parameters: Name Type Description Default vizzu Optional [ str ] The url of Vizzu JavaScript package. VIZZU width Optional [ str ] The width of the chart. '800px' height Optional [ str ] The height of the chart. '480px' display Optional [ Union [ DisplayTarget , str ]] The display behaviour of the chart. DisplayTarget.ACTUAL Source code in ipyvizzu/chart.py def __init__( self, vizzu: Optional[str] = VIZZU, width: Optional[str] = \"800px\", height: Optional[str] = \"480px\", display: Optional[Union[DisplayTarget, str]] = DisplayTarget.ACTUAL, ): \"\"\" Chart constructor. Args: vizzu: The url of Vizzu JavaScript package. width: The width of the chart. height: The height of the chart. display: The display behaviour of the chart. \"\"\" self._chart_id = uuid.uuid4().hex[:7] self._display_target = DisplayTarget(display) self._calls: List[str] = [] self._showed = False self._scroll_into_view = False ipyvizzurawjs = pkgutil.get_data(__name__, \"templates/ipyvizzu.js\") ipyvizzujs = ipyvizzurawjs.decode(\"utf-8\") # type: ignore self._display(DisplayTemplate.IPYVIZZUJS.format(ipyvizzujs=ipyvizzujs)) self._display( DisplayTemplate.INIT.format( chart_id=self._chart_id, vizzu=vizzu, div_width=width, div_height=height, ) ) if self._display_target != DisplayTarget.MANUAL: self._register_events() animate(*animations, **options) A method for changing the state of the chart. Parameters: Name Type Description Default *animations Animation List of Animation objects such as Data , Config and Style . () **options Optional [ Union [ str , int , float , dict ]] Dictionary of animation options for example duration=1 . {} Raises: Type Description ValueError If animations is not set. Example Reset the chart styles: chart.animate(Style(None)) Source code in ipyvizzu/chart.py def animate( self, *animations: Animation, **options: Optional[Union[str, int, float, dict]] ) -> None: \"\"\" A method for changing the state of the chart. Args: *animations: List of Animation objects such as [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style]. **options: Dictionary of animation options for example `duration=1`. Raises: ValueError: If `animations` is not set. Example: Reset the chart styles: chart.animate(Style(None)) \"\"\" if not animations: raise ValueError(\"No animation was set.\") animation = self._merge_animations(animations) animate = Animate(animation, options) self._display( DisplayTemplate.ANIMATE.format( display_target=self._display_target.value, chart_id=self._chart_id, scroll=str(self._scroll_into_view).lower(), **animate.dump(), ) ) feature(name, enabled) A method for turning on/off features of the chart. Parameters: Name Type Description Default name str The name of the chart feature. required enabled bool The new state of the chart feature. required Example Turn on tooltip of the chart: chart.feature(\"tooltip\", True) Source code in ipyvizzu/chart.py def feature(self, name: str, enabled: bool) -> None: \"\"\" A method for turning on/off features of the chart. Args: name: The name of the chart feature. enabled: The new state of the chart feature. Example: Turn on `tooltip` of the chart: chart.feature(\"tooltip\", True) \"\"\" self._display( DisplayTemplate.FEATURE.format( chart_id=self._chart_id, **Feature(name, enabled).dump(), ) ) store() A method for saving and storing the actual state of the chart. Returns: Type Description Snapshot A snapshot animation object wich stores the actual state of the chart. Example Save and restore the actual state of the chart: snapshot = chart.store() ... chart.animate(snapshot) Source code in ipyvizzu/chart.py def store(self) -> Snapshot: \"\"\" A method for saving and storing the actual state of the chart. Returns: A snapshot animation object wich stores the actual state of the chart. Example: Save and restore the actual state of the chart: snapshot = chart.store() ... chart.animate(snapshot) \"\"\" snapshot_id = uuid.uuid4().hex[:7] self._display( DisplayTemplate.STORE.format( chart_id=self._chart_id, **Store(snapshot_id).dump() ) ) return Snapshot(snapshot_id) on(event, handler) A method for creating and turning on an event handler. Parameters: Name Type Description Default event str The type of the event. required handler str The JavaScript method of the event. required Returns: Type Description EventHandler The turned on event handler object. Example Turn on an event handler which prints an alert message when someone clicks on the chart: handler = chart.on(\"click\", \"alert(JSON.stringify(event.data));\") Source code in ipyvizzu/chart.py def on( # pylint: disable=invalid-name self, event: str, handler: str ) -> EventHandler: \"\"\" A method for creating and turning on an event handler. Args: event: The type of the event. handler: The JavaScript method of the event. Returns: The turned on event handler object. Example: Turn on an event handler which prints an alert message when someone clicks on the chart: handler = chart.on(\"click\", \"alert(JSON.stringify(event.data));\") \"\"\" event_handler = EventHandler(event, handler) self._display( DisplayTemplate.SET_EVENT.format( chart_id=self._chart_id, **EventOn(event_handler).dump(), ) ) return event_handler off(event_handler) A method for turning off an event handler. Parameters: Name Type Description Default event_handler EventHandler A previously created event handler object. required Example Turn off a previously created event handler: chart.off(handler) Source code in ipyvizzu/chart.py def off(self, event_handler: EventHandler) -> None: \"\"\" A method for turning off an event handler. Args: event_handler: A previously created event handler object. Example: Turn off a previously created event handler: chart.off(handler) \"\"\" self._display( DisplayTemplate.CLEAR_EVENT.format( chart_id=self._chart_id, **EventOff(event_handler).dump(), ) ) log(chart_property) A method for printing chart properties to the browser console. Parameters: Name Type Description Default chart_property ChartProperty A chart property such as CONFIG and STYLE . required Example Log the actual style of the chart to the browser console: chart.log(ChartProperty.STYLE) Source code in ipyvizzu/chart.py def log(self, chart_property: ChartProperty) -> None: \"\"\" A method for printing chart properties to the browser console. Args: chart_property: A chart property such as [CONFIG][ipyvizzu.template.ChartProperty] and [STYLE][ipyvizzu.template.ChartProperty]. Example: Log the actual style of the chart to the browser console: chart.log(ChartProperty.STYLE) \"\"\" self._display( DisplayTemplate.LOG.format( chart_id=self._chart_id, **Log(chart_property).dump() ) ) show() A method for displaying the assembled JavaScript code. Raises: Type Description AssertionError If display is not DisplayTarget.MANUAL . AssertionError If chart already has been displayed. Source code in ipyvizzu/chart.py def show(self) -> None: \"\"\" A method for displaying the assembled JavaScript code. Raises: AssertionError: If [display][ipyvizzu.Chart.__init__] is not [DisplayTarget.MANUAL][ipyvizzu.template.DisplayTarget]. AssertionError: If chart already has been displayed. \"\"\" assert ( self._display_target == DisplayTarget.MANUAL ), \"chart.show() can be used with display=DisplayTarget.MANUAL only\" assert not self._showed, \"cannot be used after chart displayed\" display_javascript( \"\\n\".join(self._calls), raw=True, ) self._showed = True ipyvizzu.event A module for working with JavaScript events EventHandler A class for representing an event handler. Source code in ipyvizzu/event.py class EventHandler: \"\"\"A class for representing an event handler.\"\"\" def __init__(self, event: str, handler: str): \"\"\" EventHandler constructor. It generates a uuid for the event handler, stores the event type and the body of the handler function. Args: event: The type of the event. handler: The body of the handler function. \"\"\" self._id = uuid.uuid4().hex[:7] self._event = event self._handler = \" \".join(handler.split()) @property def id(self) -> str: # pylint: disable=invalid-name \"\"\" A property for storing an id. Returns: The uuid of the event handler. \"\"\" return self._id @property def event(self) -> str: \"\"\" A property for storing an event type. Returns: The type of the event. \"\"\" return self._event @property def handler(self) -> str: \"\"\" A property for storing an event handler function. Returns: The body of the handler function. \"\"\" return self._handler id: str property A property for storing an id. Returns: Type Description str The uuid of the event handler. event: str property A property for storing an event type. Returns: Type Description str The type of the event. handler: str property A property for storing an event handler function. Returns: Type Description str The body of the handler function. __init__(event, handler) EventHandler constructor. It generates a uuid for the event handler, stores the event type and the body of the handler function. Parameters: Name Type Description Default event str The type of the event. required handler str The body of the handler function. required Source code in ipyvizzu/event.py def __init__(self, event: str, handler: str): \"\"\" EventHandler constructor. It generates a uuid for the event handler, stores the event type and the body of the handler function. Args: event: The type of the event. handler: The body of the handler function. \"\"\" self._id = uuid.uuid4().hex[:7] self._event = event self._handler = \" \".join(handler.split()) ipyvizzu.json A module for working JavaScript code in json convertible objects. RawJavaScript A class for representing raw JavaScript code. Source code in ipyvizzu/json.py class RawJavaScript: \"\"\"A class for representing raw JavaScript code.\"\"\" # pylint: disable=too-few-public-methods def __init__(self, raw: Optional[str]): \"\"\" RawJavaScript constructor. It stores raw JavaScript code as a string. Args: raw: JavaScript code as `str`. \"\"\" self._raw = raw @property def raw(self) -> Optional[str]: \"\"\" A property for storing raw JavaScript code as a string. Returns: Raw JavaScript code as `str`. \"\"\" return self._raw raw: Optional[str] property A property for storing raw JavaScript code as a string. Returns: Type Description Optional [ str ] Raw JavaScript code as str . __init__(raw) RawJavaScript constructor. It stores raw JavaScript code as a string. Parameters: Name Type Description Default raw Optional [ str ] JavaScript code as str . required Source code in ipyvizzu/json.py def __init__(self, raw: Optional[str]): \"\"\" RawJavaScript constructor. It stores raw JavaScript code as a string. Args: raw: JavaScript code as `str`. \"\"\" self._raw = raw RawJavaScriptEncoder Bases: json . JSONEncoder A class for representing a custom json encoder, it can encode objects that contain RawJavaScript values. Source code in ipyvizzu/json.py class RawJavaScriptEncoder(json.JSONEncoder): \"\"\" A class for representing a custom json encoder, it can encode objects that contain [RawJavaScript][ipyvizzu.json.RawJavaScript] values. \"\"\" def __init__(self, *args, **kwargs): \"\"\" RawJavaScriptEncoder constructor. It extends [JSONEncoder][json.JSONEncoder] with an instance variable (`_raw_replacements`). The `_raw_replacements` dictionary stores the `uuids` and JavaScript codes of the [RawJavaScript][ipyvizzu.json.RawJavaScript] objects. \"\"\" json.JSONEncoder.__init__(self, *args, **kwargs) self._raw_replacements = {} def default(self, o): \"\"\" Overrides [JSONEncoder.default][json.JSONEncoder.default] method. It replaces [RawJavaScript][ipyvizzu.json.RawJavaScript] object with `uuid` and it stores raw JavaScript code with `uuid` key in the `_raw_replacements` dictionary. \"\"\" if isinstance(o, RawJavaScript): key = uuid.uuid4().hex self._raw_replacements[key] = o.raw return key return json.JSONEncoder.default(self, o) def encode(self, o): \"\"\" Overrides [JSONEncoder.encode][json.JSONEncoder.encode] method. It replaces `uuids` with raw JavaScript code without apostrophes. \"\"\" result = json.JSONEncoder.encode(self, o) for key, val in self._raw_replacements.items(): result = result.replace(f'\"{key}\"', val) return result __init__(*args, **kwargs) RawJavaScriptEncoder constructor. It extends JSONEncoder with an instance variable ( _raw_replacements ). The _raw_replacements dictionary stores the uuids and JavaScript codes of the RawJavaScript objects. Source code in ipyvizzu/json.py def __init__(self, *args, **kwargs): \"\"\" RawJavaScriptEncoder constructor. It extends [JSONEncoder][json.JSONEncoder] with an instance variable (`_raw_replacements`). The `_raw_replacements` dictionary stores the `uuids` and JavaScript codes of the [RawJavaScript][ipyvizzu.json.RawJavaScript] objects. \"\"\" json.JSONEncoder.__init__(self, *args, **kwargs) self._raw_replacements = {} default(o) Overrides JSONEncoder.default method. It replaces RawJavaScript object with uuid and it stores raw JavaScript code with uuid key in the _raw_replacements dictionary. Source code in ipyvizzu/json.py def default(self, o): \"\"\" Overrides [JSONEncoder.default][json.JSONEncoder.default] method. It replaces [RawJavaScript][ipyvizzu.json.RawJavaScript] object with `uuid` and it stores raw JavaScript code with `uuid` key in the `_raw_replacements` dictionary. \"\"\" if isinstance(o, RawJavaScript): key = uuid.uuid4().hex self._raw_replacements[key] = o.raw return key return json.JSONEncoder.default(self, o) encode(o) Overrides JSONEncoder.encode method. It replaces uuids with raw JavaScript code without apostrophes. Source code in ipyvizzu/json.py def encode(self, o): \"\"\" Overrides [JSONEncoder.encode][json.JSONEncoder.encode] method. It replaces `uuids` with raw JavaScript code without apostrophes. \"\"\" result = json.JSONEncoder.encode(self, o) for key, val in self._raw_replacements.items(): result = result.replace(f'\"{key}\"', val) return result ipyvizzu.method A module for working with template methods. Method A class for storing and dumping any kind of data. Source code in ipyvizzu/method.py class Method: \"\"\"A class for storing and dumping any kind of data.\"\"\" # pylint: disable=too-few-public-methods _data: dict def dump(self) -> dict: \"\"\" A method for returning the stored data. Returns: The stored data. \"\"\" return self._data dump() A method for returning the stored data. Returns: Type Description dict The stored data. Source code in ipyvizzu/method.py def dump(self) -> dict: \"\"\" A method for returning the stored data. Returns: The stored data. \"\"\" return self._data Animate Bases: Method A class for dumping chart independent parameters to DisplayTemplate.ANIMATE template. Source code in ipyvizzu/method.py class Animate(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.ANIMATE][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__( self, chart_target: Union[Animation, AnimationMerger], chart_anim_opts: Optional[dict] = None, ): \"\"\" Animate constructor. It stores and dumps `chart_target` and `chart_anim_opts` parameters. Args: chart_target: Animation object such as [Data][ipyvizzu.animation.Data] [Config][ipyvizzu.animation.Config] or [Style][ipyvizzu.animation.Style]. chart_anim_opts: Animation options' dictionary. If it is not set, it dumps `undefined`. \"\"\" self._data = { \"chart_target\": chart_target.dump(), \"chart_anim_opts\": PlainAnimation(chart_anim_opts).dump() if chart_anim_opts else \"undefined\", } __init__(chart_target, chart_anim_opts=None) Animate constructor. It stores and dumps chart_target and chart_anim_opts parameters. Parameters: Name Type Description Default chart_target Union [ Animation , AnimationMerger ] Animation object such as Data Config or Style . required chart_anim_opts Optional [ dict ] Animation options' dictionary. If it is not set, it dumps undefined . None Source code in ipyvizzu/method.py def __init__( self, chart_target: Union[Animation, AnimationMerger], chart_anim_opts: Optional[dict] = None, ): \"\"\" Animate constructor. It stores and dumps `chart_target` and `chart_anim_opts` parameters. Args: chart_target: Animation object such as [Data][ipyvizzu.animation.Data] [Config][ipyvizzu.animation.Config] or [Style][ipyvizzu.animation.Style]. chart_anim_opts: Animation options' dictionary. If it is not set, it dumps `undefined`. \"\"\" self._data = { \"chart_target\": chart_target.dump(), \"chart_anim_opts\": PlainAnimation(chart_anim_opts).dump() if chart_anim_opts else \"undefined\", } Feature Bases: Method A class for dumping chart independent parameters to DisplayTemplate.FEATURE template. Source code in ipyvizzu/method.py class Feature(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.FEATURE][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, name: str, enabled: bool): \"\"\" Feature constructor. It stores and dumps `name` and `enabled` parameters. Args: name: The name of a chart feature. enabled: The new state of a chart feature. \"\"\" self._data = {\"name\": name, \"enabled\": json.dumps(enabled)} __init__(name, enabled) Feature constructor. It stores and dumps name and enabled parameters. Parameters: Name Type Description Default name str The name of a chart feature. required enabled bool The new state of a chart feature. required Source code in ipyvizzu/method.py def __init__(self, name: str, enabled: bool): \"\"\" Feature constructor. It stores and dumps `name` and `enabled` parameters. Args: name: The name of a chart feature. enabled: The new state of a chart feature. \"\"\" self._data = {\"name\": name, \"enabled\": json.dumps(enabled)} Store Bases: Method A class for dumping chart independent parameters to DisplayTemplate.STORE template. Source code in ipyvizzu/method.py class Store(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.STORE][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, snapshot_id: str): \"\"\" Store constructor. It stores and dumps `snapshot_id` parameter. Args: snapshot_id: The id of snapshot object. \"\"\" self._data = {\"id\": snapshot_id} __init__(snapshot_id) Store constructor. It stores and dumps snapshot_id parameter. Parameters: Name Type Description Default snapshot_id str The id of snapshot object. required Source code in ipyvizzu/method.py def __init__(self, snapshot_id: str): \"\"\" Store constructor. It stores and dumps `snapshot_id` parameter. Args: snapshot_id: The id of snapshot object. \"\"\" self._data = {\"id\": snapshot_id} EventOn Bases: Method A class for dumping chart independent parameters to DisplayTemplate.SET_EVENT template. Source code in ipyvizzu/method.py class EventOn(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.SET_EVENT][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, event_handler: EventHandler): \"\"\" EventOn constructor. It stores and dumps the `id`, the `event` and the `handler` of the event handler object. Args: event_handler: An event handler object. \"\"\" self._data = { \"id\": event_handler.id, \"event\": event_handler.event, \"handler\": event_handler.handler, } __init__(event_handler) EventOn constructor. It stores and dumps the id , the event and the handler of the event handler object. Parameters: Name Type Description Default event_handler EventHandler An event handler object. required Source code in ipyvizzu/method.py def __init__(self, event_handler: EventHandler): \"\"\" EventOn constructor. It stores and dumps the `id`, the `event` and the `handler` of the event handler object. Args: event_handler: An event handler object. \"\"\" self._data = { \"id\": event_handler.id, \"event\": event_handler.event, \"handler\": event_handler.handler, } EventOff Bases: Method A class for dumping chart independent parameters to DisplayTemplate.CLEAR_EVENT template. Source code in ipyvizzu/method.py class EventOff(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.CLEAR_EVENT][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, event_handler: EventHandler): \"\"\" EventOff constructor. It stores and dumps the `id` and the `event` of the event handler object. Args: event_handler: An event handler object. \"\"\" self._data = {\"id\": event_handler.id, \"event\": event_handler.event} __init__(event_handler) EventOff constructor. It stores and dumps the id and the event of the event handler object. Parameters: Name Type Description Default event_handler EventHandler An event handler object. required Source code in ipyvizzu/method.py def __init__(self, event_handler: EventHandler): \"\"\" EventOff constructor. It stores and dumps the `id` and the `event` of the event handler object. Args: event_handler: An event handler object. \"\"\" self._data = {\"id\": event_handler.id, \"event\": event_handler.event} Log Bases: Method A class for dumping chart independent parameters to DisplayTemplate.LOG template. Source code in ipyvizzu/method.py class Log(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.LOG][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, chart_property: ChartProperty): \"\"\" Log constructor. It stores and dumps the value of the chart property object. Args: chart_property: A chart property such as [CONFIG][ipyvizzu.template.ChartProperty] and [STYLE][ipyvizzu.template.ChartProperty]. \"\"\" self._data = {\"chart_property\": chart_property.value} __init__(chart_property) Log constructor. It stores and dumps the value of the chart property object. Parameters: Name Type Description Default chart_property ChartProperty A chart property such as CONFIG and STYLE . required Source code in ipyvizzu/method.py def __init__(self, chart_property: ChartProperty): \"\"\" Log constructor. It stores and dumps the value of the chart property object. Args: chart_property: A chart property such as [CONFIG][ipyvizzu.template.ChartProperty] and [STYLE][ipyvizzu.template.ChartProperty]. \"\"\" self._data = {\"chart_property\": chart_property.value} ipyvizzu.schema A module for storing the data schema. NAMED_SCHEMA: dict = {'type': 'array', 'items': {'type': 'object', 'properties': {'name': {'type': 'string'}, 'values': {'type': 'array', 'optional': True}, 'type': {'type': 'string', 'optional': True}}, 'required': ['name']}} module-attribute Store the schema of the series , dimensions and measures data types. RECORD_SCHEMA: dict = {'type': 'array', 'items': {'type': 'array'}} module-attribute Store the schema of the records data type. DATA_SCHEMA: dict = {'type': 'object', 'oneOf': [{'properties': {'series': NAMED_SCHEMA, 'records': RECORD_SCHEMA, 'filter': {'optional': True}}, 'additionalProperties': False}, {'properties': {'dimensions': NAMED_SCHEMA, 'measures': NAMED_SCHEMA, 'filter': {'optional': True}}, 'additionalProperties': False, 'required': ['dimensions', 'measures']}]} module-attribute Store the schema of the data animation. ipyvizzu.template A module for storing the JavaScript templates. ChartProperty Bases: Enum An enum class for storing chart properties. Source code in ipyvizzu/template.py class ChartProperty(Enum): \"\"\"An enum class for storing chart properties.\"\"\" CONFIG = \"config\" \"\"\"An enum key-value for storing config chart property.\"\"\" STYLE = \"style\" \"\"\"An enum key-value for storing style chart property.\"\"\" CONFIG = 'config' class-attribute An enum key-value for storing config chart property. STYLE = 'style' class-attribute An enum key-value for storing style chart property. DisplayTarget Bases: Enum An enum class for storing chart display options. Source code in ipyvizzu/template.py class DisplayTarget(Enum): \"\"\"An enum class for storing chart display options.\"\"\" BEGIN = \"begin\" \"\"\"Display all animation steps after the constructor's cell.\"\"\" END = \"end\" \"\"\"Display all animation steps after the last running cell.\"\"\" ACTUAL = \"actual\" \"\"\"Display the actual animation step after the currently running cell.\"\"\" MANUAL = \"manual\" \"\"\"Display all animation steps after calling a show method.\"\"\" BEGIN = 'begin' class-attribute Display all animation steps after the constructor's cell. END = 'end' class-attribute Display all animation steps after the last running cell. ACTUAL = 'actual' class-attribute Display the actual animation step after the currently running cell. MANUAL = 'manual' class-attribute Display all animation steps after calling a show method. DisplayTemplate A class for storing JavaScript snippet templates. Source code in ipyvizzu/template.py class DisplayTemplate: \"\"\"A class for storing JavaScript snippet templates.\"\"\" # pylint: disable=too-few-public-methods IPYVIZZUJS: str = \"{ipyvizzujs}\" \"\"\"ipyvizzu JavaScript class.\"\"\" INIT: str = ( \"window.ipyvizzu.createChart(element, \" + \"'{chart_id}', '{vizzu}', '{div_width}', '{div_height}');\" ) \"\"\"Call createChart JavaScript method.\"\"\" ANIMATE: str = ( \"window.ipyvizzu.animate(element, \" + \"'{chart_id}', '{display_target}', {scroll}, \" + \"lib => {{ return {chart_target} }}, {chart_anim_opts});\" ) \"\"\"Call animate JavaScript method.\"\"\" FEATURE: str = ( \"window.ipyvizzu.feature(element, '{chart_id}', '{name}', {enabled});\" ) \"\"\"Call feature JavaScript method.\"\"\" STORE: str = \"window.ipyvizzu.store(element, '{chart_id}', '{id}');\" \"\"\"Call store JavaScript method.\"\"\" SET_EVENT: str = ( \"window.ipyvizzu.setEvent(element, \" + \"'{chart_id}', '{id}', '{event}', event => {{ {handler} }});\" ) \"\"\"Call setEvent JavaScript method.\"\"\" CLEAR_EVENT: str = ( \"window.ipyvizzu.clearEvent(element, '{chart_id}', '{id}', '{event}');\" ) \"\"\"Call clearEvent JavaScript method.\"\"\" LOG: str = \"window.ipyvizzu.log(element, '{chart_id}', '{chart_property}');\" \"\"\"Call log JavaScript method.\"\"\" CLEAR_INHIBITSCROLL: str = ( \"if (window.IpyVizzu) { window.IpyVizzu.clearInhibitScroll(element); }\" ) \"\"\"Call clearInhibitScroll JavaScript method if ipyvizzu JavaScript class exists.\"\"\" IPYVIZZUJS: str = '{ipyvizzujs}' class-attribute ipyvizzu JavaScript class. INIT: str = 'window.ipyvizzu.createChart(element, ' + \"'{chart_id}', '{vizzu}', '{div_width}', '{div_height}');\" class-attribute Call createChart JavaScript method. ANIMATE: str = 'window.ipyvizzu.animate(element, ' + \"'{chart_id}', '{display_target}', {scroll}, \" + 'lib => {{ return {chart_target} }}, {chart_anim_opts});' class-attribute Call animate JavaScript method. FEATURE: str = \"window.ipyvizzu.feature(element, '{chart_id}', '{name}', {enabled});\" class-attribute Call feature JavaScript method. STORE: str = \"window.ipyvizzu.store(element, '{chart_id}', '{id}');\" class-attribute Call store JavaScript method. SET_EVENT: str = 'window.ipyvizzu.setEvent(element, ' + \"'{chart_id}', '{id}', '{event}', event => {{ {handler} }});\" class-attribute Call setEvent JavaScript method. CLEAR_EVENT: str = \"window.ipyvizzu.clearEvent(element, '{chart_id}', '{id}', '{event}');\" class-attribute Call clearEvent JavaScript method. LOG: str = \"window.ipyvizzu.log(element, '{chart_id}', '{chart_property}');\" class-attribute Call log JavaScript method. CLEAR_INHIBITSCROLL: str = 'if (window.IpyVizzu) { window.IpyVizzu.clearInhibitScroll(element); }' class-attribute Call clearInhibitScroll JavaScript method if ipyvizzu JavaScript class exists.","title":"Code reference"},{"location":"reference/ipyvizzu/#ipyvizzu","text":"Build animated charts in Jupyter Notebook and similar environments with a simple Python syntax.","title":"ipyvizzu"},{"location":"reference/ipyvizzu/#ipyvizzu.ChartProperty","text":"Bases: Enum An enum class for storing chart properties. Source code in ipyvizzu/template.py class ChartProperty(Enum): \"\"\"An enum class for storing chart properties.\"\"\" CONFIG = \"config\" \"\"\"An enum key-value for storing config chart property.\"\"\" STYLE = \"style\" \"\"\"An enum key-value for storing style chart property.\"\"\"","title":"ChartProperty"},{"location":"reference/ipyvizzu/#ipyvizzu.template.ChartProperty.CONFIG","text":"An enum key-value for storing config chart property.","title":"CONFIG"},{"location":"reference/ipyvizzu/#ipyvizzu.template.ChartProperty.STYLE","text":"An enum key-value for storing style chart property.","title":"STYLE"},{"location":"reference/ipyvizzu/#ipyvizzu.EventHandler","text":"A class for representing an event handler. Source code in ipyvizzu/event.py class EventHandler: \"\"\"A class for representing an event handler.\"\"\" def __init__(self, event: str, handler: str): \"\"\" EventHandler constructor. It generates a uuid for the event handler, stores the event type and the body of the handler function. Args: event: The type of the event. handler: The body of the handler function. \"\"\" self._id = uuid.uuid4().hex[:7] self._event = event self._handler = \" \".join(handler.split()) @property def id(self) -> str: # pylint: disable=invalid-name \"\"\" A property for storing an id. Returns: The uuid of the event handler. \"\"\" return self._id @property def event(self) -> str: \"\"\" A property for storing an event type. Returns: The type of the event. \"\"\" return self._event @property def handler(self) -> str: \"\"\" A property for storing an event handler function. Returns: The body of the handler function. \"\"\" return self._handler","title":"EventHandler"},{"location":"reference/ipyvizzu/#ipyvizzu.event.EventHandler.id","text":"A property for storing an id. Returns: Type Description str The uuid of the event handler.","title":"id"},{"location":"reference/ipyvizzu/#ipyvizzu.event.EventHandler.event","text":"A property for storing an event type. Returns: Type Description str The type of the event.","title":"event"},{"location":"reference/ipyvizzu/#ipyvizzu.event.EventHandler.handler","text":"A property for storing an event handler function. Returns: Type Description str The body of the handler function.","title":"handler"},{"location":"reference/ipyvizzu/#ipyvizzu.event.EventHandler.__init__","text":"EventHandler constructor. It generates a uuid for the event handler, stores the event type and the body of the handler function. Parameters: Name Type Description Default event str The type of the event. required handler str The body of the handler function. required Source code in ipyvizzu/event.py def __init__(self, event: str, handler: str): \"\"\" EventHandler constructor. It generates a uuid for the event handler, stores the event type and the body of the handler function. Args: event: The type of the event. handler: The body of the handler function. \"\"\" self._id = uuid.uuid4().hex[:7] self._event = event self._handler = \" \".join(handler.split())","title":"__init__()"},{"location":"reference/ipyvizzu/#ipyvizzu.RawJavaScript","text":"A class for representing raw JavaScript code. Source code in ipyvizzu/json.py class RawJavaScript: \"\"\"A class for representing raw JavaScript code.\"\"\" # pylint: disable=too-few-public-methods def __init__(self, raw: Optional[str]): \"\"\" RawJavaScript constructor. It stores raw JavaScript code as a string. Args: raw: JavaScript code as `str`. \"\"\" self._raw = raw @property def raw(self) -> Optional[str]: \"\"\" A property for storing raw JavaScript code as a string. Returns: Raw JavaScript code as `str`. \"\"\" return self._raw","title":"RawJavaScript"},{"location":"reference/ipyvizzu/#ipyvizzu.json.RawJavaScript.raw","text":"A property for storing raw JavaScript code as a string. Returns: Type Description Optional [ str ] Raw JavaScript code as str .","title":"raw"},{"location":"reference/ipyvizzu/#ipyvizzu.json.RawJavaScript.__init__","text":"RawJavaScript constructor. It stores raw JavaScript code as a string. Parameters: Name Type Description Default raw Optional [ str ] JavaScript code as str . required Source code in ipyvizzu/json.py def __init__(self, raw: Optional[str]): \"\"\" RawJavaScript constructor. It stores raw JavaScript code as a string. Args: raw: JavaScript code as `str`. \"\"\" self._raw = raw","title":"__init__()"},{"location":"reference/ipyvizzu/#ipyvizzu.Method","text":"A class for storing and dumping any kind of data. Source code in ipyvizzu/method.py class Method: \"\"\"A class for storing and dumping any kind of data.\"\"\" # pylint: disable=too-few-public-methods _data: dict def dump(self) -> dict: \"\"\" A method for returning the stored data. Returns: The stored data. \"\"\" return self._data","title":"Method"},{"location":"reference/ipyvizzu/#ipyvizzu.method.Method.dump","text":"A method for returning the stored data. Returns: Type Description dict The stored data. Source code in ipyvizzu/method.py def dump(self) -> dict: \"\"\" A method for returning the stored data. Returns: The stored data. \"\"\" return self._data","title":"dump()"},{"location":"reference/ipyvizzu/#ipyvizzu.Chart","text":"A class for representing a wrapper over Vizzu chart. Source code in ipyvizzu/chart.py class Chart: \"\"\"A class for representing a wrapper over Vizzu chart.\"\"\" VIZZU: str = \"https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js\" \"\"\"A variable for storing the default url of vizzu package.\"\"\" def __init__( self, vizzu: Optional[str] = VIZZU, width: Optional[str] = \"800px\", height: Optional[str] = \"480px\", display: Optional[Union[DisplayTarget, str]] = DisplayTarget.ACTUAL, ): \"\"\" Chart constructor. Args: vizzu: The url of Vizzu JavaScript package. width: The width of the chart. height: The height of the chart. display: The display behaviour of the chart. \"\"\" self._chart_id = uuid.uuid4().hex[:7] self._display_target = DisplayTarget(display) self._calls: List[str] = [] self._showed = False self._scroll_into_view = False ipyvizzurawjs = pkgutil.get_data(__name__, \"templates/ipyvizzu.js\") ipyvizzujs = ipyvizzurawjs.decode(\"utf-8\") # type: ignore self._display(DisplayTemplate.IPYVIZZUJS.format(ipyvizzujs=ipyvizzujs)) self._display( DisplayTemplate.INIT.format( chart_id=self._chart_id, vizzu=vizzu, div_width=width, div_height=height, ) ) if self._display_target != DisplayTarget.MANUAL: self._register_events() @staticmethod def _register_events() -> None: ipy = get_ipython() if ipy is not None: ipy.events.register(\"pre_run_cell\", Chart._register_pre_run_cell) @staticmethod def _register_pre_run_cell() -> None: display_javascript(DisplayTemplate.CLEAR_INHIBITSCROLL, raw=True) @property def scroll_into_view(self) -> bool: \"\"\" A property for turning on/off the scroll into view feature. Returns: The value of the property (default `False`). \"\"\" return self._scroll_into_view @scroll_into_view.setter def scroll_into_view(self, scroll_into_view: Optional[bool]): self._scroll_into_view = bool(scroll_into_view) def animate( self, *animations: Animation, **options: Optional[Union[str, int, float, dict]] ) -> None: \"\"\" A method for changing the state of the chart. Args: *animations: List of Animation objects such as [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style]. **options: Dictionary of animation options for example `duration=1`. Raises: ValueError: If `animations` is not set. Example: Reset the chart styles: chart.animate(Style(None)) \"\"\" if not animations: raise ValueError(\"No animation was set.\") animation = self._merge_animations(animations) animate = Animate(animation, options) self._display( DisplayTemplate.ANIMATE.format( display_target=self._display_target.value, chart_id=self._chart_id, scroll=str(self._scroll_into_view).lower(), **animate.dump(), ) ) @staticmethod def _merge_animations( animations: Tuple[Animation, ...], ) -> Union[Animation, AnimationMerger]: if len(animations) == 1: return animations[0] merger = AnimationMerger() for animation in animations: merger.merge(animation) return merger def feature(self, name: str, enabled: bool) -> None: \"\"\" A method for turning on/off features of the chart. Args: name: The name of the chart feature. enabled: The new state of the chart feature. Example: Turn on `tooltip` of the chart: chart.feature(\"tooltip\", True) \"\"\" self._display( DisplayTemplate.FEATURE.format( chart_id=self._chart_id, **Feature(name, enabled).dump(), ) ) def store(self) -> Snapshot: \"\"\" A method for saving and storing the actual state of the chart. Returns: A snapshot animation object wich stores the actual state of the chart. Example: Save and restore the actual state of the chart: snapshot = chart.store() ... chart.animate(snapshot) \"\"\" snapshot_id = uuid.uuid4().hex[:7] self._display( DisplayTemplate.STORE.format( chart_id=self._chart_id, **Store(snapshot_id).dump() ) ) return Snapshot(snapshot_id) def on( # pylint: disable=invalid-name self, event: str, handler: str ) -> EventHandler: \"\"\" A method for creating and turning on an event handler. Args: event: The type of the event. handler: The JavaScript method of the event. Returns: The turned on event handler object. Example: Turn on an event handler which prints an alert message when someone clicks on the chart: handler = chart.on(\"click\", \"alert(JSON.stringify(event.data));\") \"\"\" event_handler = EventHandler(event, handler) self._display( DisplayTemplate.SET_EVENT.format( chart_id=self._chart_id, **EventOn(event_handler).dump(), ) ) return event_handler def off(self, event_handler: EventHandler) -> None: \"\"\" A method for turning off an event handler. Args: event_handler: A previously created event handler object. Example: Turn off a previously created event handler: chart.off(handler) \"\"\" self._display( DisplayTemplate.CLEAR_EVENT.format( chart_id=self._chart_id, **EventOff(event_handler).dump(), ) ) def log(self, chart_property: ChartProperty) -> None: \"\"\" A method for printing chart properties to the browser console. Args: chart_property: A chart property such as [CONFIG][ipyvizzu.template.ChartProperty] and [STYLE][ipyvizzu.template.ChartProperty]. Example: Log the actual style of the chart to the browser console: chart.log(ChartProperty.STYLE) \"\"\" self._display( DisplayTemplate.LOG.format( chart_id=self._chart_id, **Log(chart_property).dump() ) ) def _repr_html_(self) -> str: assert ( self._display_target == DisplayTarget.MANUAL ), \"chart._repr_html_() can be used with display=DisplayTarget.MANUAL only\" assert not self._showed, \"cannot be used after chart displayed.\" self._showed = True html_id = uuid.uuid4().hex[:7] script = ( self._calls[0] + \"\\n\" + \"\\n\".join(self._calls[1:]).replace( \"element\", f'document.getElementById(\"{html_id}\")' ) ) return f'<div id=\"{html_id}\"><script>{script}</script></div>' def show(self) -> None: \"\"\" A method for displaying the assembled JavaScript code. Raises: AssertionError: If [display][ipyvizzu.Chart.__init__] is not [DisplayTarget.MANUAL][ipyvizzu.template.DisplayTarget]. AssertionError: If chart already has been displayed. \"\"\" assert ( self._display_target == DisplayTarget.MANUAL ), \"chart.show() can be used with display=DisplayTarget.MANUAL only\" assert not self._showed, \"cannot be used after chart displayed\" display_javascript( \"\\n\".join(self._calls), raw=True, ) self._showed = True def _display(self, javascript: str) -> None: if self._display_target != DisplayTarget.MANUAL: display_javascript( javascript, raw=True, ) else: assert not self._showed, \"cannot be used after chart displayed\" self._calls.append(javascript)","title":"Chart"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.VIZZU","text":"A variable for storing the default url of vizzu package.","title":"VIZZU"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.scroll_into_view","text":"A property for turning on/off the scroll into view feature. Returns: Type Description bool The value of the property (default False ).","title":"scroll_into_view"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.__init__","text":"Chart constructor. Parameters: Name Type Description Default vizzu Optional [ str ] The url of Vizzu JavaScript package. VIZZU width Optional [ str ] The width of the chart. '800px' height Optional [ str ] The height of the chart. '480px' display Optional [ Union [ DisplayTarget , str ]] The display behaviour of the chart. DisplayTarget.ACTUAL Source code in ipyvizzu/chart.py def __init__( self, vizzu: Optional[str] = VIZZU, width: Optional[str] = \"800px\", height: Optional[str] = \"480px\", display: Optional[Union[DisplayTarget, str]] = DisplayTarget.ACTUAL, ): \"\"\" Chart constructor. Args: vizzu: The url of Vizzu JavaScript package. width: The width of the chart. height: The height of the chart. display: The display behaviour of the chart. \"\"\" self._chart_id = uuid.uuid4().hex[:7] self._display_target = DisplayTarget(display) self._calls: List[str] = [] self._showed = False self._scroll_into_view = False ipyvizzurawjs = pkgutil.get_data(__name__, \"templates/ipyvizzu.js\") ipyvizzujs = ipyvizzurawjs.decode(\"utf-8\") # type: ignore self._display(DisplayTemplate.IPYVIZZUJS.format(ipyvizzujs=ipyvizzujs)) self._display( DisplayTemplate.INIT.format( chart_id=self._chart_id, vizzu=vizzu, div_width=width, div_height=height, ) ) if self._display_target != DisplayTarget.MANUAL: self._register_events()","title":"__init__()"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.animate","text":"A method for changing the state of the chart. Parameters: Name Type Description Default *animations Animation List of Animation objects such as Data , Config and Style . () **options Optional [ Union [ str , int , float , dict ]] Dictionary of animation options for example duration=1 . {} Raises: Type Description ValueError If animations is not set. Example Reset the chart styles: chart.animate(Style(None)) Source code in ipyvizzu/chart.py def animate( self, *animations: Animation, **options: Optional[Union[str, int, float, dict]] ) -> None: \"\"\" A method for changing the state of the chart. Args: *animations: List of Animation objects such as [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style]. **options: Dictionary of animation options for example `duration=1`. Raises: ValueError: If `animations` is not set. Example: Reset the chart styles: chart.animate(Style(None)) \"\"\" if not animations: raise ValueError(\"No animation was set.\") animation = self._merge_animations(animations) animate = Animate(animation, options) self._display( DisplayTemplate.ANIMATE.format( display_target=self._display_target.value, chart_id=self._chart_id, scroll=str(self._scroll_into_view).lower(), **animate.dump(), ) )","title":"animate()"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.feature","text":"A method for turning on/off features of the chart. Parameters: Name Type Description Default name str The name of the chart feature. required enabled bool The new state of the chart feature. required Example Turn on tooltip of the chart: chart.feature(\"tooltip\", True) Source code in ipyvizzu/chart.py def feature(self, name: str, enabled: bool) -> None: \"\"\" A method for turning on/off features of the chart. Args: name: The name of the chart feature. enabled: The new state of the chart feature. Example: Turn on `tooltip` of the chart: chart.feature(\"tooltip\", True) \"\"\" self._display( DisplayTemplate.FEATURE.format( chart_id=self._chart_id, **Feature(name, enabled).dump(), ) )","title":"feature()"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.store","text":"A method for saving and storing the actual state of the chart. Returns: Type Description Snapshot A snapshot animation object wich stores the actual state of the chart. Example Save and restore the actual state of the chart: snapshot = chart.store() ... chart.animate(snapshot) Source code in ipyvizzu/chart.py def store(self) -> Snapshot: \"\"\" A method for saving and storing the actual state of the chart. Returns: A snapshot animation object wich stores the actual state of the chart. Example: Save and restore the actual state of the chart: snapshot = chart.store() ... chart.animate(snapshot) \"\"\" snapshot_id = uuid.uuid4().hex[:7] self._display( DisplayTemplate.STORE.format( chart_id=self._chart_id, **Store(snapshot_id).dump() ) ) return Snapshot(snapshot_id)","title":"store()"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.on","text":"A method for creating and turning on an event handler. Parameters: Name Type Description Default event str The type of the event. required handler str The JavaScript method of the event. required Returns: Type Description EventHandler The turned on event handler object. Example Turn on an event handler which prints an alert message when someone clicks on the chart: handler = chart.on(\"click\", \"alert(JSON.stringify(event.data));\") Source code in ipyvizzu/chart.py def on( # pylint: disable=invalid-name self, event: str, handler: str ) -> EventHandler: \"\"\" A method for creating and turning on an event handler. Args: event: The type of the event. handler: The JavaScript method of the event. Returns: The turned on event handler object. Example: Turn on an event handler which prints an alert message when someone clicks on the chart: handler = chart.on(\"click\", \"alert(JSON.stringify(event.data));\") \"\"\" event_handler = EventHandler(event, handler) self._display( DisplayTemplate.SET_EVENT.format( chart_id=self._chart_id, **EventOn(event_handler).dump(), ) ) return event_handler","title":"on()"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.off","text":"A method for turning off an event handler. Parameters: Name Type Description Default event_handler EventHandler A previously created event handler object. required Example Turn off a previously created event handler: chart.off(handler) Source code in ipyvizzu/chart.py def off(self, event_handler: EventHandler) -> None: \"\"\" A method for turning off an event handler. Args: event_handler: A previously created event handler object. Example: Turn off a previously created event handler: chart.off(handler) \"\"\" self._display( DisplayTemplate.CLEAR_EVENT.format( chart_id=self._chart_id, **EventOff(event_handler).dump(), ) )","title":"off()"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.log","text":"A method for printing chart properties to the browser console. Parameters: Name Type Description Default chart_property ChartProperty A chart property such as CONFIG and STYLE . required Example Log the actual style of the chart to the browser console: chart.log(ChartProperty.STYLE) Source code in ipyvizzu/chart.py def log(self, chart_property: ChartProperty) -> None: \"\"\" A method for printing chart properties to the browser console. Args: chart_property: A chart property such as [CONFIG][ipyvizzu.template.ChartProperty] and [STYLE][ipyvizzu.template.ChartProperty]. Example: Log the actual style of the chart to the browser console: chart.log(ChartProperty.STYLE) \"\"\" self._display( DisplayTemplate.LOG.format( chart_id=self._chart_id, **Log(chart_property).dump() ) )","title":"log()"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.show","text":"A method for displaying the assembled JavaScript code. Raises: Type Description AssertionError If display is not DisplayTarget.MANUAL . AssertionError If chart already has been displayed. Source code in ipyvizzu/chart.py def show(self) -> None: \"\"\" A method for displaying the assembled JavaScript code. Raises: AssertionError: If [display][ipyvizzu.Chart.__init__] is not [DisplayTarget.MANUAL][ipyvizzu.template.DisplayTarget]. AssertionError: If chart already has been displayed. \"\"\" assert ( self._display_target == DisplayTarget.MANUAL ), \"chart.show() can be used with display=DisplayTarget.MANUAL only\" assert not self._showed, \"cannot be used after chart displayed\" display_javascript( \"\\n\".join(self._calls), raw=True, ) self._showed = True","title":"show()"},{"location":"reference/ipyvizzu/#ipyvizzu.DisplayTarget","text":"Bases: Enum An enum class for storing chart display options. Source code in ipyvizzu/template.py class DisplayTarget(Enum): \"\"\"An enum class for storing chart display options.\"\"\" BEGIN = \"begin\" \"\"\"Display all animation steps after the constructor's cell.\"\"\" END = \"end\" \"\"\"Display all animation steps after the last running cell.\"\"\" ACTUAL = \"actual\" \"\"\"Display the actual animation step after the currently running cell.\"\"\" MANUAL = \"manual\" \"\"\"Display all animation steps after calling a show method.\"\"\"","title":"DisplayTarget"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTarget.BEGIN","text":"Display all animation steps after the constructor's cell.","title":"BEGIN"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTarget.END","text":"Display all animation steps after the last running cell.","title":"END"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTarget.ACTUAL","text":"Display the actual animation step after the currently running cell.","title":"ACTUAL"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTarget.MANUAL","text":"Display all animation steps after calling a show method.","title":"MANUAL"},{"location":"reference/ipyvizzu/#ipyvizzu.Animation","text":"An abstract class for representing animation objects that have dump and build methods. Source code in ipyvizzu/animation.py class Animation: \"\"\" An abstract class for representing animation objects that have `dump` and `build` methods. \"\"\" def dump(self) -> str: \"\"\" A method for converting the built dictionary into string. Returns: An str that has been json dumped with [RawJavaScriptEncoder][ipyvizzu.json.RawJavaScriptEncoder] from a dictionary. \"\"\" return json.dumps(self.build(), cls=RawJavaScriptEncoder) @abc.abstractmethod def build(self) -> dict: \"\"\" An abstract method for returning a dictionary with values that can be converted into json string. Returns: A dictionary that stored in the animation object. \"\"\"","title":"Animation"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Animation.dump","text":"A method for converting the built dictionary into string. Returns: Type Description str An str that has been json dumped with RawJavaScriptEncoder from a dictionary. Source code in ipyvizzu/animation.py def dump(self) -> str: \"\"\" A method for converting the built dictionary into string. Returns: An str that has been json dumped with [RawJavaScriptEncoder][ipyvizzu.json.RawJavaScriptEncoder] from a dictionary. \"\"\" return json.dumps(self.build(), cls=RawJavaScriptEncoder)","title":"dump()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Animation.build","text":"An abstract method for returning a dictionary with values that can be converted into json string. Returns: Type Description dict A dictionary that stored in the animation object. Source code in ipyvizzu/animation.py @abc.abstractmethod def build(self) -> dict: \"\"\" An abstract method for returning a dictionary with values that can be converted into json string. Returns: A dictionary that stored in the animation object. \"\"\"","title":"build()"},{"location":"reference/ipyvizzu/#ipyvizzu.Animate","text":"Bases: Method A class for dumping chart independent parameters to DisplayTemplate.ANIMATE template. Source code in ipyvizzu/method.py class Animate(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.ANIMATE][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__( self, chart_target: Union[Animation, AnimationMerger], chart_anim_opts: Optional[dict] = None, ): \"\"\" Animate constructor. It stores and dumps `chart_target` and `chart_anim_opts` parameters. Args: chart_target: Animation object such as [Data][ipyvizzu.animation.Data] [Config][ipyvizzu.animation.Config] or [Style][ipyvizzu.animation.Style]. chart_anim_opts: Animation options' dictionary. If it is not set, it dumps `undefined`. \"\"\" self._data = { \"chart_target\": chart_target.dump(), \"chart_anim_opts\": PlainAnimation(chart_anim_opts).dump() if chart_anim_opts else \"undefined\", }","title":"Animate"},{"location":"reference/ipyvizzu/#ipyvizzu.method.Animate.__init__","text":"Animate constructor. It stores and dumps chart_target and chart_anim_opts parameters. Parameters: Name Type Description Default chart_target Union [ Animation , AnimationMerger ] Animation object such as Data Config or Style . required chart_anim_opts Optional [ dict ] Animation options' dictionary. If it is not set, it dumps undefined . None Source code in ipyvizzu/method.py def __init__( self, chart_target: Union[Animation, AnimationMerger], chart_anim_opts: Optional[dict] = None, ): \"\"\" Animate constructor. It stores and dumps `chart_target` and `chart_anim_opts` parameters. Args: chart_target: Animation object such as [Data][ipyvizzu.animation.Data] [Config][ipyvizzu.animation.Config] or [Style][ipyvizzu.animation.Style]. chart_anim_opts: Animation options' dictionary. If it is not set, it dumps `undefined`. \"\"\" self._data = { \"chart_target\": chart_target.dump(), \"chart_anim_opts\": PlainAnimation(chart_anim_opts).dump() if chart_anim_opts else \"undefined\", }","title":"__init__()"},{"location":"reference/ipyvizzu/#ipyvizzu.DisplayTemplate","text":"A class for storing JavaScript snippet templates. Source code in ipyvizzu/template.py class DisplayTemplate: \"\"\"A class for storing JavaScript snippet templates.\"\"\" # pylint: disable=too-few-public-methods IPYVIZZUJS: str = \"{ipyvizzujs}\" \"\"\"ipyvizzu JavaScript class.\"\"\" INIT: str = ( \"window.ipyvizzu.createChart(element, \" + \"'{chart_id}', '{vizzu}', '{div_width}', '{div_height}');\" ) \"\"\"Call createChart JavaScript method.\"\"\" ANIMATE: str = ( \"window.ipyvizzu.animate(element, \" + \"'{chart_id}', '{display_target}', {scroll}, \" + \"lib => {{ return {chart_target} }}, {chart_anim_opts});\" ) \"\"\"Call animate JavaScript method.\"\"\" FEATURE: str = ( \"window.ipyvizzu.feature(element, '{chart_id}', '{name}', {enabled});\" ) \"\"\"Call feature JavaScript method.\"\"\" STORE: str = \"window.ipyvizzu.store(element, '{chart_id}', '{id}');\" \"\"\"Call store JavaScript method.\"\"\" SET_EVENT: str = ( \"window.ipyvizzu.setEvent(element, \" + \"'{chart_id}', '{id}', '{event}', event => {{ {handler} }});\" ) \"\"\"Call setEvent JavaScript method.\"\"\" CLEAR_EVENT: str = ( \"window.ipyvizzu.clearEvent(element, '{chart_id}', '{id}', '{event}');\" ) \"\"\"Call clearEvent JavaScript method.\"\"\" LOG: str = \"window.ipyvizzu.log(element, '{chart_id}', '{chart_property}');\" \"\"\"Call log JavaScript method.\"\"\" CLEAR_INHIBITSCROLL: str = ( \"if (window.IpyVizzu) { window.IpyVizzu.clearInhibitScroll(element); }\" ) \"\"\"Call clearInhibitScroll JavaScript method if ipyvizzu JavaScript class exists.\"\"\"","title":"DisplayTemplate"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTemplate.IPYVIZZUJS","text":"ipyvizzu JavaScript class.","title":"IPYVIZZUJS"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTemplate.INIT","text":"Call createChart JavaScript method.","title":"INIT"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTemplate.ANIMATE","text":"Call animate JavaScript method.","title":"ANIMATE"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTemplate.FEATURE","text":"Call feature JavaScript method.","title":"FEATURE"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTemplate.STORE","text":"Call store JavaScript method.","title":"STORE"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTemplate.SET_EVENT","text":"Call setEvent JavaScript method.","title":"SET_EVENT"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTemplate.CLEAR_EVENT","text":"Call clearEvent JavaScript method.","title":"CLEAR_EVENT"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTemplate.LOG","text":"Call log JavaScript method.","title":"LOG"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTemplate.CLEAR_INHIBITSCROLL","text":"Call clearInhibitScroll JavaScript method if ipyvizzu JavaScript class exists.","title":"CLEAR_INHIBITSCROLL"},{"location":"reference/ipyvizzu/#ipyvizzu.RawJavaScriptEncoder","text":"Bases: json . JSONEncoder A class for representing a custom json encoder, it can encode objects that contain RawJavaScript values. Source code in ipyvizzu/json.py class RawJavaScriptEncoder(json.JSONEncoder): \"\"\" A class for representing a custom json encoder, it can encode objects that contain [RawJavaScript][ipyvizzu.json.RawJavaScript] values. \"\"\" def __init__(self, *args, **kwargs): \"\"\" RawJavaScriptEncoder constructor. It extends [JSONEncoder][json.JSONEncoder] with an instance variable (`_raw_replacements`). The `_raw_replacements` dictionary stores the `uuids` and JavaScript codes of the [RawJavaScript][ipyvizzu.json.RawJavaScript] objects. \"\"\" json.JSONEncoder.__init__(self, *args, **kwargs) self._raw_replacements = {} def default(self, o): \"\"\" Overrides [JSONEncoder.default][json.JSONEncoder.default] method. It replaces [RawJavaScript][ipyvizzu.json.RawJavaScript] object with `uuid` and it stores raw JavaScript code with `uuid` key in the `_raw_replacements` dictionary. \"\"\" if isinstance(o, RawJavaScript): key = uuid.uuid4().hex self._raw_replacements[key] = o.raw return key return json.JSONEncoder.default(self, o) def encode(self, o): \"\"\" Overrides [JSONEncoder.encode][json.JSONEncoder.encode] method. It replaces `uuids` with raw JavaScript code without apostrophes. \"\"\" result = json.JSONEncoder.encode(self, o) for key, val in self._raw_replacements.items(): result = result.replace(f'\"{key}\"', val) return result","title":"RawJavaScriptEncoder"},{"location":"reference/ipyvizzu/#ipyvizzu.json.RawJavaScriptEncoder.__init__","text":"RawJavaScriptEncoder constructor. It extends JSONEncoder with an instance variable ( _raw_replacements ). The _raw_replacements dictionary stores the uuids and JavaScript codes of the RawJavaScript objects. Source code in ipyvizzu/json.py def __init__(self, *args, **kwargs): \"\"\" RawJavaScriptEncoder constructor. It extends [JSONEncoder][json.JSONEncoder] with an instance variable (`_raw_replacements`). The `_raw_replacements` dictionary stores the `uuids` and JavaScript codes of the [RawJavaScript][ipyvizzu.json.RawJavaScript] objects. \"\"\" json.JSONEncoder.__init__(self, *args, **kwargs) self._raw_replacements = {}","title":"__init__()"},{"location":"reference/ipyvizzu/#ipyvizzu.json.RawJavaScriptEncoder.default","text":"Overrides JSONEncoder.default method. It replaces RawJavaScript object with uuid and it stores raw JavaScript code with uuid key in the _raw_replacements dictionary. Source code in ipyvizzu/json.py def default(self, o): \"\"\" Overrides [JSONEncoder.default][json.JSONEncoder.default] method. It replaces [RawJavaScript][ipyvizzu.json.RawJavaScript] object with `uuid` and it stores raw JavaScript code with `uuid` key in the `_raw_replacements` dictionary. \"\"\" if isinstance(o, RawJavaScript): key = uuid.uuid4().hex self._raw_replacements[key] = o.raw return key return json.JSONEncoder.default(self, o)","title":"default()"},{"location":"reference/ipyvizzu/#ipyvizzu.json.RawJavaScriptEncoder.encode","text":"Overrides JSONEncoder.encode method. It replaces uuids with raw JavaScript code without apostrophes. Source code in ipyvizzu/json.py def encode(self, o): \"\"\" Overrides [JSONEncoder.encode][json.JSONEncoder.encode] method. It replaces `uuids` with raw JavaScript code without apostrophes. \"\"\" result = json.JSONEncoder.encode(self, o) for key, val in self._raw_replacements.items(): result = result.replace(f'\"{key}\"', val) return result","title":"encode()"},{"location":"reference/ipyvizzu/#ipyvizzu.PlainAnimation","text":"Bases: dict , Animation A class for representing plain animation. It can build any dictionary. Source code in ipyvizzu/animation.py class PlainAnimation(dict, Animation): \"\"\" A class for representing plain animation. It can build any dictionary. \"\"\" def build(self) -> dict: \"\"\" A method for returning the plain animation dictionary. Returns: A dictionary that stored in the plain animation object. \"\"\" return self","title":"PlainAnimation"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.PlainAnimation.build","text":"A method for returning the plain animation dictionary. Returns: Type Description dict A dictionary that stored in the plain animation object. Source code in ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for returning the plain animation dictionary. Returns: A dictionary that stored in the plain animation object. \"\"\" return self","title":"build()"},{"location":"reference/ipyvizzu/#ipyvizzu.InferType","text":"Bases: Enum An enum class for storing data infer types. Source code in ipyvizzu/animation.py class InferType(Enum): \"\"\"An enum class for storing data infer types.\"\"\" DIMENSION = \"dimension\" \"\"\"An enum key-value for storing dimension infer type.\"\"\" MEASURE = \"measure\" \"\"\"An enum key-value for storing measure infer type.\"\"\"","title":"InferType"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.InferType.DIMENSION","text":"An enum key-value for storing dimension infer type.","title":"DIMENSION"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.InferType.MEASURE","text":"An enum key-value for storing measure infer type.","title":"MEASURE"},{"location":"reference/ipyvizzu/#ipyvizzu.Feature","text":"Bases: Method A class for dumping chart independent parameters to DisplayTemplate.FEATURE template. Source code in ipyvizzu/method.py class Feature(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.FEATURE][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, name: str, enabled: bool): \"\"\" Feature constructor. It stores and dumps `name` and `enabled` parameters. Args: name: The name of a chart feature. enabled: The new state of a chart feature. \"\"\" self._data = {\"name\": name, \"enabled\": json.dumps(enabled)}","title":"Feature"},{"location":"reference/ipyvizzu/#ipyvizzu.method.Feature.__init__","text":"Feature constructor. It stores and dumps name and enabled parameters. Parameters: Name Type Description Default name str The name of a chart feature. required enabled bool The new state of a chart feature. required Source code in ipyvizzu/method.py def __init__(self, name: str, enabled: bool): \"\"\" Feature constructor. It stores and dumps `name` and `enabled` parameters. Args: name: The name of a chart feature. enabled: The new state of a chart feature. \"\"\" self._data = {\"name\": name, \"enabled\": json.dumps(enabled)}","title":"__init__()"},{"location":"reference/ipyvizzu/#ipyvizzu.Data","text":"Bases: dict , Animation A class for representing data animation. It can build data option of the chart. Source code in ipyvizzu/animation.py class Data(dict, Animation): \"\"\" A class for representing data animation. It can build data option of the chart. \"\"\" @classmethod def filter(cls, filter_expr: Optional[str] = None): # -> Data: \"\"\" A class method for creating a [Data][ipyvizzu.animation.Data] class instance with a data filter. Args: filter_expr: The JavaScript data filter expression. Returns: (Data): A data animation instance that contains a data filter. Example: Create a [Data][ipyvizzu.animation.Data] class with a data filter: filter = Data.filter(\"record['Genres'] == 'Pop'\") \"\"\" data = cls() data.set_filter(filter_expr) return data def set_filter(self, filter_expr: Optional[str] = None) -> None: \"\"\" A method for adding a filter to an existing [Data][ipyvizzu.animation.Data] class instance. Args: filter_expr: The JavaScript data filter expression. Example: Add a data filter to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.set_filter(\"record['Genres'] == 'Pop'\") \"\"\" filter_expr_raw_js = ( RawJavaScript(f\"record => {{ return ({' '.join(filter_expr.split())}) }}\") if filter_expr is not None else filter_expr ) self.update({\"filter\": filter_expr_raw_js}) @classmethod def from_json(cls, filename: Union[str, bytes, PathLike]): # -> Data: \"\"\" A method for returning a [Data][ipyvizzu.animation.Data] class instance which has been created from a json file. Args: filename: The path of the data source json file. Returns: (Data): A data animation instance that has been created from a json file. \"\"\" with open(filename, \"r\", encoding=\"utf8\") as file_desc: return cls(json.load(file_desc)) def add_record(self, record: list) -> None: \"\"\" A method for adding a record to an existing [Data][ipyvizzu.animation.Data] class instance. Args: record: A list that contains data values. Example: Adding a record to a [Data][ipyvizzu.animation.Data] class instance: data = Data() record = [\"Pop\", \"Hard\", 114] data.add_record(record) \"\"\" self._add_value(\"records\", record) def add_records(self, records: List[list]) -> None: \"\"\" A method for adding records to an existing [Data][ipyvizzu.animation.Data] class instance. Args: records: A list that contains data records. Example: Adding records to a [Data][ipyvizzu.animation.Data] class instance: data = Data() records = [ [\"Pop\", \"Hard\", 114], [\"Rock\", \"Hard\", 96], [\"Pop\", \"Experimental\", 127], [\"Rock\", \"Experimental\", 83], ] data.add_records(records) \"\"\" list(map(self.add_record, records)) def add_series(self, name: str, values: Optional[list] = None, **kwargs) -> None: \"\"\" A method for adding a series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the series. values: The data values of the series. **kwargs (Optional): Arbitrary keyword arguments. For example infer type can be set with the `type` keywod argument. Example: Adding a series without values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series(\"Genres\") Adding a series without values and with infer type to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series(\"Kinds\", type=\"dimension\") Adding a series with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series( \"Popularity\", [114, 96, 127, 83] ) \"\"\" self._add_named_value(\"series\", name, values, **kwargs) def add_dimension(self, name: str, values: Optional[list] = None, **kwargs) -> None: \"\"\" A method for adding a dimension to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the dimension. values: The data values of the dimension. **kwargs (Optional): Arbitrary keyword arguments. Example: Adding a dimension with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_dimension(\"Genres\", [\"Pop\", \"Rock\"]) \"\"\" self._add_named_value(\"dimensions\", name, values, **kwargs) def add_measure(self, name: str, values: Optional[list] = None, **kwargs) -> None: \"\"\" A method for adding a measure to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the measure. values: The data values of the measure. **kwargs (Optional): Arbitrary keyword arguments. Example: Adding a measure with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_measure( \"Popularity\", [ [114, 96], [127, 83], ], ) \"\"\" self._add_named_value(\"measures\", name, values, **kwargs) def add_data_frame( self, data_frame: Union[pd.DataFrame, pd.Series], default_measure_value: Optional[Any] = 0, default_dimension_value: Optional[Any] = \"\", ) -> None: \"\"\" A method for adding data frame to an existing [Data][ipyvizzu.animation.Data] class instance. Args: data_frame: The pandas data frame object. default_measure_value: The default measure value to fill the empty values. default_dimension_value: The default dimension value to fill the empty values. Raises: TypeError: If `data_frame` is not instance of [pd.DataFrame][pandas.DataFrame] or [pd.Series][pandas.Series]. Example: Adding a data frame to a [Data][ipyvizzu.animation.Data] class instance: data_frame = pd.DataFrame( { \"Genres\": [\"Pop\", \"Rock\", \"Pop\", \"Rock\"], \"Kinds\": [\"Hard\", \"Hard\", \"Experimental\", \"Experimental\"], \"Popularity\": [114, 96, 127, 83], } ) data = Data() data.add_data_frame(data_frame) \"\"\" if not isinstance(data_frame, type(None)): if isinstance(data_frame, pd.Series): data_frame = pd.DataFrame(data_frame) if not isinstance(data_frame, pd.DataFrame): raise TypeError( \"data_frame must be instance of pandas.DataFrame or pandas.Series\" ) for name in data_frame.columns: values = [] if is_numeric_dtype(data_frame[name].dtype): infer_type = InferType.MEASURE values = ( data_frame[name] .fillna(default_measure_value) .astype(float) .values.tolist() ) else: infer_type = InferType.DIMENSION values = ( data_frame[name] .fillna(default_dimension_value) .astype(str) .values.tolist() ) self.add_series( name, values, type=infer_type.value, ) def add_data_frame_index( self, data_frame: Union[pd.DataFrame, pd.Series], name: Optional[str], ) -> None: \"\"\" A method for adding data frame's index to an existing [Data][ipyvizzu.animation.Data] class instance. Args: data_frame: The pandas data frame object. name: The name of the index series. Raises: TypeError: If `data_frame` is not instance of [pd.DataFrame][pandas.DataFrame] or [pd.Series][pandas.Series]. Example: Adding a data frame's index to a [Data][ipyvizzu.animation.Data] class instance: data_frame = pd.DataFrame( {\"Popularity\": [114, 96]}, index=[\"x\", \"y\"] ) data = Data() data.add_data_frame_index(data_frame, \"DataFrameIndex\") data.add_data_frame(data_frame) \"\"\" if data_frame is not None: if isinstance(data_frame, pd.Series): data_frame = pd.DataFrame(data_frame) if not isinstance(data_frame, pd.DataFrame): raise TypeError( \"data_frame must be instance of pandas.DataFrame or pandas.Series\" ) self.add_series( str(name), [str(i) for i in data_frame.index], type=InferType.DIMENSION.value, ) def _add_named_value( self, dest: str, name: str, values: Optional[list] = None, **kwargs ) -> None: value = {\"name\": name, **kwargs} if values is not None: value[\"values\"] = values # type: ignore self._add_value(dest, value) def _add_value(self, dest: str, value: Union[dict, list]) -> None: self.setdefault(dest, []).append(value) def build(self) -> dict: \"\"\" A method for validating and returning the data animation dictionary. Returns: A dictionary that stored in the data animation object. It contains a `data` key whose value is the stored animation. \"\"\" jsonschema.validate(self, DATA_SCHEMA) return {\"data\": self}","title":"Data"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.filter","text":"A class method for creating a Data class instance with a data filter. Parameters: Name Type Description Default filter_expr Optional [ str ] The JavaScript data filter expression. None Returns: Type Description Data A data animation instance that contains a data filter. Example Create a Data class with a data filter: filter = Data.filter(\"record['Genres'] == 'Pop'\") Source code in ipyvizzu/animation.py @classmethod def filter(cls, filter_expr: Optional[str] = None): # -> Data: \"\"\" A class method for creating a [Data][ipyvizzu.animation.Data] class instance with a data filter. Args: filter_expr: The JavaScript data filter expression. Returns: (Data): A data animation instance that contains a data filter. Example: Create a [Data][ipyvizzu.animation.Data] class with a data filter: filter = Data.filter(\"record['Genres'] == 'Pop'\") \"\"\" data = cls() data.set_filter(filter_expr) return data","title":"filter()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.set_filter","text":"A method for adding a filter to an existing Data class instance. Parameters: Name Type Description Default filter_expr Optional [ str ] The JavaScript data filter expression. None Example Add a data filter to a Data class instance: data = Data() data.set_filter(\"record['Genres'] == 'Pop'\") Source code in ipyvizzu/animation.py def set_filter(self, filter_expr: Optional[str] = None) -> None: \"\"\" A method for adding a filter to an existing [Data][ipyvizzu.animation.Data] class instance. Args: filter_expr: The JavaScript data filter expression. Example: Add a data filter to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.set_filter(\"record['Genres'] == 'Pop'\") \"\"\" filter_expr_raw_js = ( RawJavaScript(f\"record => {{ return ({' '.join(filter_expr.split())}) }}\") if filter_expr is not None else filter_expr ) self.update({\"filter\": filter_expr_raw_js})","title":"set_filter()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.from_json","text":"A method for returning a Data class instance which has been created from a json file. Parameters: Name Type Description Default filename Union [ str , bytes , PathLike ] The path of the data source json file. required Returns: Type Description Data A data animation instance that has been created from a json file. Source code in ipyvizzu/animation.py @classmethod def from_json(cls, filename: Union[str, bytes, PathLike]): # -> Data: \"\"\" A method for returning a [Data][ipyvizzu.animation.Data] class instance which has been created from a json file. Args: filename: The path of the data source json file. Returns: (Data): A data animation instance that has been created from a json file. \"\"\" with open(filename, \"r\", encoding=\"utf8\") as file_desc: return cls(json.load(file_desc))","title":"from_json()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.add_record","text":"A method for adding a record to an existing Data class instance. Parameters: Name Type Description Default record list A list that contains data values. required Example Adding a record to a Data class instance: data = Data() record = [\"Pop\", \"Hard\", 114] data.add_record(record) Source code in ipyvizzu/animation.py def add_record(self, record: list) -> None: \"\"\" A method for adding a record to an existing [Data][ipyvizzu.animation.Data] class instance. Args: record: A list that contains data values. Example: Adding a record to a [Data][ipyvizzu.animation.Data] class instance: data = Data() record = [\"Pop\", \"Hard\", 114] data.add_record(record) \"\"\" self._add_value(\"records\", record)","title":"add_record()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.add_records","text":"A method for adding records to an existing Data class instance. Parameters: Name Type Description Default records List [ list ] A list that contains data records. required Example Adding records to a Data class instance: data = Data() records = [ [\"Pop\", \"Hard\", 114], [\"Rock\", \"Hard\", 96], [\"Pop\", \"Experimental\", 127], [\"Rock\", \"Experimental\", 83], ] data.add_records(records) Source code in ipyvizzu/animation.py def add_records(self, records: List[list]) -> None: \"\"\" A method for adding records to an existing [Data][ipyvizzu.animation.Data] class instance. Args: records: A list that contains data records. Example: Adding records to a [Data][ipyvizzu.animation.Data] class instance: data = Data() records = [ [\"Pop\", \"Hard\", 114], [\"Rock\", \"Hard\", 96], [\"Pop\", \"Experimental\", 127], [\"Rock\", \"Experimental\", 83], ] data.add_records(records) \"\"\" list(map(self.add_record, records))","title":"add_records()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.add_series","text":"A method for adding a series to an existing Data class instance. Parameters: Name Type Description Default name str The name of the series. required values Optional [ list ] The data values of the series. None **kwargs Optional Arbitrary keyword arguments. For example infer type can be set with the type keywod argument. {} Example Adding a series without values to a Data class instance: data = Data() data.add_series(\"Genres\") Adding a series without values and with infer type to a Data class instance: data = Data() data.add_series(\"Kinds\", type=\"dimension\") Adding a series with values to a Data class instance: data = Data() data.add_series( \"Popularity\", [114, 96, 127, 83] ) Source code in ipyvizzu/animation.py def add_series(self, name: str, values: Optional[list] = None, **kwargs) -> None: \"\"\" A method for adding a series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the series. values: The data values of the series. **kwargs (Optional): Arbitrary keyword arguments. For example infer type can be set with the `type` keywod argument. Example: Adding a series without values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series(\"Genres\") Adding a series without values and with infer type to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series(\"Kinds\", type=\"dimension\") Adding a series with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series( \"Popularity\", [114, 96, 127, 83] ) \"\"\" self._add_named_value(\"series\", name, values, **kwargs)","title":"add_series()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.add_dimension","text":"A method for adding a dimension to an existing Data class instance. Parameters: Name Type Description Default name str The name of the dimension. required values Optional [ list ] The data values of the dimension. None **kwargs Optional Arbitrary keyword arguments. {} Example Adding a dimension with values to a Data class instance: data = Data() data.add_dimension(\"Genres\", [\"Pop\", \"Rock\"]) Source code in ipyvizzu/animation.py def add_dimension(self, name: str, values: Optional[list] = None, **kwargs) -> None: \"\"\" A method for adding a dimension to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the dimension. values: The data values of the dimension. **kwargs (Optional): Arbitrary keyword arguments. Example: Adding a dimension with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_dimension(\"Genres\", [\"Pop\", \"Rock\"]) \"\"\" self._add_named_value(\"dimensions\", name, values, **kwargs)","title":"add_dimension()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.add_measure","text":"A method for adding a measure to an existing Data class instance. Parameters: Name Type Description Default name str The name of the measure. required values Optional [ list ] The data values of the measure. None **kwargs Optional Arbitrary keyword arguments. {} Example Adding a measure with values to a Data class instance: data = Data() data.add_measure( \"Popularity\", [ [114, 96], [127, 83], ], ) Source code in ipyvizzu/animation.py def add_measure(self, name: str, values: Optional[list] = None, **kwargs) -> None: \"\"\" A method for adding a measure to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the measure. values: The data values of the measure. **kwargs (Optional): Arbitrary keyword arguments. Example: Adding a measure with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_measure( \"Popularity\", [ [114, 96], [127, 83], ], ) \"\"\" self._add_named_value(\"measures\", name, values, **kwargs)","title":"add_measure()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.add_data_frame","text":"A method for adding data frame to an existing Data class instance. Parameters: Name Type Description Default data_frame Union [ pd . DataFrame , pd . Series ] The pandas data frame object. required default_measure_value Optional [ Any ] The default measure value to fill the empty values. 0 default_dimension_value Optional [ Any ] The default dimension value to fill the empty values. '' Raises: Type Description TypeError If data_frame is not instance of pd.DataFrame or pd.Series . Example Adding a data frame to a Data class instance: data_frame = pd.DataFrame( { \"Genres\": [\"Pop\", \"Rock\", \"Pop\", \"Rock\"], \"Kinds\": [\"Hard\", \"Hard\", \"Experimental\", \"Experimental\"], \"Popularity\": [114, 96, 127, 83], } ) data = Data() data.add_data_frame(data_frame) Source code in ipyvizzu/animation.py def add_data_frame( self, data_frame: Union[pd.DataFrame, pd.Series], default_measure_value: Optional[Any] = 0, default_dimension_value: Optional[Any] = \"\", ) -> None: \"\"\" A method for adding data frame to an existing [Data][ipyvizzu.animation.Data] class instance. Args: data_frame: The pandas data frame object. default_measure_value: The default measure value to fill the empty values. default_dimension_value: The default dimension value to fill the empty values. Raises: TypeError: If `data_frame` is not instance of [pd.DataFrame][pandas.DataFrame] or [pd.Series][pandas.Series]. Example: Adding a data frame to a [Data][ipyvizzu.animation.Data] class instance: data_frame = pd.DataFrame( { \"Genres\": [\"Pop\", \"Rock\", \"Pop\", \"Rock\"], \"Kinds\": [\"Hard\", \"Hard\", \"Experimental\", \"Experimental\"], \"Popularity\": [114, 96, 127, 83], } ) data = Data() data.add_data_frame(data_frame) \"\"\" if not isinstance(data_frame, type(None)): if isinstance(data_frame, pd.Series): data_frame = pd.DataFrame(data_frame) if not isinstance(data_frame, pd.DataFrame): raise TypeError( \"data_frame must be instance of pandas.DataFrame or pandas.Series\" ) for name in data_frame.columns: values = [] if is_numeric_dtype(data_frame[name].dtype): infer_type = InferType.MEASURE values = ( data_frame[name] .fillna(default_measure_value) .astype(float) .values.tolist() ) else: infer_type = InferType.DIMENSION values = ( data_frame[name] .fillna(default_dimension_value) .astype(str) .values.tolist() ) self.add_series( name, values, type=infer_type.value, )","title":"add_data_frame()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.add_data_frame_index","text":"A method for adding data frame's index to an existing Data class instance. Parameters: Name Type Description Default data_frame Union [ pd . DataFrame , pd . Series ] The pandas data frame object. required name Optional [ str ] The name of the index series. required Raises: Type Description TypeError If data_frame is not instance of pd.DataFrame or pd.Series . Example Adding a data frame's index to a Data class instance: data_frame = pd.DataFrame( {\"Popularity\": [114, 96]}, index=[\"x\", \"y\"] ) data = Data() data.add_data_frame_index(data_frame, \"DataFrameIndex\") data.add_data_frame(data_frame) Source code in ipyvizzu/animation.py def add_data_frame_index( self, data_frame: Union[pd.DataFrame, pd.Series], name: Optional[str], ) -> None: \"\"\" A method for adding data frame's index to an existing [Data][ipyvizzu.animation.Data] class instance. Args: data_frame: The pandas data frame object. name: The name of the index series. Raises: TypeError: If `data_frame` is not instance of [pd.DataFrame][pandas.DataFrame] or [pd.Series][pandas.Series]. Example: Adding a data frame's index to a [Data][ipyvizzu.animation.Data] class instance: data_frame = pd.DataFrame( {\"Popularity\": [114, 96]}, index=[\"x\", \"y\"] ) data = Data() data.add_data_frame_index(data_frame, \"DataFrameIndex\") data.add_data_frame(data_frame) \"\"\" if data_frame is not None: if isinstance(data_frame, pd.Series): data_frame = pd.DataFrame(data_frame) if not isinstance(data_frame, pd.DataFrame): raise TypeError( \"data_frame must be instance of pandas.DataFrame or pandas.Series\" ) self.add_series( str(name), [str(i) for i in data_frame.index], type=InferType.DIMENSION.value, )","title":"add_data_frame_index()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.build","text":"A method for validating and returning the data animation dictionary. Returns: Type Description dict A dictionary that stored in the data animation object. It contains a data key whose value is the stored animation. Source code in ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for validating and returning the data animation dictionary. Returns: A dictionary that stored in the data animation object. It contains a `data` key whose value is the stored animation. \"\"\" jsonschema.validate(self, DATA_SCHEMA) return {\"data\": self}","title":"build()"},{"location":"reference/ipyvizzu/#ipyvizzu.Store","text":"Bases: Method A class for dumping chart independent parameters to DisplayTemplate.STORE template. Source code in ipyvizzu/method.py class Store(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.STORE][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, snapshot_id: str): \"\"\" Store constructor. It stores and dumps `snapshot_id` parameter. Args: snapshot_id: The id of snapshot object. \"\"\" self._data = {\"id\": snapshot_id}","title":"Store"},{"location":"reference/ipyvizzu/#ipyvizzu.method.Store.__init__","text":"Store constructor. It stores and dumps snapshot_id parameter. Parameters: Name Type Description Default snapshot_id str The id of snapshot object. required Source code in ipyvizzu/method.py def __init__(self, snapshot_id: str): \"\"\" Store constructor. It stores and dumps `snapshot_id` parameter. Args: snapshot_id: The id of snapshot object. \"\"\" self._data = {\"id\": snapshot_id}","title":"__init__()"},{"location":"reference/ipyvizzu/#ipyvizzu.EventOn","text":"Bases: Method A class for dumping chart independent parameters to DisplayTemplate.SET_EVENT template. Source code in ipyvizzu/method.py class EventOn(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.SET_EVENT][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, event_handler: EventHandler): \"\"\" EventOn constructor. It stores and dumps the `id`, the `event` and the `handler` of the event handler object. Args: event_handler: An event handler object. \"\"\" self._data = { \"id\": event_handler.id, \"event\": event_handler.event, \"handler\": event_handler.handler, }","title":"EventOn"},{"location":"reference/ipyvizzu/#ipyvizzu.method.EventOn.__init__","text":"EventOn constructor. It stores and dumps the id , the event and the handler of the event handler object. Parameters: Name Type Description Default event_handler EventHandler An event handler object. required Source code in ipyvizzu/method.py def __init__(self, event_handler: EventHandler): \"\"\" EventOn constructor. It stores and dumps the `id`, the `event` and the `handler` of the event handler object. Args: event_handler: An event handler object. \"\"\" self._data = { \"id\": event_handler.id, \"event\": event_handler.event, \"handler\": event_handler.handler, }","title":"__init__()"},{"location":"reference/ipyvizzu/#ipyvizzu.EventOff","text":"Bases: Method A class for dumping chart independent parameters to DisplayTemplate.CLEAR_EVENT template. Source code in ipyvizzu/method.py class EventOff(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.CLEAR_EVENT][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, event_handler: EventHandler): \"\"\" EventOff constructor. It stores and dumps the `id` and the `event` of the event handler object. Args: event_handler: An event handler object. \"\"\" self._data = {\"id\": event_handler.id, \"event\": event_handler.event}","title":"EventOff"},{"location":"reference/ipyvizzu/#ipyvizzu.method.EventOff.__init__","text":"EventOff constructor. It stores and dumps the id and the event of the event handler object. Parameters: Name Type Description Default event_handler EventHandler An event handler object. required Source code in ipyvizzu/method.py def __init__(self, event_handler: EventHandler): \"\"\" EventOff constructor. It stores and dumps the `id` and the `event` of the event handler object. Args: event_handler: An event handler object. \"\"\" self._data = {\"id\": event_handler.id, \"event\": event_handler.event}","title":"__init__()"},{"location":"reference/ipyvizzu/#ipyvizzu.Log","text":"Bases: Method A class for dumping chart independent parameters to DisplayTemplate.LOG template. Source code in ipyvizzu/method.py class Log(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.LOG][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, chart_property: ChartProperty): \"\"\" Log constructor. It stores and dumps the value of the chart property object. Args: chart_property: A chart property such as [CONFIG][ipyvizzu.template.ChartProperty] and [STYLE][ipyvizzu.template.ChartProperty]. \"\"\" self._data = {\"chart_property\": chart_property.value}","title":"Log"},{"location":"reference/ipyvizzu/#ipyvizzu.method.Log.__init__","text":"Log constructor. It stores and dumps the value of the chart property object. Parameters: Name Type Description Default chart_property ChartProperty A chart property such as CONFIG and STYLE . required Source code in ipyvizzu/method.py def __init__(self, chart_property: ChartProperty): \"\"\" Log constructor. It stores and dumps the value of the chart property object. Args: chart_property: A chart property such as [CONFIG][ipyvizzu.template.ChartProperty] and [STYLE][ipyvizzu.template.ChartProperty]. \"\"\" self._data = {\"chart_property\": chart_property.value}","title":"__init__()"},{"location":"reference/ipyvizzu/#ipyvizzu.Config","text":"Bases: Animation A class for representing config animation. It can build config option of the chart. Source code in ipyvizzu/animation.py class Config(Animation, metaclass=ConfigAttr): \"\"\" A class for representing config animation. It can build config option of the chart. \"\"\" def __init__(self, data: Optional[dict]): \"\"\" Config constructor. Args: data: A config animation dictionary. \"\"\" self._data = data def build(self) -> dict: \"\"\" A method for returning the config animation dictionary. Returns: A dictionary that stored in the config animation object. It contains a `config` key whose value is the stored animation. \"\"\" return {\"config\": self._data}","title":"Config"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Config.__init__","text":"Config constructor. Parameters: Name Type Description Default data Optional [ dict ] A config animation dictionary. required Source code in ipyvizzu/animation.py def __init__(self, data: Optional[dict]): \"\"\" Config constructor. Args: data: A config animation dictionary. \"\"\" self._data = data","title":"__init__()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Config.build","text":"A method for returning the config animation dictionary. Returns: Type Description dict A dictionary that stored in the config animation object. It contains a config key whose value is the stored animation. Source code in ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for returning the config animation dictionary. Returns: A dictionary that stored in the config animation object. It contains a `config` key whose value is the stored animation. \"\"\" return {\"config\": self._data}","title":"build()"},{"location":"reference/ipyvizzu/#ipyvizzu.Style","text":"Bases: Animation A class for representing style animation. It can build style option of the chart. Source code in ipyvizzu/animation.py class Style(Animation): \"\"\" A class for representing style animation. It can build style option of the chart. \"\"\" def __init__(self, data: Optional[dict]): \"\"\" Style constructor. Args: data: A style animation dictionary. \"\"\" self._data = data def build(self) -> dict: \"\"\" A method for returning the style animation dictionary. Returns: A dictionary that stored in the style animation object. It contains a `style` key whose value is the stored animation. \"\"\" return {\"style\": self._data}","title":"Style"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Style.__init__","text":"Style constructor. Parameters: Name Type Description Default data Optional [ dict ] A style animation dictionary. required Source code in ipyvizzu/animation.py def __init__(self, data: Optional[dict]): \"\"\" Style constructor. Args: data: A style animation dictionary. \"\"\" self._data = data","title":"__init__()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Style.build","text":"A method for returning the style animation dictionary. Returns: Type Description dict A dictionary that stored in the style animation object. It contains a style key whose value is the stored animation. Source code in ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for returning the style animation dictionary. Returns: A dictionary that stored in the style animation object. It contains a `style` key whose value is the stored animation. \"\"\" return {\"style\": self._data}","title":"build()"},{"location":"reference/ipyvizzu/#ipyvizzu.Snapshot","text":"Bases: Animation A class for representing snapshot animation. It can build the snapshot id of the chart. Source code in ipyvizzu/animation.py class Snapshot(Animation): \"\"\" A class for representing snapshot animation. It can build the snapshot id of the chart. \"\"\" def __init__(self, name: str): \"\"\" Snapshot constructor. Args: name: A snapshot id. \"\"\" self._name = name def dump(self) -> str: \"\"\" A method for overwriting the [Animation.dump][ipyvizzu.animation.Animation.dump] method. It dumps the stored snapshot id as a string. Returns: An str that contains the stored snapshot id. \"\"\" return f\"'{self._name}'\" def build(self): \"\"\" A method for preventing to merge [Snapshot][ipyvizzu.animation.Snapshot] with other animations. Raises: NotImplementedError: If the [build][ipyvizzu.animation.Snapshot.build] method has been called, because [Snapshot][ipyvizzu.animation.Snapshot] cannot be merged with other animations. \"\"\" raise NotImplementedError(\"Snapshot cannot be merged with other animations\")","title":"Snapshot"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Snapshot.__init__","text":"Snapshot constructor. Parameters: Name Type Description Default name str A snapshot id. required Source code in ipyvizzu/animation.py def __init__(self, name: str): \"\"\" Snapshot constructor. Args: name: A snapshot id. \"\"\" self._name = name","title":"__init__()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Snapshot.dump","text":"A method for overwriting the Animation.dump method. It dumps the stored snapshot id as a string. Returns: Type Description str An str that contains the stored snapshot id. Source code in ipyvizzu/animation.py def dump(self) -> str: \"\"\" A method for overwriting the [Animation.dump][ipyvizzu.animation.Animation.dump] method. It dumps the stored snapshot id as a string. Returns: An str that contains the stored snapshot id. \"\"\" return f\"'{self._name}'\"","title":"dump()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Snapshot.build","text":"A method for preventing to merge Snapshot with other animations. Raises: Type Description NotImplementedError If the build method has been called, because Snapshot cannot be merged with other animations. Source code in ipyvizzu/animation.py def build(self): \"\"\" A method for preventing to merge [Snapshot][ipyvizzu.animation.Snapshot] with other animations. Raises: NotImplementedError: If the [build][ipyvizzu.animation.Snapshot.build] method has been called, because [Snapshot][ipyvizzu.animation.Snapshot] cannot be merged with other animations. \"\"\" raise NotImplementedError(\"Snapshot cannot be merged with other animations\")","title":"build()"},{"location":"reference/ipyvizzu/#ipyvizzu.AnimationMerger","text":"Bases: dict , Animation A class for merging different types of animations. Source code in ipyvizzu/animation.py class AnimationMerger(dict, Animation): \"\"\"A class for merging different types of animations.\"\"\" def merge(self, animation: Animation) -> None: \"\"\" A method for merging an animation with the previously merged animations. Args: animation: An animation to be merged with with previously merged animations. Raises: ValueError: If the type of an animation is already merged. \"\"\" data = self._validate(animation) self.update(data) def _validate(self, animation: Animation) -> dict: data = animation.build() common_keys = set(data).intersection(self) if common_keys: raise ValueError(f\"Animation is already merged: {common_keys}\") return data def build(self) -> dict: \"\"\" A method for returning a merged dictionary from different types of animations. Returns: A merged dictionary from [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style] animations. \"\"\" return self","title":"AnimationMerger"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.AnimationMerger.merge","text":"A method for merging an animation with the previously merged animations. Parameters: Name Type Description Default animation Animation An animation to be merged with with previously merged animations. required Raises: Type Description ValueError If the type of an animation is already merged. Source code in ipyvizzu/animation.py def merge(self, animation: Animation) -> None: \"\"\" A method for merging an animation with the previously merged animations. Args: animation: An animation to be merged with with previously merged animations. Raises: ValueError: If the type of an animation is already merged. \"\"\" data = self._validate(animation) self.update(data)","title":"merge()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.AnimationMerger.build","text":"A method for returning a merged dictionary from different types of animations. Returns: Type Description dict A merged dictionary from Data , Config and Style animations. Source code in ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for returning a merged dictionary from different types of animations. Returns: A merged dictionary from [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style] animations. \"\"\" return self","title":"build()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation","text":"A module for working with chart animations.","title":"animation"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Animation","text":"An abstract class for representing animation objects that have dump and build methods. Source code in ipyvizzu/animation.py class Animation: \"\"\" An abstract class for representing animation objects that have `dump` and `build` methods. \"\"\" def dump(self) -> str: \"\"\" A method for converting the built dictionary into string. Returns: An str that has been json dumped with [RawJavaScriptEncoder][ipyvizzu.json.RawJavaScriptEncoder] from a dictionary. \"\"\" return json.dumps(self.build(), cls=RawJavaScriptEncoder) @abc.abstractmethod def build(self) -> dict: \"\"\" An abstract method for returning a dictionary with values that can be converted into json string. Returns: A dictionary that stored in the animation object. \"\"\"","title":"Animation"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Animation.dump","text":"A method for converting the built dictionary into string. Returns: Type Description str An str that has been json dumped with RawJavaScriptEncoder from a dictionary. Source code in ipyvizzu/animation.py def dump(self) -> str: \"\"\" A method for converting the built dictionary into string. Returns: An str that has been json dumped with [RawJavaScriptEncoder][ipyvizzu.json.RawJavaScriptEncoder] from a dictionary. \"\"\" return json.dumps(self.build(), cls=RawJavaScriptEncoder)","title":"dump()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Animation.build","text":"An abstract method for returning a dictionary with values that can be converted into json string. Returns: Type Description dict A dictionary that stored in the animation object. Source code in ipyvizzu/animation.py @abc.abstractmethod def build(self) -> dict: \"\"\" An abstract method for returning a dictionary with values that can be converted into json string. Returns: A dictionary that stored in the animation object. \"\"\"","title":"build()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.PlainAnimation","text":"Bases: dict , Animation A class for representing plain animation. It can build any dictionary. Source code in ipyvizzu/animation.py class PlainAnimation(dict, Animation): \"\"\" A class for representing plain animation. It can build any dictionary. \"\"\" def build(self) -> dict: \"\"\" A method for returning the plain animation dictionary. Returns: A dictionary that stored in the plain animation object. \"\"\" return self","title":"PlainAnimation"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.PlainAnimation.build","text":"A method for returning the plain animation dictionary. Returns: Type Description dict A dictionary that stored in the plain animation object. Source code in ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for returning the plain animation dictionary. Returns: A dictionary that stored in the plain animation object. \"\"\" return self","title":"build()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.InferType","text":"Bases: Enum An enum class for storing data infer types. Source code in ipyvizzu/animation.py class InferType(Enum): \"\"\"An enum class for storing data infer types.\"\"\" DIMENSION = \"dimension\" \"\"\"An enum key-value for storing dimension infer type.\"\"\" MEASURE = \"measure\" \"\"\"An enum key-value for storing measure infer type.\"\"\"","title":"InferType"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.InferType.DIMENSION","text":"An enum key-value for storing dimension infer type.","title":"DIMENSION"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.InferType.MEASURE","text":"An enum key-value for storing measure infer type.","title":"MEASURE"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data","text":"Bases: dict , Animation A class for representing data animation. It can build data option of the chart. Source code in ipyvizzu/animation.py class Data(dict, Animation): \"\"\" A class for representing data animation. It can build data option of the chart. \"\"\" @classmethod def filter(cls, filter_expr: Optional[str] = None): # -> Data: \"\"\" A class method for creating a [Data][ipyvizzu.animation.Data] class instance with a data filter. Args: filter_expr: The JavaScript data filter expression. Returns: (Data): A data animation instance that contains a data filter. Example: Create a [Data][ipyvizzu.animation.Data] class with a data filter: filter = Data.filter(\"record['Genres'] == 'Pop'\") \"\"\" data = cls() data.set_filter(filter_expr) return data def set_filter(self, filter_expr: Optional[str] = None) -> None: \"\"\" A method for adding a filter to an existing [Data][ipyvizzu.animation.Data] class instance. Args: filter_expr: The JavaScript data filter expression. Example: Add a data filter to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.set_filter(\"record['Genres'] == 'Pop'\") \"\"\" filter_expr_raw_js = ( RawJavaScript(f\"record => {{ return ({' '.join(filter_expr.split())}) }}\") if filter_expr is not None else filter_expr ) self.update({\"filter\": filter_expr_raw_js}) @classmethod def from_json(cls, filename: Union[str, bytes, PathLike]): # -> Data: \"\"\" A method for returning a [Data][ipyvizzu.animation.Data] class instance which has been created from a json file. Args: filename: The path of the data source json file. Returns: (Data): A data animation instance that has been created from a json file. \"\"\" with open(filename, \"r\", encoding=\"utf8\") as file_desc: return cls(json.load(file_desc)) def add_record(self, record: list) -> None: \"\"\" A method for adding a record to an existing [Data][ipyvizzu.animation.Data] class instance. Args: record: A list that contains data values. Example: Adding a record to a [Data][ipyvizzu.animation.Data] class instance: data = Data() record = [\"Pop\", \"Hard\", 114] data.add_record(record) \"\"\" self._add_value(\"records\", record) def add_records(self, records: List[list]) -> None: \"\"\" A method for adding records to an existing [Data][ipyvizzu.animation.Data] class instance. Args: records: A list that contains data records. Example: Adding records to a [Data][ipyvizzu.animation.Data] class instance: data = Data() records = [ [\"Pop\", \"Hard\", 114], [\"Rock\", \"Hard\", 96], [\"Pop\", \"Experimental\", 127], [\"Rock\", \"Experimental\", 83], ] data.add_records(records) \"\"\" list(map(self.add_record, records)) def add_series(self, name: str, values: Optional[list] = None, **kwargs) -> None: \"\"\" A method for adding a series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the series. values: The data values of the series. **kwargs (Optional): Arbitrary keyword arguments. For example infer type can be set with the `type` keywod argument. Example: Adding a series without values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series(\"Genres\") Adding a series without values and with infer type to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series(\"Kinds\", type=\"dimension\") Adding a series with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series( \"Popularity\", [114, 96, 127, 83] ) \"\"\" self._add_named_value(\"series\", name, values, **kwargs) def add_dimension(self, name: str, values: Optional[list] = None, **kwargs) -> None: \"\"\" A method for adding a dimension to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the dimension. values: The data values of the dimension. **kwargs (Optional): Arbitrary keyword arguments. Example: Adding a dimension with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_dimension(\"Genres\", [\"Pop\", \"Rock\"]) \"\"\" self._add_named_value(\"dimensions\", name, values, **kwargs) def add_measure(self, name: str, values: Optional[list] = None, **kwargs) -> None: \"\"\" A method for adding a measure to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the measure. values: The data values of the measure. **kwargs (Optional): Arbitrary keyword arguments. Example: Adding a measure with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_measure( \"Popularity\", [ [114, 96], [127, 83], ], ) \"\"\" self._add_named_value(\"measures\", name, values, **kwargs) def add_data_frame( self, data_frame: Union[pd.DataFrame, pd.Series], default_measure_value: Optional[Any] = 0, default_dimension_value: Optional[Any] = \"\", ) -> None: \"\"\" A method for adding data frame to an existing [Data][ipyvizzu.animation.Data] class instance. Args: data_frame: The pandas data frame object. default_measure_value: The default measure value to fill the empty values. default_dimension_value: The default dimension value to fill the empty values. Raises: TypeError: If `data_frame` is not instance of [pd.DataFrame][pandas.DataFrame] or [pd.Series][pandas.Series]. Example: Adding a data frame to a [Data][ipyvizzu.animation.Data] class instance: data_frame = pd.DataFrame( { \"Genres\": [\"Pop\", \"Rock\", \"Pop\", \"Rock\"], \"Kinds\": [\"Hard\", \"Hard\", \"Experimental\", \"Experimental\"], \"Popularity\": [114, 96, 127, 83], } ) data = Data() data.add_data_frame(data_frame) \"\"\" if not isinstance(data_frame, type(None)): if isinstance(data_frame, pd.Series): data_frame = pd.DataFrame(data_frame) if not isinstance(data_frame, pd.DataFrame): raise TypeError( \"data_frame must be instance of pandas.DataFrame or pandas.Series\" ) for name in data_frame.columns: values = [] if is_numeric_dtype(data_frame[name].dtype): infer_type = InferType.MEASURE values = ( data_frame[name] .fillna(default_measure_value) .astype(float) .values.tolist() ) else: infer_type = InferType.DIMENSION values = ( data_frame[name] .fillna(default_dimension_value) .astype(str) .values.tolist() ) self.add_series( name, values, type=infer_type.value, ) def add_data_frame_index( self, data_frame: Union[pd.DataFrame, pd.Series], name: Optional[str], ) -> None: \"\"\" A method for adding data frame's index to an existing [Data][ipyvizzu.animation.Data] class instance. Args: data_frame: The pandas data frame object. name: The name of the index series. Raises: TypeError: If `data_frame` is not instance of [pd.DataFrame][pandas.DataFrame] or [pd.Series][pandas.Series]. Example: Adding a data frame's index to a [Data][ipyvizzu.animation.Data] class instance: data_frame = pd.DataFrame( {\"Popularity\": [114, 96]}, index=[\"x\", \"y\"] ) data = Data() data.add_data_frame_index(data_frame, \"DataFrameIndex\") data.add_data_frame(data_frame) \"\"\" if data_frame is not None: if isinstance(data_frame, pd.Series): data_frame = pd.DataFrame(data_frame) if not isinstance(data_frame, pd.DataFrame): raise TypeError( \"data_frame must be instance of pandas.DataFrame or pandas.Series\" ) self.add_series( str(name), [str(i) for i in data_frame.index], type=InferType.DIMENSION.value, ) def _add_named_value( self, dest: str, name: str, values: Optional[list] = None, **kwargs ) -> None: value = {\"name\": name, **kwargs} if values is not None: value[\"values\"] = values # type: ignore self._add_value(dest, value) def _add_value(self, dest: str, value: Union[dict, list]) -> None: self.setdefault(dest, []).append(value) def build(self) -> dict: \"\"\" A method for validating and returning the data animation dictionary. Returns: A dictionary that stored in the data animation object. It contains a `data` key whose value is the stored animation. \"\"\" jsonschema.validate(self, DATA_SCHEMA) return {\"data\": self}","title":"Data"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.filter","text":"A class method for creating a Data class instance with a data filter. Parameters: Name Type Description Default filter_expr Optional [ str ] The JavaScript data filter expression. None Returns: Type Description Data A data animation instance that contains a data filter. Example Create a Data class with a data filter: filter = Data.filter(\"record['Genres'] == 'Pop'\") Source code in ipyvizzu/animation.py @classmethod def filter(cls, filter_expr: Optional[str] = None): # -> Data: \"\"\" A class method for creating a [Data][ipyvizzu.animation.Data] class instance with a data filter. Args: filter_expr: The JavaScript data filter expression. Returns: (Data): A data animation instance that contains a data filter. Example: Create a [Data][ipyvizzu.animation.Data] class with a data filter: filter = Data.filter(\"record['Genres'] == 'Pop'\") \"\"\" data = cls() data.set_filter(filter_expr) return data","title":"filter()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.set_filter","text":"A method for adding a filter to an existing Data class instance. Parameters: Name Type Description Default filter_expr Optional [ str ] The JavaScript data filter expression. None Example Add a data filter to a Data class instance: data = Data() data.set_filter(\"record['Genres'] == 'Pop'\") Source code in ipyvizzu/animation.py def set_filter(self, filter_expr: Optional[str] = None) -> None: \"\"\" A method for adding a filter to an existing [Data][ipyvizzu.animation.Data] class instance. Args: filter_expr: The JavaScript data filter expression. Example: Add a data filter to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.set_filter(\"record['Genres'] == 'Pop'\") \"\"\" filter_expr_raw_js = ( RawJavaScript(f\"record => {{ return ({' '.join(filter_expr.split())}) }}\") if filter_expr is not None else filter_expr ) self.update({\"filter\": filter_expr_raw_js})","title":"set_filter()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.from_json","text":"A method for returning a Data class instance which has been created from a json file. Parameters: Name Type Description Default filename Union [ str , bytes , PathLike ] The path of the data source json file. required Returns: Type Description Data A data animation instance that has been created from a json file. Source code in ipyvizzu/animation.py @classmethod def from_json(cls, filename: Union[str, bytes, PathLike]): # -> Data: \"\"\" A method for returning a [Data][ipyvizzu.animation.Data] class instance which has been created from a json file. Args: filename: The path of the data source json file. Returns: (Data): A data animation instance that has been created from a json file. \"\"\" with open(filename, \"r\", encoding=\"utf8\") as file_desc: return cls(json.load(file_desc))","title":"from_json()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.add_record","text":"A method for adding a record to an existing Data class instance. Parameters: Name Type Description Default record list A list that contains data values. required Example Adding a record to a Data class instance: data = Data() record = [\"Pop\", \"Hard\", 114] data.add_record(record) Source code in ipyvizzu/animation.py def add_record(self, record: list) -> None: \"\"\" A method for adding a record to an existing [Data][ipyvizzu.animation.Data] class instance. Args: record: A list that contains data values. Example: Adding a record to a [Data][ipyvizzu.animation.Data] class instance: data = Data() record = [\"Pop\", \"Hard\", 114] data.add_record(record) \"\"\" self._add_value(\"records\", record)","title":"add_record()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.add_records","text":"A method for adding records to an existing Data class instance. Parameters: Name Type Description Default records List [ list ] A list that contains data records. required Example Adding records to a Data class instance: data = Data() records = [ [\"Pop\", \"Hard\", 114], [\"Rock\", \"Hard\", 96], [\"Pop\", \"Experimental\", 127], [\"Rock\", \"Experimental\", 83], ] data.add_records(records) Source code in ipyvizzu/animation.py def add_records(self, records: List[list]) -> None: \"\"\" A method for adding records to an existing [Data][ipyvizzu.animation.Data] class instance. Args: records: A list that contains data records. Example: Adding records to a [Data][ipyvizzu.animation.Data] class instance: data = Data() records = [ [\"Pop\", \"Hard\", 114], [\"Rock\", \"Hard\", 96], [\"Pop\", \"Experimental\", 127], [\"Rock\", \"Experimental\", 83], ] data.add_records(records) \"\"\" list(map(self.add_record, records))","title":"add_records()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.add_series","text":"A method for adding a series to an existing Data class instance. Parameters: Name Type Description Default name str The name of the series. required values Optional [ list ] The data values of the series. None **kwargs Optional Arbitrary keyword arguments. For example infer type can be set with the type keywod argument. {} Example Adding a series without values to a Data class instance: data = Data() data.add_series(\"Genres\") Adding a series without values and with infer type to a Data class instance: data = Data() data.add_series(\"Kinds\", type=\"dimension\") Adding a series with values to a Data class instance: data = Data() data.add_series( \"Popularity\", [114, 96, 127, 83] ) Source code in ipyvizzu/animation.py def add_series(self, name: str, values: Optional[list] = None, **kwargs) -> None: \"\"\" A method for adding a series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the series. values: The data values of the series. **kwargs (Optional): Arbitrary keyword arguments. For example infer type can be set with the `type` keywod argument. Example: Adding a series without values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series(\"Genres\") Adding a series without values and with infer type to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series(\"Kinds\", type=\"dimension\") Adding a series with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series( \"Popularity\", [114, 96, 127, 83] ) \"\"\" self._add_named_value(\"series\", name, values, **kwargs)","title":"add_series()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.add_dimension","text":"A method for adding a dimension to an existing Data class instance. Parameters: Name Type Description Default name str The name of the dimension. required values Optional [ list ] The data values of the dimension. None **kwargs Optional Arbitrary keyword arguments. {} Example Adding a dimension with values to a Data class instance: data = Data() data.add_dimension(\"Genres\", [\"Pop\", \"Rock\"]) Source code in ipyvizzu/animation.py def add_dimension(self, name: str, values: Optional[list] = None, **kwargs) -> None: \"\"\" A method for adding a dimension to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the dimension. values: The data values of the dimension. **kwargs (Optional): Arbitrary keyword arguments. Example: Adding a dimension with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_dimension(\"Genres\", [\"Pop\", \"Rock\"]) \"\"\" self._add_named_value(\"dimensions\", name, values, **kwargs)","title":"add_dimension()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.add_measure","text":"A method for adding a measure to an existing Data class instance. Parameters: Name Type Description Default name str The name of the measure. required values Optional [ list ] The data values of the measure. None **kwargs Optional Arbitrary keyword arguments. {} Example Adding a measure with values to a Data class instance: data = Data() data.add_measure( \"Popularity\", [ [114, 96], [127, 83], ], ) Source code in ipyvizzu/animation.py def add_measure(self, name: str, values: Optional[list] = None, **kwargs) -> None: \"\"\" A method for adding a measure to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the measure. values: The data values of the measure. **kwargs (Optional): Arbitrary keyword arguments. Example: Adding a measure with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_measure( \"Popularity\", [ [114, 96], [127, 83], ], ) \"\"\" self._add_named_value(\"measures\", name, values, **kwargs)","title":"add_measure()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.add_data_frame","text":"A method for adding data frame to an existing Data class instance. Parameters: Name Type Description Default data_frame Union [ pd . DataFrame , pd . Series ] The pandas data frame object. required default_measure_value Optional [ Any ] The default measure value to fill the empty values. 0 default_dimension_value Optional [ Any ] The default dimension value to fill the empty values. '' Raises: Type Description TypeError If data_frame is not instance of pd.DataFrame or pd.Series . Example Adding a data frame to a Data class instance: data_frame = pd.DataFrame( { \"Genres\": [\"Pop\", \"Rock\", \"Pop\", \"Rock\"], \"Kinds\": [\"Hard\", \"Hard\", \"Experimental\", \"Experimental\"], \"Popularity\": [114, 96, 127, 83], } ) data = Data() data.add_data_frame(data_frame) Source code in ipyvizzu/animation.py def add_data_frame( self, data_frame: Union[pd.DataFrame, pd.Series], default_measure_value: Optional[Any] = 0, default_dimension_value: Optional[Any] = \"\", ) -> None: \"\"\" A method for adding data frame to an existing [Data][ipyvizzu.animation.Data] class instance. Args: data_frame: The pandas data frame object. default_measure_value: The default measure value to fill the empty values. default_dimension_value: The default dimension value to fill the empty values. Raises: TypeError: If `data_frame` is not instance of [pd.DataFrame][pandas.DataFrame] or [pd.Series][pandas.Series]. Example: Adding a data frame to a [Data][ipyvizzu.animation.Data] class instance: data_frame = pd.DataFrame( { \"Genres\": [\"Pop\", \"Rock\", \"Pop\", \"Rock\"], \"Kinds\": [\"Hard\", \"Hard\", \"Experimental\", \"Experimental\"], \"Popularity\": [114, 96, 127, 83], } ) data = Data() data.add_data_frame(data_frame) \"\"\" if not isinstance(data_frame, type(None)): if isinstance(data_frame, pd.Series): data_frame = pd.DataFrame(data_frame) if not isinstance(data_frame, pd.DataFrame): raise TypeError( \"data_frame must be instance of pandas.DataFrame or pandas.Series\" ) for name in data_frame.columns: values = [] if is_numeric_dtype(data_frame[name].dtype): infer_type = InferType.MEASURE values = ( data_frame[name] .fillna(default_measure_value) .astype(float) .values.tolist() ) else: infer_type = InferType.DIMENSION values = ( data_frame[name] .fillna(default_dimension_value) .astype(str) .values.tolist() ) self.add_series( name, values, type=infer_type.value, )","title":"add_data_frame()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.add_data_frame_index","text":"A method for adding data frame's index to an existing Data class instance. Parameters: Name Type Description Default data_frame Union [ pd . DataFrame , pd . Series ] The pandas data frame object. required name Optional [ str ] The name of the index series. required Raises: Type Description TypeError If data_frame is not instance of pd.DataFrame or pd.Series . Example Adding a data frame's index to a Data class instance: data_frame = pd.DataFrame( {\"Popularity\": [114, 96]}, index=[\"x\", \"y\"] ) data = Data() data.add_data_frame_index(data_frame, \"DataFrameIndex\") data.add_data_frame(data_frame) Source code in ipyvizzu/animation.py def add_data_frame_index( self, data_frame: Union[pd.DataFrame, pd.Series], name: Optional[str], ) -> None: \"\"\" A method for adding data frame's index to an existing [Data][ipyvizzu.animation.Data] class instance. Args: data_frame: The pandas data frame object. name: The name of the index series. Raises: TypeError: If `data_frame` is not instance of [pd.DataFrame][pandas.DataFrame] or [pd.Series][pandas.Series]. Example: Adding a data frame's index to a [Data][ipyvizzu.animation.Data] class instance: data_frame = pd.DataFrame( {\"Popularity\": [114, 96]}, index=[\"x\", \"y\"] ) data = Data() data.add_data_frame_index(data_frame, \"DataFrameIndex\") data.add_data_frame(data_frame) \"\"\" if data_frame is not None: if isinstance(data_frame, pd.Series): data_frame = pd.DataFrame(data_frame) if not isinstance(data_frame, pd.DataFrame): raise TypeError( \"data_frame must be instance of pandas.DataFrame or pandas.Series\" ) self.add_series( str(name), [str(i) for i in data_frame.index], type=InferType.DIMENSION.value, )","title":"add_data_frame_index()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.build","text":"A method for validating and returning the data animation dictionary. Returns: Type Description dict A dictionary that stored in the data animation object. It contains a data key whose value is the stored animation. Source code in ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for validating and returning the data animation dictionary. Returns: A dictionary that stored in the data animation object. It contains a `data` key whose value is the stored animation. \"\"\" jsonschema.validate(self, DATA_SCHEMA) return {\"data\": self}","title":"build()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.ConfigAttr","text":"Bases: type A metaclass class for the Config class. Returns a Config class with a chart preset if the __getattr__ method called. Source code in ipyvizzu/animation.py class ConfigAttr(type): \"\"\" A metaclass class for the [Config][ipyvizzu.animation.Config] class. Returns a [Config][ipyvizzu.animation.Config] class with a chart preset if the `__getattr__` method called. \"\"\" @classmethod def __getattr__(mcs, name): config_attr = mcs(\"ConfigAttr\", (object,), {\"name\": name}) return config_attr._get_preset # pylint: disable=no-member def _get_preset(cls, preset): config = Config(RawJavaScript(f\"lib.presets.{cls.name}({preset})\")) return config","title":"ConfigAttr"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Config","text":"Bases: Animation A class for representing config animation. It can build config option of the chart. Source code in ipyvizzu/animation.py class Config(Animation, metaclass=ConfigAttr): \"\"\" A class for representing config animation. It can build config option of the chart. \"\"\" def __init__(self, data: Optional[dict]): \"\"\" Config constructor. Args: data: A config animation dictionary. \"\"\" self._data = data def build(self) -> dict: \"\"\" A method for returning the config animation dictionary. Returns: A dictionary that stored in the config animation object. It contains a `config` key whose value is the stored animation. \"\"\" return {\"config\": self._data}","title":"Config"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Config.__init__","text":"Config constructor. Parameters: Name Type Description Default data Optional [ dict ] A config animation dictionary. required Source code in ipyvizzu/animation.py def __init__(self, data: Optional[dict]): \"\"\" Config constructor. Args: data: A config animation dictionary. \"\"\" self._data = data","title":"__init__()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Config.build","text":"A method for returning the config animation dictionary. Returns: Type Description dict A dictionary that stored in the config animation object. It contains a config key whose value is the stored animation. Source code in ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for returning the config animation dictionary. Returns: A dictionary that stored in the config animation object. It contains a `config` key whose value is the stored animation. \"\"\" return {\"config\": self._data}","title":"build()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Style","text":"Bases: Animation A class for representing style animation. It can build style option of the chart. Source code in ipyvizzu/animation.py class Style(Animation): \"\"\" A class for representing style animation. It can build style option of the chart. \"\"\" def __init__(self, data: Optional[dict]): \"\"\" Style constructor. Args: data: A style animation dictionary. \"\"\" self._data = data def build(self) -> dict: \"\"\" A method for returning the style animation dictionary. Returns: A dictionary that stored in the style animation object. It contains a `style` key whose value is the stored animation. \"\"\" return {\"style\": self._data}","title":"Style"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Style.__init__","text":"Style constructor. Parameters: Name Type Description Default data Optional [ dict ] A style animation dictionary. required Source code in ipyvizzu/animation.py def __init__(self, data: Optional[dict]): \"\"\" Style constructor. Args: data: A style animation dictionary. \"\"\" self._data = data","title":"__init__()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Style.build","text":"A method for returning the style animation dictionary. Returns: Type Description dict A dictionary that stored in the style animation object. It contains a style key whose value is the stored animation. Source code in ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for returning the style animation dictionary. Returns: A dictionary that stored in the style animation object. It contains a `style` key whose value is the stored animation. \"\"\" return {\"style\": self._data}","title":"build()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Snapshot","text":"Bases: Animation A class for representing snapshot animation. It can build the snapshot id of the chart. Source code in ipyvizzu/animation.py class Snapshot(Animation): \"\"\" A class for representing snapshot animation. It can build the snapshot id of the chart. \"\"\" def __init__(self, name: str): \"\"\" Snapshot constructor. Args: name: A snapshot id. \"\"\" self._name = name def dump(self) -> str: \"\"\" A method for overwriting the [Animation.dump][ipyvizzu.animation.Animation.dump] method. It dumps the stored snapshot id as a string. Returns: An str that contains the stored snapshot id. \"\"\" return f\"'{self._name}'\" def build(self): \"\"\" A method for preventing to merge [Snapshot][ipyvizzu.animation.Snapshot] with other animations. Raises: NotImplementedError: If the [build][ipyvizzu.animation.Snapshot.build] method has been called, because [Snapshot][ipyvizzu.animation.Snapshot] cannot be merged with other animations. \"\"\" raise NotImplementedError(\"Snapshot cannot be merged with other animations\")","title":"Snapshot"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Snapshot.__init__","text":"Snapshot constructor. Parameters: Name Type Description Default name str A snapshot id. required Source code in ipyvizzu/animation.py def __init__(self, name: str): \"\"\" Snapshot constructor. Args: name: A snapshot id. \"\"\" self._name = name","title":"__init__()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Snapshot.dump","text":"A method for overwriting the Animation.dump method. It dumps the stored snapshot id as a string. Returns: Type Description str An str that contains the stored snapshot id. Source code in ipyvizzu/animation.py def dump(self) -> str: \"\"\" A method for overwriting the [Animation.dump][ipyvizzu.animation.Animation.dump] method. It dumps the stored snapshot id as a string. Returns: An str that contains the stored snapshot id. \"\"\" return f\"'{self._name}'\"","title":"dump()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Snapshot.build","text":"A method for preventing to merge Snapshot with other animations. Raises: Type Description NotImplementedError If the build method has been called, because Snapshot cannot be merged with other animations. Source code in ipyvizzu/animation.py def build(self): \"\"\" A method for preventing to merge [Snapshot][ipyvizzu.animation.Snapshot] with other animations. Raises: NotImplementedError: If the [build][ipyvizzu.animation.Snapshot.build] method has been called, because [Snapshot][ipyvizzu.animation.Snapshot] cannot be merged with other animations. \"\"\" raise NotImplementedError(\"Snapshot cannot be merged with other animations\")","title":"build()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.AnimationMerger","text":"Bases: dict , Animation A class for merging different types of animations. Source code in ipyvizzu/animation.py class AnimationMerger(dict, Animation): \"\"\"A class for merging different types of animations.\"\"\" def merge(self, animation: Animation) -> None: \"\"\" A method for merging an animation with the previously merged animations. Args: animation: An animation to be merged with with previously merged animations. Raises: ValueError: If the type of an animation is already merged. \"\"\" data = self._validate(animation) self.update(data) def _validate(self, animation: Animation) -> dict: data = animation.build() common_keys = set(data).intersection(self) if common_keys: raise ValueError(f\"Animation is already merged: {common_keys}\") return data def build(self) -> dict: \"\"\" A method for returning a merged dictionary from different types of animations. Returns: A merged dictionary from [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style] animations. \"\"\" return self","title":"AnimationMerger"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.AnimationMerger.merge","text":"A method for merging an animation with the previously merged animations. Parameters: Name Type Description Default animation Animation An animation to be merged with with previously merged animations. required Raises: Type Description ValueError If the type of an animation is already merged. Source code in ipyvizzu/animation.py def merge(self, animation: Animation) -> None: \"\"\" A method for merging an animation with the previously merged animations. Args: animation: An animation to be merged with with previously merged animations. Raises: ValueError: If the type of an animation is already merged. \"\"\" data = self._validate(animation) self.update(data)","title":"merge()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.AnimationMerger.build","text":"A method for returning a merged dictionary from different types of animations. Returns: Type Description dict A merged dictionary from Data , Config and Style animations. Source code in ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for returning a merged dictionary from different types of animations. Returns: A merged dictionary from [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style] animations. \"\"\" return self","title":"build()"},{"location":"reference/ipyvizzu/#ipyvizzu.chart","text":"A module for working with Vizzu charts.","title":"chart"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart","text":"A class for representing a wrapper over Vizzu chart. Source code in ipyvizzu/chart.py class Chart: \"\"\"A class for representing a wrapper over Vizzu chart.\"\"\" VIZZU: str = \"https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js\" \"\"\"A variable for storing the default url of vizzu package.\"\"\" def __init__( self, vizzu: Optional[str] = VIZZU, width: Optional[str] = \"800px\", height: Optional[str] = \"480px\", display: Optional[Union[DisplayTarget, str]] = DisplayTarget.ACTUAL, ): \"\"\" Chart constructor. Args: vizzu: The url of Vizzu JavaScript package. width: The width of the chart. height: The height of the chart. display: The display behaviour of the chart. \"\"\" self._chart_id = uuid.uuid4().hex[:7] self._display_target = DisplayTarget(display) self._calls: List[str] = [] self._showed = False self._scroll_into_view = False ipyvizzurawjs = pkgutil.get_data(__name__, \"templates/ipyvizzu.js\") ipyvizzujs = ipyvizzurawjs.decode(\"utf-8\") # type: ignore self._display(DisplayTemplate.IPYVIZZUJS.format(ipyvizzujs=ipyvizzujs)) self._display( DisplayTemplate.INIT.format( chart_id=self._chart_id, vizzu=vizzu, div_width=width, div_height=height, ) ) if self._display_target != DisplayTarget.MANUAL: self._register_events() @staticmethod def _register_events() -> None: ipy = get_ipython() if ipy is not None: ipy.events.register(\"pre_run_cell\", Chart._register_pre_run_cell) @staticmethod def _register_pre_run_cell() -> None: display_javascript(DisplayTemplate.CLEAR_INHIBITSCROLL, raw=True) @property def scroll_into_view(self) -> bool: \"\"\" A property for turning on/off the scroll into view feature. Returns: The value of the property (default `False`). \"\"\" return self._scroll_into_view @scroll_into_view.setter def scroll_into_view(self, scroll_into_view: Optional[bool]): self._scroll_into_view = bool(scroll_into_view) def animate( self, *animations: Animation, **options: Optional[Union[str, int, float, dict]] ) -> None: \"\"\" A method for changing the state of the chart. Args: *animations: List of Animation objects such as [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style]. **options: Dictionary of animation options for example `duration=1`. Raises: ValueError: If `animations` is not set. Example: Reset the chart styles: chart.animate(Style(None)) \"\"\" if not animations: raise ValueError(\"No animation was set.\") animation = self._merge_animations(animations) animate = Animate(animation, options) self._display( DisplayTemplate.ANIMATE.format( display_target=self._display_target.value, chart_id=self._chart_id, scroll=str(self._scroll_into_view).lower(), **animate.dump(), ) ) @staticmethod def _merge_animations( animations: Tuple[Animation, ...], ) -> Union[Animation, AnimationMerger]: if len(animations) == 1: return animations[0] merger = AnimationMerger() for animation in animations: merger.merge(animation) return merger def feature(self, name: str, enabled: bool) -> None: \"\"\" A method for turning on/off features of the chart. Args: name: The name of the chart feature. enabled: The new state of the chart feature. Example: Turn on `tooltip` of the chart: chart.feature(\"tooltip\", True) \"\"\" self._display( DisplayTemplate.FEATURE.format( chart_id=self._chart_id, **Feature(name, enabled).dump(), ) ) def store(self) -> Snapshot: \"\"\" A method for saving and storing the actual state of the chart. Returns: A snapshot animation object wich stores the actual state of the chart. Example: Save and restore the actual state of the chart: snapshot = chart.store() ... chart.animate(snapshot) \"\"\" snapshot_id = uuid.uuid4().hex[:7] self._display( DisplayTemplate.STORE.format( chart_id=self._chart_id, **Store(snapshot_id).dump() ) ) return Snapshot(snapshot_id) def on( # pylint: disable=invalid-name self, event: str, handler: str ) -> EventHandler: \"\"\" A method for creating and turning on an event handler. Args: event: The type of the event. handler: The JavaScript method of the event. Returns: The turned on event handler object. Example: Turn on an event handler which prints an alert message when someone clicks on the chart: handler = chart.on(\"click\", \"alert(JSON.stringify(event.data));\") \"\"\" event_handler = EventHandler(event, handler) self._display( DisplayTemplate.SET_EVENT.format( chart_id=self._chart_id, **EventOn(event_handler).dump(), ) ) return event_handler def off(self, event_handler: EventHandler) -> None: \"\"\" A method for turning off an event handler. Args: event_handler: A previously created event handler object. Example: Turn off a previously created event handler: chart.off(handler) \"\"\" self._display( DisplayTemplate.CLEAR_EVENT.format( chart_id=self._chart_id, **EventOff(event_handler).dump(), ) ) def log(self, chart_property: ChartProperty) -> None: \"\"\" A method for printing chart properties to the browser console. Args: chart_property: A chart property such as [CONFIG][ipyvizzu.template.ChartProperty] and [STYLE][ipyvizzu.template.ChartProperty]. Example: Log the actual style of the chart to the browser console: chart.log(ChartProperty.STYLE) \"\"\" self._display( DisplayTemplate.LOG.format( chart_id=self._chart_id, **Log(chart_property).dump() ) ) def _repr_html_(self) -> str: assert ( self._display_target == DisplayTarget.MANUAL ), \"chart._repr_html_() can be used with display=DisplayTarget.MANUAL only\" assert not self._showed, \"cannot be used after chart displayed.\" self._showed = True html_id = uuid.uuid4().hex[:7] script = ( self._calls[0] + \"\\n\" + \"\\n\".join(self._calls[1:]).replace( \"element\", f'document.getElementById(\"{html_id}\")' ) ) return f'<div id=\"{html_id}\"><script>{script}</script></div>' def show(self) -> None: \"\"\" A method for displaying the assembled JavaScript code. Raises: AssertionError: If [display][ipyvizzu.Chart.__init__] is not [DisplayTarget.MANUAL][ipyvizzu.template.DisplayTarget]. AssertionError: If chart already has been displayed. \"\"\" assert ( self._display_target == DisplayTarget.MANUAL ), \"chart.show() can be used with display=DisplayTarget.MANUAL only\" assert not self._showed, \"cannot be used after chart displayed\" display_javascript( \"\\n\".join(self._calls), raw=True, ) self._showed = True def _display(self, javascript: str) -> None: if self._display_target != DisplayTarget.MANUAL: display_javascript( javascript, raw=True, ) else: assert not self._showed, \"cannot be used after chart displayed\" self._calls.append(javascript)","title":"Chart"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.VIZZU","text":"A variable for storing the default url of vizzu package.","title":"VIZZU"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.scroll_into_view","text":"A property for turning on/off the scroll into view feature. Returns: Type Description bool The value of the property (default False ).","title":"scroll_into_view"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.__init__","text":"Chart constructor. Parameters: Name Type Description Default vizzu Optional [ str ] The url of Vizzu JavaScript package. VIZZU width Optional [ str ] The width of the chart. '800px' height Optional [ str ] The height of the chart. '480px' display Optional [ Union [ DisplayTarget , str ]] The display behaviour of the chart. DisplayTarget.ACTUAL Source code in ipyvizzu/chart.py def __init__( self, vizzu: Optional[str] = VIZZU, width: Optional[str] = \"800px\", height: Optional[str] = \"480px\", display: Optional[Union[DisplayTarget, str]] = DisplayTarget.ACTUAL, ): \"\"\" Chart constructor. Args: vizzu: The url of Vizzu JavaScript package. width: The width of the chart. height: The height of the chart. display: The display behaviour of the chart. \"\"\" self._chart_id = uuid.uuid4().hex[:7] self._display_target = DisplayTarget(display) self._calls: List[str] = [] self._showed = False self._scroll_into_view = False ipyvizzurawjs = pkgutil.get_data(__name__, \"templates/ipyvizzu.js\") ipyvizzujs = ipyvizzurawjs.decode(\"utf-8\") # type: ignore self._display(DisplayTemplate.IPYVIZZUJS.format(ipyvizzujs=ipyvizzujs)) self._display( DisplayTemplate.INIT.format( chart_id=self._chart_id, vizzu=vizzu, div_width=width, div_height=height, ) ) if self._display_target != DisplayTarget.MANUAL: self._register_events()","title":"__init__()"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.animate","text":"A method for changing the state of the chart. Parameters: Name Type Description Default *animations Animation List of Animation objects such as Data , Config and Style . () **options Optional [ Union [ str , int , float , dict ]] Dictionary of animation options for example duration=1 . {} Raises: Type Description ValueError If animations is not set. Example Reset the chart styles: chart.animate(Style(None)) Source code in ipyvizzu/chart.py def animate( self, *animations: Animation, **options: Optional[Union[str, int, float, dict]] ) -> None: \"\"\" A method for changing the state of the chart. Args: *animations: List of Animation objects such as [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style]. **options: Dictionary of animation options for example `duration=1`. Raises: ValueError: If `animations` is not set. Example: Reset the chart styles: chart.animate(Style(None)) \"\"\" if not animations: raise ValueError(\"No animation was set.\") animation = self._merge_animations(animations) animate = Animate(animation, options) self._display( DisplayTemplate.ANIMATE.format( display_target=self._display_target.value, chart_id=self._chart_id, scroll=str(self._scroll_into_view).lower(), **animate.dump(), ) )","title":"animate()"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.feature","text":"A method for turning on/off features of the chart. Parameters: Name Type Description Default name str The name of the chart feature. required enabled bool The new state of the chart feature. required Example Turn on tooltip of the chart: chart.feature(\"tooltip\", True) Source code in ipyvizzu/chart.py def feature(self, name: str, enabled: bool) -> None: \"\"\" A method for turning on/off features of the chart. Args: name: The name of the chart feature. enabled: The new state of the chart feature. Example: Turn on `tooltip` of the chart: chart.feature(\"tooltip\", True) \"\"\" self._display( DisplayTemplate.FEATURE.format( chart_id=self._chart_id, **Feature(name, enabled).dump(), ) )","title":"feature()"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.store","text":"A method for saving and storing the actual state of the chart. Returns: Type Description Snapshot A snapshot animation object wich stores the actual state of the chart. Example Save and restore the actual state of the chart: snapshot = chart.store() ... chart.animate(snapshot) Source code in ipyvizzu/chart.py def store(self) -> Snapshot: \"\"\" A method for saving and storing the actual state of the chart. Returns: A snapshot animation object wich stores the actual state of the chart. Example: Save and restore the actual state of the chart: snapshot = chart.store() ... chart.animate(snapshot) \"\"\" snapshot_id = uuid.uuid4().hex[:7] self._display( DisplayTemplate.STORE.format( chart_id=self._chart_id, **Store(snapshot_id).dump() ) ) return Snapshot(snapshot_id)","title":"store()"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.on","text":"A method for creating and turning on an event handler. Parameters: Name Type Description Default event str The type of the event. required handler str The JavaScript method of the event. required Returns: Type Description EventHandler The turned on event handler object. Example Turn on an event handler which prints an alert message when someone clicks on the chart: handler = chart.on(\"click\", \"alert(JSON.stringify(event.data));\") Source code in ipyvizzu/chart.py def on( # pylint: disable=invalid-name self, event: str, handler: str ) -> EventHandler: \"\"\" A method for creating and turning on an event handler. Args: event: The type of the event. handler: The JavaScript method of the event. Returns: The turned on event handler object. Example: Turn on an event handler which prints an alert message when someone clicks on the chart: handler = chart.on(\"click\", \"alert(JSON.stringify(event.data));\") \"\"\" event_handler = EventHandler(event, handler) self._display( DisplayTemplate.SET_EVENT.format( chart_id=self._chart_id, **EventOn(event_handler).dump(), ) ) return event_handler","title":"on()"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.off","text":"A method for turning off an event handler. Parameters: Name Type Description Default event_handler EventHandler A previously created event handler object. required Example Turn off a previously created event handler: chart.off(handler) Source code in ipyvizzu/chart.py def off(self, event_handler: EventHandler) -> None: \"\"\" A method for turning off an event handler. Args: event_handler: A previously created event handler object. Example: Turn off a previously created event handler: chart.off(handler) \"\"\" self._display( DisplayTemplate.CLEAR_EVENT.format( chart_id=self._chart_id, **EventOff(event_handler).dump(), ) )","title":"off()"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.log","text":"A method for printing chart properties to the browser console. Parameters: Name Type Description Default chart_property ChartProperty A chart property such as CONFIG and STYLE . required Example Log the actual style of the chart to the browser console: chart.log(ChartProperty.STYLE) Source code in ipyvizzu/chart.py def log(self, chart_property: ChartProperty) -> None: \"\"\" A method for printing chart properties to the browser console. Args: chart_property: A chart property such as [CONFIG][ipyvizzu.template.ChartProperty] and [STYLE][ipyvizzu.template.ChartProperty]. Example: Log the actual style of the chart to the browser console: chart.log(ChartProperty.STYLE) \"\"\" self._display( DisplayTemplate.LOG.format( chart_id=self._chart_id, **Log(chart_property).dump() ) )","title":"log()"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.show","text":"A method for displaying the assembled JavaScript code. Raises: Type Description AssertionError If display is not DisplayTarget.MANUAL . AssertionError If chart already has been displayed. Source code in ipyvizzu/chart.py def show(self) -> None: \"\"\" A method for displaying the assembled JavaScript code. Raises: AssertionError: If [display][ipyvizzu.Chart.__init__] is not [DisplayTarget.MANUAL][ipyvizzu.template.DisplayTarget]. AssertionError: If chart already has been displayed. \"\"\" assert ( self._display_target == DisplayTarget.MANUAL ), \"chart.show() can be used with display=DisplayTarget.MANUAL only\" assert not self._showed, \"cannot be used after chart displayed\" display_javascript( \"\\n\".join(self._calls), raw=True, ) self._showed = True","title":"show()"},{"location":"reference/ipyvizzu/#ipyvizzu.event","text":"A module for working with JavaScript events","title":"event"},{"location":"reference/ipyvizzu/#ipyvizzu.event.EventHandler","text":"A class for representing an event handler. Source code in ipyvizzu/event.py class EventHandler: \"\"\"A class for representing an event handler.\"\"\" def __init__(self, event: str, handler: str): \"\"\" EventHandler constructor. It generates a uuid for the event handler, stores the event type and the body of the handler function. Args: event: The type of the event. handler: The body of the handler function. \"\"\" self._id = uuid.uuid4().hex[:7] self._event = event self._handler = \" \".join(handler.split()) @property def id(self) -> str: # pylint: disable=invalid-name \"\"\" A property for storing an id. Returns: The uuid of the event handler. \"\"\" return self._id @property def event(self) -> str: \"\"\" A property for storing an event type. Returns: The type of the event. \"\"\" return self._event @property def handler(self) -> str: \"\"\" A property for storing an event handler function. Returns: The body of the handler function. \"\"\" return self._handler","title":"EventHandler"},{"location":"reference/ipyvizzu/#ipyvizzu.event.EventHandler.id","text":"A property for storing an id. Returns: Type Description str The uuid of the event handler.","title":"id"},{"location":"reference/ipyvizzu/#ipyvizzu.event.EventHandler.event","text":"A property for storing an event type. Returns: Type Description str The type of the event.","title":"event"},{"location":"reference/ipyvizzu/#ipyvizzu.event.EventHandler.handler","text":"A property for storing an event handler function. Returns: Type Description str The body of the handler function.","title":"handler"},{"location":"reference/ipyvizzu/#ipyvizzu.event.EventHandler.__init__","text":"EventHandler constructor. It generates a uuid for the event handler, stores the event type and the body of the handler function. Parameters: Name Type Description Default event str The type of the event. required handler str The body of the handler function. required Source code in ipyvizzu/event.py def __init__(self, event: str, handler: str): \"\"\" EventHandler constructor. It generates a uuid for the event handler, stores the event type and the body of the handler function. Args: event: The type of the event. handler: The body of the handler function. \"\"\" self._id = uuid.uuid4().hex[:7] self._event = event self._handler = \" \".join(handler.split())","title":"__init__()"},{"location":"reference/ipyvizzu/#ipyvizzu.json","text":"A module for working JavaScript code in json convertible objects.","title":"json"},{"location":"reference/ipyvizzu/#ipyvizzu.json.RawJavaScript","text":"A class for representing raw JavaScript code. Source code in ipyvizzu/json.py class RawJavaScript: \"\"\"A class for representing raw JavaScript code.\"\"\" # pylint: disable=too-few-public-methods def __init__(self, raw: Optional[str]): \"\"\" RawJavaScript constructor. It stores raw JavaScript code as a string. Args: raw: JavaScript code as `str`. \"\"\" self._raw = raw @property def raw(self) -> Optional[str]: \"\"\" A property for storing raw JavaScript code as a string. Returns: Raw JavaScript code as `str`. \"\"\" return self._raw","title":"RawJavaScript"},{"location":"reference/ipyvizzu/#ipyvizzu.json.RawJavaScript.raw","text":"A property for storing raw JavaScript code as a string. Returns: Type Description Optional [ str ] Raw JavaScript code as str .","title":"raw"},{"location":"reference/ipyvizzu/#ipyvizzu.json.RawJavaScript.__init__","text":"RawJavaScript constructor. It stores raw JavaScript code as a string. Parameters: Name Type Description Default raw Optional [ str ] JavaScript code as str . required Source code in ipyvizzu/json.py def __init__(self, raw: Optional[str]): \"\"\" RawJavaScript constructor. It stores raw JavaScript code as a string. Args: raw: JavaScript code as `str`. \"\"\" self._raw = raw","title":"__init__()"},{"location":"reference/ipyvizzu/#ipyvizzu.json.RawJavaScriptEncoder","text":"Bases: json . JSONEncoder A class for representing a custom json encoder, it can encode objects that contain RawJavaScript values. Source code in ipyvizzu/json.py class RawJavaScriptEncoder(json.JSONEncoder): \"\"\" A class for representing a custom json encoder, it can encode objects that contain [RawJavaScript][ipyvizzu.json.RawJavaScript] values. \"\"\" def __init__(self, *args, **kwargs): \"\"\" RawJavaScriptEncoder constructor. It extends [JSONEncoder][json.JSONEncoder] with an instance variable (`_raw_replacements`). The `_raw_replacements` dictionary stores the `uuids` and JavaScript codes of the [RawJavaScript][ipyvizzu.json.RawJavaScript] objects. \"\"\" json.JSONEncoder.__init__(self, *args, **kwargs) self._raw_replacements = {} def default(self, o): \"\"\" Overrides [JSONEncoder.default][json.JSONEncoder.default] method. It replaces [RawJavaScript][ipyvizzu.json.RawJavaScript] object with `uuid` and it stores raw JavaScript code with `uuid` key in the `_raw_replacements` dictionary. \"\"\" if isinstance(o, RawJavaScript): key = uuid.uuid4().hex self._raw_replacements[key] = o.raw return key return json.JSONEncoder.default(self, o) def encode(self, o): \"\"\" Overrides [JSONEncoder.encode][json.JSONEncoder.encode] method. It replaces `uuids` with raw JavaScript code without apostrophes. \"\"\" result = json.JSONEncoder.encode(self, o) for key, val in self._raw_replacements.items(): result = result.replace(f'\"{key}\"', val) return result","title":"RawJavaScriptEncoder"},{"location":"reference/ipyvizzu/#ipyvizzu.json.RawJavaScriptEncoder.__init__","text":"RawJavaScriptEncoder constructor. It extends JSONEncoder with an instance variable ( _raw_replacements ). The _raw_replacements dictionary stores the uuids and JavaScript codes of the RawJavaScript objects. Source code in ipyvizzu/json.py def __init__(self, *args, **kwargs): \"\"\" RawJavaScriptEncoder constructor. It extends [JSONEncoder][json.JSONEncoder] with an instance variable (`_raw_replacements`). The `_raw_replacements` dictionary stores the `uuids` and JavaScript codes of the [RawJavaScript][ipyvizzu.json.RawJavaScript] objects. \"\"\" json.JSONEncoder.__init__(self, *args, **kwargs) self._raw_replacements = {}","title":"__init__()"},{"location":"reference/ipyvizzu/#ipyvizzu.json.RawJavaScriptEncoder.default","text":"Overrides JSONEncoder.default method. It replaces RawJavaScript object with uuid and it stores raw JavaScript code with uuid key in the _raw_replacements dictionary. Source code in ipyvizzu/json.py def default(self, o): \"\"\" Overrides [JSONEncoder.default][json.JSONEncoder.default] method. It replaces [RawJavaScript][ipyvizzu.json.RawJavaScript] object with `uuid` and it stores raw JavaScript code with `uuid` key in the `_raw_replacements` dictionary. \"\"\" if isinstance(o, RawJavaScript): key = uuid.uuid4().hex self._raw_replacements[key] = o.raw return key return json.JSONEncoder.default(self, o)","title":"default()"},{"location":"reference/ipyvizzu/#ipyvizzu.json.RawJavaScriptEncoder.encode","text":"Overrides JSONEncoder.encode method. It replaces uuids with raw JavaScript code without apostrophes. Source code in ipyvizzu/json.py def encode(self, o): \"\"\" Overrides [JSONEncoder.encode][json.JSONEncoder.encode] method. It replaces `uuids` with raw JavaScript code without apostrophes. \"\"\" result = json.JSONEncoder.encode(self, o) for key, val in self._raw_replacements.items(): result = result.replace(f'\"{key}\"', val) return result","title":"encode()"},{"location":"reference/ipyvizzu/#ipyvizzu.method","text":"A module for working with template methods.","title":"method"},{"location":"reference/ipyvizzu/#ipyvizzu.method.Method","text":"A class for storing and dumping any kind of data. Source code in ipyvizzu/method.py class Method: \"\"\"A class for storing and dumping any kind of data.\"\"\" # pylint: disable=too-few-public-methods _data: dict def dump(self) -> dict: \"\"\" A method for returning the stored data. Returns: The stored data. \"\"\" return self._data","title":"Method"},{"location":"reference/ipyvizzu/#ipyvizzu.method.Method.dump","text":"A method for returning the stored data. Returns: Type Description dict The stored data. Source code in ipyvizzu/method.py def dump(self) -> dict: \"\"\" A method for returning the stored data. Returns: The stored data. \"\"\" return self._data","title":"dump()"},{"location":"reference/ipyvizzu/#ipyvizzu.method.Animate","text":"Bases: Method A class for dumping chart independent parameters to DisplayTemplate.ANIMATE template. Source code in ipyvizzu/method.py class Animate(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.ANIMATE][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__( self, chart_target: Union[Animation, AnimationMerger], chart_anim_opts: Optional[dict] = None, ): \"\"\" Animate constructor. It stores and dumps `chart_target` and `chart_anim_opts` parameters. Args: chart_target: Animation object such as [Data][ipyvizzu.animation.Data] [Config][ipyvizzu.animation.Config] or [Style][ipyvizzu.animation.Style]. chart_anim_opts: Animation options' dictionary. If it is not set, it dumps `undefined`. \"\"\" self._data = { \"chart_target\": chart_target.dump(), \"chart_anim_opts\": PlainAnimation(chart_anim_opts).dump() if chart_anim_opts else \"undefined\", }","title":"Animate"},{"location":"reference/ipyvizzu/#ipyvizzu.method.Animate.__init__","text":"Animate constructor. It stores and dumps chart_target and chart_anim_opts parameters. Parameters: Name Type Description Default chart_target Union [ Animation , AnimationMerger ] Animation object such as Data Config or Style . required chart_anim_opts Optional [ dict ] Animation options' dictionary. If it is not set, it dumps undefined . None Source code in ipyvizzu/method.py def __init__( self, chart_target: Union[Animation, AnimationMerger], chart_anim_opts: Optional[dict] = None, ): \"\"\" Animate constructor. It stores and dumps `chart_target` and `chart_anim_opts` parameters. Args: chart_target: Animation object such as [Data][ipyvizzu.animation.Data] [Config][ipyvizzu.animation.Config] or [Style][ipyvizzu.animation.Style]. chart_anim_opts: Animation options' dictionary. If it is not set, it dumps `undefined`. \"\"\" self._data = { \"chart_target\": chart_target.dump(), \"chart_anim_opts\": PlainAnimation(chart_anim_opts).dump() if chart_anim_opts else \"undefined\", }","title":"__init__()"},{"location":"reference/ipyvizzu/#ipyvizzu.method.Feature","text":"Bases: Method A class for dumping chart independent parameters to DisplayTemplate.FEATURE template. Source code in ipyvizzu/method.py class Feature(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.FEATURE][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, name: str, enabled: bool): \"\"\" Feature constructor. It stores and dumps `name` and `enabled` parameters. Args: name: The name of a chart feature. enabled: The new state of a chart feature. \"\"\" self._data = {\"name\": name, \"enabled\": json.dumps(enabled)}","title":"Feature"},{"location":"reference/ipyvizzu/#ipyvizzu.method.Feature.__init__","text":"Feature constructor. It stores and dumps name and enabled parameters. Parameters: Name Type Description Default name str The name of a chart feature. required enabled bool The new state of a chart feature. required Source code in ipyvizzu/method.py def __init__(self, name: str, enabled: bool): \"\"\" Feature constructor. It stores and dumps `name` and `enabled` parameters. Args: name: The name of a chart feature. enabled: The new state of a chart feature. \"\"\" self._data = {\"name\": name, \"enabled\": json.dumps(enabled)}","title":"__init__()"},{"location":"reference/ipyvizzu/#ipyvizzu.method.Store","text":"Bases: Method A class for dumping chart independent parameters to DisplayTemplate.STORE template. Source code in ipyvizzu/method.py class Store(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.STORE][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, snapshot_id: str): \"\"\" Store constructor. It stores and dumps `snapshot_id` parameter. Args: snapshot_id: The id of snapshot object. \"\"\" self._data = {\"id\": snapshot_id}","title":"Store"},{"location":"reference/ipyvizzu/#ipyvizzu.method.Store.__init__","text":"Store constructor. It stores and dumps snapshot_id parameter. Parameters: Name Type Description Default snapshot_id str The id of snapshot object. required Source code in ipyvizzu/method.py def __init__(self, snapshot_id: str): \"\"\" Store constructor. It stores and dumps `snapshot_id` parameter. Args: snapshot_id: The id of snapshot object. \"\"\" self._data = {\"id\": snapshot_id}","title":"__init__()"},{"location":"reference/ipyvizzu/#ipyvizzu.method.EventOn","text":"Bases: Method A class for dumping chart independent parameters to DisplayTemplate.SET_EVENT template. Source code in ipyvizzu/method.py class EventOn(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.SET_EVENT][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, event_handler: EventHandler): \"\"\" EventOn constructor. It stores and dumps the `id`, the `event` and the `handler` of the event handler object. Args: event_handler: An event handler object. \"\"\" self._data = { \"id\": event_handler.id, \"event\": event_handler.event, \"handler\": event_handler.handler, }","title":"EventOn"},{"location":"reference/ipyvizzu/#ipyvizzu.method.EventOn.__init__","text":"EventOn constructor. It stores and dumps the id , the event and the handler of the event handler object. Parameters: Name Type Description Default event_handler EventHandler An event handler object. required Source code in ipyvizzu/method.py def __init__(self, event_handler: EventHandler): \"\"\" EventOn constructor. It stores and dumps the `id`, the `event` and the `handler` of the event handler object. Args: event_handler: An event handler object. \"\"\" self._data = { \"id\": event_handler.id, \"event\": event_handler.event, \"handler\": event_handler.handler, }","title":"__init__()"},{"location":"reference/ipyvizzu/#ipyvizzu.method.EventOff","text":"Bases: Method A class for dumping chart independent parameters to DisplayTemplate.CLEAR_EVENT template. Source code in ipyvizzu/method.py class EventOff(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.CLEAR_EVENT][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, event_handler: EventHandler): \"\"\" EventOff constructor. It stores and dumps the `id` and the `event` of the event handler object. Args: event_handler: An event handler object. \"\"\" self._data = {\"id\": event_handler.id, \"event\": event_handler.event}","title":"EventOff"},{"location":"reference/ipyvizzu/#ipyvizzu.method.EventOff.__init__","text":"EventOff constructor. It stores and dumps the id and the event of the event handler object. Parameters: Name Type Description Default event_handler EventHandler An event handler object. required Source code in ipyvizzu/method.py def __init__(self, event_handler: EventHandler): \"\"\" EventOff constructor. It stores and dumps the `id` and the `event` of the event handler object. Args: event_handler: An event handler object. \"\"\" self._data = {\"id\": event_handler.id, \"event\": event_handler.event}","title":"__init__()"},{"location":"reference/ipyvizzu/#ipyvizzu.method.Log","text":"Bases: Method A class for dumping chart independent parameters to DisplayTemplate.LOG template. Source code in ipyvizzu/method.py class Log(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.LOG][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, chart_property: ChartProperty): \"\"\" Log constructor. It stores and dumps the value of the chart property object. Args: chart_property: A chart property such as [CONFIG][ipyvizzu.template.ChartProperty] and [STYLE][ipyvizzu.template.ChartProperty]. \"\"\" self._data = {\"chart_property\": chart_property.value}","title":"Log"},{"location":"reference/ipyvizzu/#ipyvizzu.method.Log.__init__","text":"Log constructor. It stores and dumps the value of the chart property object. Parameters: Name Type Description Default chart_property ChartProperty A chart property such as CONFIG and STYLE . required Source code in ipyvizzu/method.py def __init__(self, chart_property: ChartProperty): \"\"\" Log constructor. It stores and dumps the value of the chart property object. Args: chart_property: A chart property such as [CONFIG][ipyvizzu.template.ChartProperty] and [STYLE][ipyvizzu.template.ChartProperty]. \"\"\" self._data = {\"chart_property\": chart_property.value}","title":"__init__()"},{"location":"reference/ipyvizzu/#ipyvizzu.schema","text":"A module for storing the data schema.","title":"schema"},{"location":"reference/ipyvizzu/#ipyvizzu.schema.NAMED_SCHEMA","text":"Store the schema of the series , dimensions and measures data types.","title":"NAMED_SCHEMA"},{"location":"reference/ipyvizzu/#ipyvizzu.schema.RECORD_SCHEMA","text":"Store the schema of the records data type.","title":"RECORD_SCHEMA"},{"location":"reference/ipyvizzu/#ipyvizzu.schema.DATA_SCHEMA","text":"Store the schema of the data animation.","title":"DATA_SCHEMA"},{"location":"reference/ipyvizzu/#ipyvizzu.template","text":"A module for storing the JavaScript templates.","title":"template"},{"location":"reference/ipyvizzu/#ipyvizzu.template.ChartProperty","text":"Bases: Enum An enum class for storing chart properties. Source code in ipyvizzu/template.py class ChartProperty(Enum): \"\"\"An enum class for storing chart properties.\"\"\" CONFIG = \"config\" \"\"\"An enum key-value for storing config chart property.\"\"\" STYLE = \"style\" \"\"\"An enum key-value for storing style chart property.\"\"\"","title":"ChartProperty"},{"location":"reference/ipyvizzu/#ipyvizzu.template.ChartProperty.CONFIG","text":"An enum key-value for storing config chart property.","title":"CONFIG"},{"location":"reference/ipyvizzu/#ipyvizzu.template.ChartProperty.STYLE","text":"An enum key-value for storing style chart property.","title":"STYLE"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTarget","text":"Bases: Enum An enum class for storing chart display options. Source code in ipyvizzu/template.py class DisplayTarget(Enum): \"\"\"An enum class for storing chart display options.\"\"\" BEGIN = \"begin\" \"\"\"Display all animation steps after the constructor's cell.\"\"\" END = \"end\" \"\"\"Display all animation steps after the last running cell.\"\"\" ACTUAL = \"actual\" \"\"\"Display the actual animation step after the currently running cell.\"\"\" MANUAL = \"manual\" \"\"\"Display all animation steps after calling a show method.\"\"\"","title":"DisplayTarget"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTarget.BEGIN","text":"Display all animation steps after the constructor's cell.","title":"BEGIN"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTarget.END","text":"Display all animation steps after the last running cell.","title":"END"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTarget.ACTUAL","text":"Display the actual animation step after the currently running cell.","title":"ACTUAL"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTarget.MANUAL","text":"Display all animation steps after calling a show method.","title":"MANUAL"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTemplate","text":"A class for storing JavaScript snippet templates. Source code in ipyvizzu/template.py class DisplayTemplate: \"\"\"A class for storing JavaScript snippet templates.\"\"\" # pylint: disable=too-few-public-methods IPYVIZZUJS: str = \"{ipyvizzujs}\" \"\"\"ipyvizzu JavaScript class.\"\"\" INIT: str = ( \"window.ipyvizzu.createChart(element, \" + \"'{chart_id}', '{vizzu}', '{div_width}', '{div_height}');\" ) \"\"\"Call createChart JavaScript method.\"\"\" ANIMATE: str = ( \"window.ipyvizzu.animate(element, \" + \"'{chart_id}', '{display_target}', {scroll}, \" + \"lib => {{ return {chart_target} }}, {chart_anim_opts});\" ) \"\"\"Call animate JavaScript method.\"\"\" FEATURE: str = ( \"window.ipyvizzu.feature(element, '{chart_id}', '{name}', {enabled});\" ) \"\"\"Call feature JavaScript method.\"\"\" STORE: str = \"window.ipyvizzu.store(element, '{chart_id}', '{id}');\" \"\"\"Call store JavaScript method.\"\"\" SET_EVENT: str = ( \"window.ipyvizzu.setEvent(element, \" + \"'{chart_id}', '{id}', '{event}', event => {{ {handler} }});\" ) \"\"\"Call setEvent JavaScript method.\"\"\" CLEAR_EVENT: str = ( \"window.ipyvizzu.clearEvent(element, '{chart_id}', '{id}', '{event}');\" ) \"\"\"Call clearEvent JavaScript method.\"\"\" LOG: str = \"window.ipyvizzu.log(element, '{chart_id}', '{chart_property}');\" \"\"\"Call log JavaScript method.\"\"\" CLEAR_INHIBITSCROLL: str = ( \"if (window.IpyVizzu) { window.IpyVizzu.clearInhibitScroll(element); }\" ) \"\"\"Call clearInhibitScroll JavaScript method if ipyvizzu JavaScript class exists.\"\"\"","title":"DisplayTemplate"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTemplate.IPYVIZZUJS","text":"ipyvizzu JavaScript class.","title":"IPYVIZZUJS"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTemplate.INIT","text":"Call createChart JavaScript method.","title":"INIT"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTemplate.ANIMATE","text":"Call animate JavaScript method.","title":"ANIMATE"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTemplate.FEATURE","text":"Call feature JavaScript method.","title":"FEATURE"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTemplate.STORE","text":"Call store JavaScript method.","title":"STORE"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTemplate.SET_EVENT","text":"Call setEvent JavaScript method.","title":"SET_EVENT"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTemplate.CLEAR_EVENT","text":"Call clearEvent JavaScript method.","title":"CLEAR_EVENT"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTemplate.LOG","text":"Call log JavaScript method.","title":"LOG"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTemplate.CLEAR_INHIBITSCROLL","text":"Call clearInhibitScroll JavaScript method if ipyvizzu JavaScript class exists.","title":"CLEAR_INHIBITSCROLL"},{"location":"reference/ipyvizzu/animation/","text":"ipyvizzu.animation A module for working with chart animations. ipyvizzu.animation.Animation An abstract class for representing animation objects that have dump and build methods. Source code in ipyvizzu/animation.py class Animation: \"\"\" An abstract class for representing animation objects that have `dump` and `build` methods. \"\"\" def dump(self) -> str: \"\"\" A method for converting the built dictionary into string. Returns: An str that has been json dumped with [RawJavaScriptEncoder][ipyvizzu.json.RawJavaScriptEncoder] from a dictionary. \"\"\" return json.dumps(self.build(), cls=RawJavaScriptEncoder) @abc.abstractmethod def build(self) -> dict: \"\"\" An abstract method for returning a dictionary with values that can be converted into json string. Returns: A dictionary that stored in the animation object. \"\"\" dump() A method for converting the built dictionary into string. Returns: Type Description str An str that has been json dumped with RawJavaScriptEncoder from a dictionary. Source code in ipyvizzu/animation.py def dump(self) -> str: \"\"\" A method for converting the built dictionary into string. Returns: An str that has been json dumped with [RawJavaScriptEncoder][ipyvizzu.json.RawJavaScriptEncoder] from a dictionary. \"\"\" return json.dumps(self.build(), cls=RawJavaScriptEncoder) build() abstractmethod An abstract method for returning a dictionary with values that can be converted into json string. Returns: Type Description dict A dictionary that stored in the animation object. Source code in ipyvizzu/animation.py @abc.abstractmethod def build(self) -> dict: \"\"\" An abstract method for returning a dictionary with values that can be converted into json string. Returns: A dictionary that stored in the animation object. \"\"\" ipyvizzu.animation.PlainAnimation Bases: dict , Animation A class for representing plain animation. It can build any dictionary. Source code in ipyvizzu/animation.py class PlainAnimation(dict, Animation): \"\"\" A class for representing plain animation. It can build any dictionary. \"\"\" def build(self) -> dict: \"\"\" A method for returning the plain animation dictionary. Returns: A dictionary that stored in the plain animation object. \"\"\" return self build() A method for returning the plain animation dictionary. Returns: Type Description dict A dictionary that stored in the plain animation object. Source code in ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for returning the plain animation dictionary. Returns: A dictionary that stored in the plain animation object. \"\"\" return self ipyvizzu.animation.InferType Bases: Enum An enum class for storing data infer types. Source code in ipyvizzu/animation.py class InferType(Enum): \"\"\"An enum class for storing data infer types.\"\"\" DIMENSION = \"dimension\" \"\"\"An enum key-value for storing dimension infer type.\"\"\" MEASURE = \"measure\" \"\"\"An enum key-value for storing measure infer type.\"\"\" DIMENSION = 'dimension' class-attribute An enum key-value for storing dimension infer type. MEASURE = 'measure' class-attribute An enum key-value for storing measure infer type. ipyvizzu.animation.Data Bases: dict , Animation A class for representing data animation. It can build data option of the chart. Source code in ipyvizzu/animation.py class Data(dict, Animation): \"\"\" A class for representing data animation. It can build data option of the chart. \"\"\" @classmethod def filter(cls, filter_expr: Optional[str] = None): # -> Data: \"\"\" A class method for creating a [Data][ipyvizzu.animation.Data] class instance with a data filter. Args: filter_expr: The JavaScript data filter expression. Returns: (Data): A data animation instance that contains a data filter. Example: Create a [Data][ipyvizzu.animation.Data] class with a data filter: filter = Data.filter(\"record['Genres'] == 'Pop'\") \"\"\" data = cls() data.set_filter(filter_expr) return data def set_filter(self, filter_expr: Optional[str] = None) -> None: \"\"\" A method for adding a filter to an existing [Data][ipyvizzu.animation.Data] class instance. Args: filter_expr: The JavaScript data filter expression. Example: Add a data filter to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.set_filter(\"record['Genres'] == 'Pop'\") \"\"\" filter_expr_raw_js = ( RawJavaScript(f\"record => {{ return ({' '.join(filter_expr.split())}) }}\") if filter_expr is not None else filter_expr ) self.update({\"filter\": filter_expr_raw_js}) @classmethod def from_json(cls, filename: Union[str, bytes, PathLike]): # -> Data: \"\"\" A method for returning a [Data][ipyvizzu.animation.Data] class instance which has been created from a json file. Args: filename: The path of the data source json file. Returns: (Data): A data animation instance that has been created from a json file. \"\"\" with open(filename, \"r\", encoding=\"utf8\") as file_desc: return cls(json.load(file_desc)) def add_record(self, record: list) -> None: \"\"\" A method for adding a record to an existing [Data][ipyvizzu.animation.Data] class instance. Args: record: A list that contains data values. Example: Adding a record to a [Data][ipyvizzu.animation.Data] class instance: data = Data() record = [\"Pop\", \"Hard\", 114] data.add_record(record) \"\"\" self._add_value(\"records\", record) def add_records(self, records: List[list]) -> None: \"\"\" A method for adding records to an existing [Data][ipyvizzu.animation.Data] class instance. Args: records: A list that contains data records. Example: Adding records to a [Data][ipyvizzu.animation.Data] class instance: data = Data() records = [ [\"Pop\", \"Hard\", 114], [\"Rock\", \"Hard\", 96], [\"Pop\", \"Experimental\", 127], [\"Rock\", \"Experimental\", 83], ] data.add_records(records) \"\"\" list(map(self.add_record, records)) def add_series(self, name: str, values: Optional[list] = None, **kwargs) -> None: \"\"\" A method for adding a series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the series. values: The data values of the series. **kwargs (Optional): Arbitrary keyword arguments. For example infer type can be set with the `type` keywod argument. Example: Adding a series without values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series(\"Genres\") Adding a series without values and with infer type to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series(\"Kinds\", type=\"dimension\") Adding a series with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series( \"Popularity\", [114, 96, 127, 83] ) \"\"\" self._add_named_value(\"series\", name, values, **kwargs) def add_dimension(self, name: str, values: Optional[list] = None, **kwargs) -> None: \"\"\" A method for adding a dimension to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the dimension. values: The data values of the dimension. **kwargs (Optional): Arbitrary keyword arguments. Example: Adding a dimension with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_dimension(\"Genres\", [\"Pop\", \"Rock\"]) \"\"\" self._add_named_value(\"dimensions\", name, values, **kwargs) def add_measure(self, name: str, values: Optional[list] = None, **kwargs) -> None: \"\"\" A method for adding a measure to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the measure. values: The data values of the measure. **kwargs (Optional): Arbitrary keyword arguments. Example: Adding a measure with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_measure( \"Popularity\", [ [114, 96], [127, 83], ], ) \"\"\" self._add_named_value(\"measures\", name, values, **kwargs) def add_data_frame( self, data_frame: Union[pd.DataFrame, pd.Series], default_measure_value: Optional[Any] = 0, default_dimension_value: Optional[Any] = \"\", ) -> None: \"\"\" A method for adding data frame to an existing [Data][ipyvizzu.animation.Data] class instance. Args: data_frame: The pandas data frame object. default_measure_value: The default measure value to fill the empty values. default_dimension_value: The default dimension value to fill the empty values. Raises: TypeError: If `data_frame` is not instance of [pd.DataFrame][pandas.DataFrame] or [pd.Series][pandas.Series]. Example: Adding a data frame to a [Data][ipyvizzu.animation.Data] class instance: data_frame = pd.DataFrame( { \"Genres\": [\"Pop\", \"Rock\", \"Pop\", \"Rock\"], \"Kinds\": [\"Hard\", \"Hard\", \"Experimental\", \"Experimental\"], \"Popularity\": [114, 96, 127, 83], } ) data = Data() data.add_data_frame(data_frame) \"\"\" if not isinstance(data_frame, type(None)): if isinstance(data_frame, pd.Series): data_frame = pd.DataFrame(data_frame) if not isinstance(data_frame, pd.DataFrame): raise TypeError( \"data_frame must be instance of pandas.DataFrame or pandas.Series\" ) for name in data_frame.columns: values = [] if is_numeric_dtype(data_frame[name].dtype): infer_type = InferType.MEASURE values = ( data_frame[name] .fillna(default_measure_value) .astype(float) .values.tolist() ) else: infer_type = InferType.DIMENSION values = ( data_frame[name] .fillna(default_dimension_value) .astype(str) .values.tolist() ) self.add_series( name, values, type=infer_type.value, ) def add_data_frame_index( self, data_frame: Union[pd.DataFrame, pd.Series], name: Optional[str], ) -> None: \"\"\" A method for adding data frame's index to an existing [Data][ipyvizzu.animation.Data] class instance. Args: data_frame: The pandas data frame object. name: The name of the index series. Raises: TypeError: If `data_frame` is not instance of [pd.DataFrame][pandas.DataFrame] or [pd.Series][pandas.Series]. Example: Adding a data frame's index to a [Data][ipyvizzu.animation.Data] class instance: data_frame = pd.DataFrame( {\"Popularity\": [114, 96]}, index=[\"x\", \"y\"] ) data = Data() data.add_data_frame_index(data_frame, \"DataFrameIndex\") data.add_data_frame(data_frame) \"\"\" if data_frame is not None: if isinstance(data_frame, pd.Series): data_frame = pd.DataFrame(data_frame) if not isinstance(data_frame, pd.DataFrame): raise TypeError( \"data_frame must be instance of pandas.DataFrame or pandas.Series\" ) self.add_series( str(name), [str(i) for i in data_frame.index], type=InferType.DIMENSION.value, ) def _add_named_value( self, dest: str, name: str, values: Optional[list] = None, **kwargs ) -> None: value = {\"name\": name, **kwargs} if values is not None: value[\"values\"] = values # type: ignore self._add_value(dest, value) def _add_value(self, dest: str, value: Union[dict, list]) -> None: self.setdefault(dest, []).append(value) def build(self) -> dict: \"\"\" A method for validating and returning the data animation dictionary. Returns: A dictionary that stored in the data animation object. It contains a `data` key whose value is the stored animation. \"\"\" jsonschema.validate(self, DATA_SCHEMA) return {\"data\": self} filter(filter_expr=None) classmethod A class method for creating a Data class instance with a data filter. Parameters: Name Type Description Default filter_expr Optional [ str ] The JavaScript data filter expression. None Returns: Type Description Data A data animation instance that contains a data filter. Example Create a Data class with a data filter: filter = Data.filter(\"record['Genres'] == 'Pop'\") Source code in ipyvizzu/animation.py @classmethod def filter(cls, filter_expr: Optional[str] = None): # -> Data: \"\"\" A class method for creating a [Data][ipyvizzu.animation.Data] class instance with a data filter. Args: filter_expr: The JavaScript data filter expression. Returns: (Data): A data animation instance that contains a data filter. Example: Create a [Data][ipyvizzu.animation.Data] class with a data filter: filter = Data.filter(\"record['Genres'] == 'Pop'\") \"\"\" data = cls() data.set_filter(filter_expr) return data set_filter(filter_expr=None) A method for adding a filter to an existing Data class instance. Parameters: Name Type Description Default filter_expr Optional [ str ] The JavaScript data filter expression. None Example Add a data filter to a Data class instance: data = Data() data.set_filter(\"record['Genres'] == 'Pop'\") Source code in ipyvizzu/animation.py def set_filter(self, filter_expr: Optional[str] = None) -> None: \"\"\" A method for adding a filter to an existing [Data][ipyvizzu.animation.Data] class instance. Args: filter_expr: The JavaScript data filter expression. Example: Add a data filter to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.set_filter(\"record['Genres'] == 'Pop'\") \"\"\" filter_expr_raw_js = ( RawJavaScript(f\"record => {{ return ({' '.join(filter_expr.split())}) }}\") if filter_expr is not None else filter_expr ) self.update({\"filter\": filter_expr_raw_js}) from_json(filename) classmethod A method for returning a Data class instance which has been created from a json file. Parameters: Name Type Description Default filename Union [ str , bytes , PathLike ] The path of the data source json file. required Returns: Type Description Data A data animation instance that has been created from a json file. Source code in ipyvizzu/animation.py @classmethod def from_json(cls, filename: Union[str, bytes, PathLike]): # -> Data: \"\"\" A method for returning a [Data][ipyvizzu.animation.Data] class instance which has been created from a json file. Args: filename: The path of the data source json file. Returns: (Data): A data animation instance that has been created from a json file. \"\"\" with open(filename, \"r\", encoding=\"utf8\") as file_desc: return cls(json.load(file_desc)) add_record(record) A method for adding a record to an existing Data class instance. Parameters: Name Type Description Default record list A list that contains data values. required Example Adding a record to a Data class instance: data = Data() record = [\"Pop\", \"Hard\", 114] data.add_record(record) Source code in ipyvizzu/animation.py def add_record(self, record: list) -> None: \"\"\" A method for adding a record to an existing [Data][ipyvizzu.animation.Data] class instance. Args: record: A list that contains data values. Example: Adding a record to a [Data][ipyvizzu.animation.Data] class instance: data = Data() record = [\"Pop\", \"Hard\", 114] data.add_record(record) \"\"\" self._add_value(\"records\", record) add_records(records) A method for adding records to an existing Data class instance. Parameters: Name Type Description Default records List [ list ] A list that contains data records. required Example Adding records to a Data class instance: data = Data() records = [ [\"Pop\", \"Hard\", 114], [\"Rock\", \"Hard\", 96], [\"Pop\", \"Experimental\", 127], [\"Rock\", \"Experimental\", 83], ] data.add_records(records) Source code in ipyvizzu/animation.py def add_records(self, records: List[list]) -> None: \"\"\" A method for adding records to an existing [Data][ipyvizzu.animation.Data] class instance. Args: records: A list that contains data records. Example: Adding records to a [Data][ipyvizzu.animation.Data] class instance: data = Data() records = [ [\"Pop\", \"Hard\", 114], [\"Rock\", \"Hard\", 96], [\"Pop\", \"Experimental\", 127], [\"Rock\", \"Experimental\", 83], ] data.add_records(records) \"\"\" list(map(self.add_record, records)) add_series(name, values=None, **kwargs) A method for adding a series to an existing Data class instance. Parameters: Name Type Description Default name str The name of the series. required values Optional [ list ] The data values of the series. None **kwargs Optional Arbitrary keyword arguments. For example infer type can be set with the type keywod argument. {} Example Adding a series without values to a Data class instance: data = Data() data.add_series(\"Genres\") Adding a series without values and with infer type to a Data class instance: data = Data() data.add_series(\"Kinds\", type=\"dimension\") Adding a series with values to a Data class instance: data = Data() data.add_series( \"Popularity\", [114, 96, 127, 83] ) Source code in ipyvizzu/animation.py def add_series(self, name: str, values: Optional[list] = None, **kwargs) -> None: \"\"\" A method for adding a series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the series. values: The data values of the series. **kwargs (Optional): Arbitrary keyword arguments. For example infer type can be set with the `type` keywod argument. Example: Adding a series without values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series(\"Genres\") Adding a series without values and with infer type to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series(\"Kinds\", type=\"dimension\") Adding a series with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series( \"Popularity\", [114, 96, 127, 83] ) \"\"\" self._add_named_value(\"series\", name, values, **kwargs) add_dimension(name, values=None, **kwargs) A method for adding a dimension to an existing Data class instance. Parameters: Name Type Description Default name str The name of the dimension. required values Optional [ list ] The data values of the dimension. None **kwargs Optional Arbitrary keyword arguments. {} Example Adding a dimension with values to a Data class instance: data = Data() data.add_dimension(\"Genres\", [\"Pop\", \"Rock\"]) Source code in ipyvizzu/animation.py def add_dimension(self, name: str, values: Optional[list] = None, **kwargs) -> None: \"\"\" A method for adding a dimension to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the dimension. values: The data values of the dimension. **kwargs (Optional): Arbitrary keyword arguments. Example: Adding a dimension with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_dimension(\"Genres\", [\"Pop\", \"Rock\"]) \"\"\" self._add_named_value(\"dimensions\", name, values, **kwargs) add_measure(name, values=None, **kwargs) A method for adding a measure to an existing Data class instance. Parameters: Name Type Description Default name str The name of the measure. required values Optional [ list ] The data values of the measure. None **kwargs Optional Arbitrary keyword arguments. {} Example Adding a measure with values to a Data class instance: data = Data() data.add_measure( \"Popularity\", [ [114, 96], [127, 83], ], ) Source code in ipyvizzu/animation.py def add_measure(self, name: str, values: Optional[list] = None, **kwargs) -> None: \"\"\" A method for adding a measure to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the measure. values: The data values of the measure. **kwargs (Optional): Arbitrary keyword arguments. Example: Adding a measure with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_measure( \"Popularity\", [ [114, 96], [127, 83], ], ) \"\"\" self._add_named_value(\"measures\", name, values, **kwargs) add_data_frame(data_frame, default_measure_value=0, default_dimension_value='') A method for adding data frame to an existing Data class instance. Parameters: Name Type Description Default data_frame Union [ pd . DataFrame , pd . Series ] The pandas data frame object. required default_measure_value Optional [ Any ] The default measure value to fill the empty values. 0 default_dimension_value Optional [ Any ] The default dimension value to fill the empty values. '' Raises: Type Description TypeError If data_frame is not instance of pd.DataFrame or pd.Series . Example Adding a data frame to a Data class instance: data_frame = pd.DataFrame( { \"Genres\": [\"Pop\", \"Rock\", \"Pop\", \"Rock\"], \"Kinds\": [\"Hard\", \"Hard\", \"Experimental\", \"Experimental\"], \"Popularity\": [114, 96, 127, 83], } ) data = Data() data.add_data_frame(data_frame) Source code in ipyvizzu/animation.py def add_data_frame( self, data_frame: Union[pd.DataFrame, pd.Series], default_measure_value: Optional[Any] = 0, default_dimension_value: Optional[Any] = \"\", ) -> None: \"\"\" A method for adding data frame to an existing [Data][ipyvizzu.animation.Data] class instance. Args: data_frame: The pandas data frame object. default_measure_value: The default measure value to fill the empty values. default_dimension_value: The default dimension value to fill the empty values. Raises: TypeError: If `data_frame` is not instance of [pd.DataFrame][pandas.DataFrame] or [pd.Series][pandas.Series]. Example: Adding a data frame to a [Data][ipyvizzu.animation.Data] class instance: data_frame = pd.DataFrame( { \"Genres\": [\"Pop\", \"Rock\", \"Pop\", \"Rock\"], \"Kinds\": [\"Hard\", \"Hard\", \"Experimental\", \"Experimental\"], \"Popularity\": [114, 96, 127, 83], } ) data = Data() data.add_data_frame(data_frame) \"\"\" if not isinstance(data_frame, type(None)): if isinstance(data_frame, pd.Series): data_frame = pd.DataFrame(data_frame) if not isinstance(data_frame, pd.DataFrame): raise TypeError( \"data_frame must be instance of pandas.DataFrame or pandas.Series\" ) for name in data_frame.columns: values = [] if is_numeric_dtype(data_frame[name].dtype): infer_type = InferType.MEASURE values = ( data_frame[name] .fillna(default_measure_value) .astype(float) .values.tolist() ) else: infer_type = InferType.DIMENSION values = ( data_frame[name] .fillna(default_dimension_value) .astype(str) .values.tolist() ) self.add_series( name, values, type=infer_type.value, ) add_data_frame_index(data_frame, name) A method for adding data frame's index to an existing Data class instance. Parameters: Name Type Description Default data_frame Union [ pd . DataFrame , pd . Series ] The pandas data frame object. required name Optional [ str ] The name of the index series. required Raises: Type Description TypeError If data_frame is not instance of pd.DataFrame or pd.Series . Example Adding a data frame's index to a Data class instance: data_frame = pd.DataFrame( {\"Popularity\": [114, 96]}, index=[\"x\", \"y\"] ) data = Data() data.add_data_frame_index(data_frame, \"DataFrameIndex\") data.add_data_frame(data_frame) Source code in ipyvizzu/animation.py def add_data_frame_index( self, data_frame: Union[pd.DataFrame, pd.Series], name: Optional[str], ) -> None: \"\"\" A method for adding data frame's index to an existing [Data][ipyvizzu.animation.Data] class instance. Args: data_frame: The pandas data frame object. name: The name of the index series. Raises: TypeError: If `data_frame` is not instance of [pd.DataFrame][pandas.DataFrame] or [pd.Series][pandas.Series]. Example: Adding a data frame's index to a [Data][ipyvizzu.animation.Data] class instance: data_frame = pd.DataFrame( {\"Popularity\": [114, 96]}, index=[\"x\", \"y\"] ) data = Data() data.add_data_frame_index(data_frame, \"DataFrameIndex\") data.add_data_frame(data_frame) \"\"\" if data_frame is not None: if isinstance(data_frame, pd.Series): data_frame = pd.DataFrame(data_frame) if not isinstance(data_frame, pd.DataFrame): raise TypeError( \"data_frame must be instance of pandas.DataFrame or pandas.Series\" ) self.add_series( str(name), [str(i) for i in data_frame.index], type=InferType.DIMENSION.value, ) build() A method for validating and returning the data animation dictionary. Returns: Type Description dict A dictionary that stored in the data animation object. It contains a data key whose value is the stored animation. Source code in ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for validating and returning the data animation dictionary. Returns: A dictionary that stored in the data animation object. It contains a `data` key whose value is the stored animation. \"\"\" jsonschema.validate(self, DATA_SCHEMA) return {\"data\": self} ipyvizzu.animation.ConfigAttr Bases: type A metaclass class for the Config class. Returns a Config class with a chart preset if the __getattr__ method called. Source code in ipyvizzu/animation.py class ConfigAttr(type): \"\"\" A metaclass class for the [Config][ipyvizzu.animation.Config] class. Returns a [Config][ipyvizzu.animation.Config] class with a chart preset if the `__getattr__` method called. \"\"\" @classmethod def __getattr__(mcs, name): config_attr = mcs(\"ConfigAttr\", (object,), {\"name\": name}) return config_attr._get_preset # pylint: disable=no-member def _get_preset(cls, preset): config = Config(RawJavaScript(f\"lib.presets.{cls.name}({preset})\")) return config ipyvizzu.animation.Config Bases: Animation A class for representing config animation. It can build config option of the chart. Source code in ipyvizzu/animation.py class Config(Animation, metaclass=ConfigAttr): \"\"\" A class for representing config animation. It can build config option of the chart. \"\"\" def __init__(self, data: Optional[dict]): \"\"\" Config constructor. Args: data: A config animation dictionary. \"\"\" self._data = data def build(self) -> dict: \"\"\" A method for returning the config animation dictionary. Returns: A dictionary that stored in the config animation object. It contains a `config` key whose value is the stored animation. \"\"\" return {\"config\": self._data} __init__(data) Config constructor. Parameters: Name Type Description Default data Optional [ dict ] A config animation dictionary. required Source code in ipyvizzu/animation.py def __init__(self, data: Optional[dict]): \"\"\" Config constructor. Args: data: A config animation dictionary. \"\"\" self._data = data build() A method for returning the config animation dictionary. Returns: Type Description dict A dictionary that stored in the config animation object. It contains a config key whose value is the stored animation. Source code in ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for returning the config animation dictionary. Returns: A dictionary that stored in the config animation object. It contains a `config` key whose value is the stored animation. \"\"\" return {\"config\": self._data} ipyvizzu.animation.Style Bases: Animation A class for representing style animation. It can build style option of the chart. Source code in ipyvizzu/animation.py class Style(Animation): \"\"\" A class for representing style animation. It can build style option of the chart. \"\"\" def __init__(self, data: Optional[dict]): \"\"\" Style constructor. Args: data: A style animation dictionary. \"\"\" self._data = data def build(self) -> dict: \"\"\" A method for returning the style animation dictionary. Returns: A dictionary that stored in the style animation object. It contains a `style` key whose value is the stored animation. \"\"\" return {\"style\": self._data} __init__(data) Style constructor. Parameters: Name Type Description Default data Optional [ dict ] A style animation dictionary. required Source code in ipyvizzu/animation.py def __init__(self, data: Optional[dict]): \"\"\" Style constructor. Args: data: A style animation dictionary. \"\"\" self._data = data build() A method for returning the style animation dictionary. Returns: Type Description dict A dictionary that stored in the style animation object. It contains a style key whose value is the stored animation. Source code in ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for returning the style animation dictionary. Returns: A dictionary that stored in the style animation object. It contains a `style` key whose value is the stored animation. \"\"\" return {\"style\": self._data} ipyvizzu.animation.Snapshot Bases: Animation A class for representing snapshot animation. It can build the snapshot id of the chart. Source code in ipyvizzu/animation.py class Snapshot(Animation): \"\"\" A class for representing snapshot animation. It can build the snapshot id of the chart. \"\"\" def __init__(self, name: str): \"\"\" Snapshot constructor. Args: name: A snapshot id. \"\"\" self._name = name def dump(self) -> str: \"\"\" A method for overwriting the [Animation.dump][ipyvizzu.animation.Animation.dump] method. It dumps the stored snapshot id as a string. Returns: An str that contains the stored snapshot id. \"\"\" return f\"'{self._name}'\" def build(self): \"\"\" A method for preventing to merge [Snapshot][ipyvizzu.animation.Snapshot] with other animations. Raises: NotImplementedError: If the [build][ipyvizzu.animation.Snapshot.build] method has been called, because [Snapshot][ipyvizzu.animation.Snapshot] cannot be merged with other animations. \"\"\" raise NotImplementedError(\"Snapshot cannot be merged with other animations\") __init__(name) Snapshot constructor. Parameters: Name Type Description Default name str A snapshot id. required Source code in ipyvizzu/animation.py def __init__(self, name: str): \"\"\" Snapshot constructor. Args: name: A snapshot id. \"\"\" self._name = name dump() A method for overwriting the Animation.dump method. It dumps the stored snapshot id as a string. Returns: Type Description str An str that contains the stored snapshot id. Source code in ipyvizzu/animation.py def dump(self) -> str: \"\"\" A method for overwriting the [Animation.dump][ipyvizzu.animation.Animation.dump] method. It dumps the stored snapshot id as a string. Returns: An str that contains the stored snapshot id. \"\"\" return f\"'{self._name}'\" build() A method for preventing to merge Snapshot with other animations. Raises: Type Description NotImplementedError If the build method has been called, because Snapshot cannot be merged with other animations. Source code in ipyvizzu/animation.py def build(self): \"\"\" A method for preventing to merge [Snapshot][ipyvizzu.animation.Snapshot] with other animations. Raises: NotImplementedError: If the [build][ipyvizzu.animation.Snapshot.build] method has been called, because [Snapshot][ipyvizzu.animation.Snapshot] cannot be merged with other animations. \"\"\" raise NotImplementedError(\"Snapshot cannot be merged with other animations\") ipyvizzu.animation.AnimationMerger Bases: dict , Animation A class for merging different types of animations. Source code in ipyvizzu/animation.py class AnimationMerger(dict, Animation): \"\"\"A class for merging different types of animations.\"\"\" def merge(self, animation: Animation) -> None: \"\"\" A method for merging an animation with the previously merged animations. Args: animation: An animation to be merged with with previously merged animations. Raises: ValueError: If the type of an animation is already merged. \"\"\" data = self._validate(animation) self.update(data) def _validate(self, animation: Animation) -> dict: data = animation.build() common_keys = set(data).intersection(self) if common_keys: raise ValueError(f\"Animation is already merged: {common_keys}\") return data def build(self) -> dict: \"\"\" A method for returning a merged dictionary from different types of animations. Returns: A merged dictionary from [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style] animations. \"\"\" return self merge(animation) A method for merging an animation with the previously merged animations. Parameters: Name Type Description Default animation Animation An animation to be merged with with previously merged animations. required Raises: Type Description ValueError If the type of an animation is already merged. Source code in ipyvizzu/animation.py def merge(self, animation: Animation) -> None: \"\"\" A method for merging an animation with the previously merged animations. Args: animation: An animation to be merged with with previously merged animations. Raises: ValueError: If the type of an animation is already merged. \"\"\" data = self._validate(animation) self.update(data) build() A method for returning a merged dictionary from different types of animations. Returns: Type Description dict A merged dictionary from Data , Config and Style animations. Source code in ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for returning a merged dictionary from different types of animations. Returns: A merged dictionary from [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style] animations. \"\"\" return self","title":"Animation"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation","text":"A module for working with chart animations.","title":"animation"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Animation","text":"An abstract class for representing animation objects that have dump and build methods. Source code in ipyvizzu/animation.py class Animation: \"\"\" An abstract class for representing animation objects that have `dump` and `build` methods. \"\"\" def dump(self) -> str: \"\"\" A method for converting the built dictionary into string. Returns: An str that has been json dumped with [RawJavaScriptEncoder][ipyvizzu.json.RawJavaScriptEncoder] from a dictionary. \"\"\" return json.dumps(self.build(), cls=RawJavaScriptEncoder) @abc.abstractmethod def build(self) -> dict: \"\"\" An abstract method for returning a dictionary with values that can be converted into json string. Returns: A dictionary that stored in the animation object. \"\"\"","title":"Animation"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Animation.dump","text":"A method for converting the built dictionary into string. Returns: Type Description str An str that has been json dumped with RawJavaScriptEncoder from a dictionary. Source code in ipyvizzu/animation.py def dump(self) -> str: \"\"\" A method for converting the built dictionary into string. Returns: An str that has been json dumped with [RawJavaScriptEncoder][ipyvizzu.json.RawJavaScriptEncoder] from a dictionary. \"\"\" return json.dumps(self.build(), cls=RawJavaScriptEncoder)","title":"dump()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Animation.build","text":"An abstract method for returning a dictionary with values that can be converted into json string. Returns: Type Description dict A dictionary that stored in the animation object. Source code in ipyvizzu/animation.py @abc.abstractmethod def build(self) -> dict: \"\"\" An abstract method for returning a dictionary with values that can be converted into json string. Returns: A dictionary that stored in the animation object. \"\"\"","title":"build()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.PlainAnimation","text":"Bases: dict , Animation A class for representing plain animation. It can build any dictionary. Source code in ipyvizzu/animation.py class PlainAnimation(dict, Animation): \"\"\" A class for representing plain animation. It can build any dictionary. \"\"\" def build(self) -> dict: \"\"\" A method for returning the plain animation dictionary. Returns: A dictionary that stored in the plain animation object. \"\"\" return self","title":"PlainAnimation"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.PlainAnimation.build","text":"A method for returning the plain animation dictionary. Returns: Type Description dict A dictionary that stored in the plain animation object. Source code in ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for returning the plain animation dictionary. Returns: A dictionary that stored in the plain animation object. \"\"\" return self","title":"build()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.InferType","text":"Bases: Enum An enum class for storing data infer types. Source code in ipyvizzu/animation.py class InferType(Enum): \"\"\"An enum class for storing data infer types.\"\"\" DIMENSION = \"dimension\" \"\"\"An enum key-value for storing dimension infer type.\"\"\" MEASURE = \"measure\" \"\"\"An enum key-value for storing measure infer type.\"\"\"","title":"InferType"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.InferType.DIMENSION","text":"An enum key-value for storing dimension infer type.","title":"DIMENSION"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.InferType.MEASURE","text":"An enum key-value for storing measure infer type.","title":"MEASURE"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Data","text":"Bases: dict , Animation A class for representing data animation. It can build data option of the chart. Source code in ipyvizzu/animation.py class Data(dict, Animation): \"\"\" A class for representing data animation. It can build data option of the chart. \"\"\" @classmethod def filter(cls, filter_expr: Optional[str] = None): # -> Data: \"\"\" A class method for creating a [Data][ipyvizzu.animation.Data] class instance with a data filter. Args: filter_expr: The JavaScript data filter expression. Returns: (Data): A data animation instance that contains a data filter. Example: Create a [Data][ipyvizzu.animation.Data] class with a data filter: filter = Data.filter(\"record['Genres'] == 'Pop'\") \"\"\" data = cls() data.set_filter(filter_expr) return data def set_filter(self, filter_expr: Optional[str] = None) -> None: \"\"\" A method for adding a filter to an existing [Data][ipyvizzu.animation.Data] class instance. Args: filter_expr: The JavaScript data filter expression. Example: Add a data filter to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.set_filter(\"record['Genres'] == 'Pop'\") \"\"\" filter_expr_raw_js = ( RawJavaScript(f\"record => {{ return ({' '.join(filter_expr.split())}) }}\") if filter_expr is not None else filter_expr ) self.update({\"filter\": filter_expr_raw_js}) @classmethod def from_json(cls, filename: Union[str, bytes, PathLike]): # -> Data: \"\"\" A method for returning a [Data][ipyvizzu.animation.Data] class instance which has been created from a json file. Args: filename: The path of the data source json file. Returns: (Data): A data animation instance that has been created from a json file. \"\"\" with open(filename, \"r\", encoding=\"utf8\") as file_desc: return cls(json.load(file_desc)) def add_record(self, record: list) -> None: \"\"\" A method for adding a record to an existing [Data][ipyvizzu.animation.Data] class instance. Args: record: A list that contains data values. Example: Adding a record to a [Data][ipyvizzu.animation.Data] class instance: data = Data() record = [\"Pop\", \"Hard\", 114] data.add_record(record) \"\"\" self._add_value(\"records\", record) def add_records(self, records: List[list]) -> None: \"\"\" A method for adding records to an existing [Data][ipyvizzu.animation.Data] class instance. Args: records: A list that contains data records. Example: Adding records to a [Data][ipyvizzu.animation.Data] class instance: data = Data() records = [ [\"Pop\", \"Hard\", 114], [\"Rock\", \"Hard\", 96], [\"Pop\", \"Experimental\", 127], [\"Rock\", \"Experimental\", 83], ] data.add_records(records) \"\"\" list(map(self.add_record, records)) def add_series(self, name: str, values: Optional[list] = None, **kwargs) -> None: \"\"\" A method for adding a series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the series. values: The data values of the series. **kwargs (Optional): Arbitrary keyword arguments. For example infer type can be set with the `type` keywod argument. Example: Adding a series without values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series(\"Genres\") Adding a series without values and with infer type to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series(\"Kinds\", type=\"dimension\") Adding a series with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series( \"Popularity\", [114, 96, 127, 83] ) \"\"\" self._add_named_value(\"series\", name, values, **kwargs) def add_dimension(self, name: str, values: Optional[list] = None, **kwargs) -> None: \"\"\" A method for adding a dimension to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the dimension. values: The data values of the dimension. **kwargs (Optional): Arbitrary keyword arguments. Example: Adding a dimension with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_dimension(\"Genres\", [\"Pop\", \"Rock\"]) \"\"\" self._add_named_value(\"dimensions\", name, values, **kwargs) def add_measure(self, name: str, values: Optional[list] = None, **kwargs) -> None: \"\"\" A method for adding a measure to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the measure. values: The data values of the measure. **kwargs (Optional): Arbitrary keyword arguments. Example: Adding a measure with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_measure( \"Popularity\", [ [114, 96], [127, 83], ], ) \"\"\" self._add_named_value(\"measures\", name, values, **kwargs) def add_data_frame( self, data_frame: Union[pd.DataFrame, pd.Series], default_measure_value: Optional[Any] = 0, default_dimension_value: Optional[Any] = \"\", ) -> None: \"\"\" A method for adding data frame to an existing [Data][ipyvizzu.animation.Data] class instance. Args: data_frame: The pandas data frame object. default_measure_value: The default measure value to fill the empty values. default_dimension_value: The default dimension value to fill the empty values. Raises: TypeError: If `data_frame` is not instance of [pd.DataFrame][pandas.DataFrame] or [pd.Series][pandas.Series]. Example: Adding a data frame to a [Data][ipyvizzu.animation.Data] class instance: data_frame = pd.DataFrame( { \"Genres\": [\"Pop\", \"Rock\", \"Pop\", \"Rock\"], \"Kinds\": [\"Hard\", \"Hard\", \"Experimental\", \"Experimental\"], \"Popularity\": [114, 96, 127, 83], } ) data = Data() data.add_data_frame(data_frame) \"\"\" if not isinstance(data_frame, type(None)): if isinstance(data_frame, pd.Series): data_frame = pd.DataFrame(data_frame) if not isinstance(data_frame, pd.DataFrame): raise TypeError( \"data_frame must be instance of pandas.DataFrame or pandas.Series\" ) for name in data_frame.columns: values = [] if is_numeric_dtype(data_frame[name].dtype): infer_type = InferType.MEASURE values = ( data_frame[name] .fillna(default_measure_value) .astype(float) .values.tolist() ) else: infer_type = InferType.DIMENSION values = ( data_frame[name] .fillna(default_dimension_value) .astype(str) .values.tolist() ) self.add_series( name, values, type=infer_type.value, ) def add_data_frame_index( self, data_frame: Union[pd.DataFrame, pd.Series], name: Optional[str], ) -> None: \"\"\" A method for adding data frame's index to an existing [Data][ipyvizzu.animation.Data] class instance. Args: data_frame: The pandas data frame object. name: The name of the index series. Raises: TypeError: If `data_frame` is not instance of [pd.DataFrame][pandas.DataFrame] or [pd.Series][pandas.Series]. Example: Adding a data frame's index to a [Data][ipyvizzu.animation.Data] class instance: data_frame = pd.DataFrame( {\"Popularity\": [114, 96]}, index=[\"x\", \"y\"] ) data = Data() data.add_data_frame_index(data_frame, \"DataFrameIndex\") data.add_data_frame(data_frame) \"\"\" if data_frame is not None: if isinstance(data_frame, pd.Series): data_frame = pd.DataFrame(data_frame) if not isinstance(data_frame, pd.DataFrame): raise TypeError( \"data_frame must be instance of pandas.DataFrame or pandas.Series\" ) self.add_series( str(name), [str(i) for i in data_frame.index], type=InferType.DIMENSION.value, ) def _add_named_value( self, dest: str, name: str, values: Optional[list] = None, **kwargs ) -> None: value = {\"name\": name, **kwargs} if values is not None: value[\"values\"] = values # type: ignore self._add_value(dest, value) def _add_value(self, dest: str, value: Union[dict, list]) -> None: self.setdefault(dest, []).append(value) def build(self) -> dict: \"\"\" A method for validating and returning the data animation dictionary. Returns: A dictionary that stored in the data animation object. It contains a `data` key whose value is the stored animation. \"\"\" jsonschema.validate(self, DATA_SCHEMA) return {\"data\": self}","title":"Data"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Data.filter","text":"A class method for creating a Data class instance with a data filter. Parameters: Name Type Description Default filter_expr Optional [ str ] The JavaScript data filter expression. None Returns: Type Description Data A data animation instance that contains a data filter. Example Create a Data class with a data filter: filter = Data.filter(\"record['Genres'] == 'Pop'\") Source code in ipyvizzu/animation.py @classmethod def filter(cls, filter_expr: Optional[str] = None): # -> Data: \"\"\" A class method for creating a [Data][ipyvizzu.animation.Data] class instance with a data filter. Args: filter_expr: The JavaScript data filter expression. Returns: (Data): A data animation instance that contains a data filter. Example: Create a [Data][ipyvizzu.animation.Data] class with a data filter: filter = Data.filter(\"record['Genres'] == 'Pop'\") \"\"\" data = cls() data.set_filter(filter_expr) return data","title":"filter()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Data.set_filter","text":"A method for adding a filter to an existing Data class instance. Parameters: Name Type Description Default filter_expr Optional [ str ] The JavaScript data filter expression. None Example Add a data filter to a Data class instance: data = Data() data.set_filter(\"record['Genres'] == 'Pop'\") Source code in ipyvizzu/animation.py def set_filter(self, filter_expr: Optional[str] = None) -> None: \"\"\" A method for adding a filter to an existing [Data][ipyvizzu.animation.Data] class instance. Args: filter_expr: The JavaScript data filter expression. Example: Add a data filter to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.set_filter(\"record['Genres'] == 'Pop'\") \"\"\" filter_expr_raw_js = ( RawJavaScript(f\"record => {{ return ({' '.join(filter_expr.split())}) }}\") if filter_expr is not None else filter_expr ) self.update({\"filter\": filter_expr_raw_js})","title":"set_filter()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Data.from_json","text":"A method for returning a Data class instance which has been created from a json file. Parameters: Name Type Description Default filename Union [ str , bytes , PathLike ] The path of the data source json file. required Returns: Type Description Data A data animation instance that has been created from a json file. Source code in ipyvizzu/animation.py @classmethod def from_json(cls, filename: Union[str, bytes, PathLike]): # -> Data: \"\"\" A method for returning a [Data][ipyvizzu.animation.Data] class instance which has been created from a json file. Args: filename: The path of the data source json file. Returns: (Data): A data animation instance that has been created from a json file. \"\"\" with open(filename, \"r\", encoding=\"utf8\") as file_desc: return cls(json.load(file_desc))","title":"from_json()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Data.add_record","text":"A method for adding a record to an existing Data class instance. Parameters: Name Type Description Default record list A list that contains data values. required Example Adding a record to a Data class instance: data = Data() record = [\"Pop\", \"Hard\", 114] data.add_record(record) Source code in ipyvizzu/animation.py def add_record(self, record: list) -> None: \"\"\" A method for adding a record to an existing [Data][ipyvizzu.animation.Data] class instance. Args: record: A list that contains data values. Example: Adding a record to a [Data][ipyvizzu.animation.Data] class instance: data = Data() record = [\"Pop\", \"Hard\", 114] data.add_record(record) \"\"\" self._add_value(\"records\", record)","title":"add_record()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Data.add_records","text":"A method for adding records to an existing Data class instance. Parameters: Name Type Description Default records List [ list ] A list that contains data records. required Example Adding records to a Data class instance: data = Data() records = [ [\"Pop\", \"Hard\", 114], [\"Rock\", \"Hard\", 96], [\"Pop\", \"Experimental\", 127], [\"Rock\", \"Experimental\", 83], ] data.add_records(records) Source code in ipyvizzu/animation.py def add_records(self, records: List[list]) -> None: \"\"\" A method for adding records to an existing [Data][ipyvizzu.animation.Data] class instance. Args: records: A list that contains data records. Example: Adding records to a [Data][ipyvizzu.animation.Data] class instance: data = Data() records = [ [\"Pop\", \"Hard\", 114], [\"Rock\", \"Hard\", 96], [\"Pop\", \"Experimental\", 127], [\"Rock\", \"Experimental\", 83], ] data.add_records(records) \"\"\" list(map(self.add_record, records))","title":"add_records()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Data.add_series","text":"A method for adding a series to an existing Data class instance. Parameters: Name Type Description Default name str The name of the series. required values Optional [ list ] The data values of the series. None **kwargs Optional Arbitrary keyword arguments. For example infer type can be set with the type keywod argument. {} Example Adding a series without values to a Data class instance: data = Data() data.add_series(\"Genres\") Adding a series without values and with infer type to a Data class instance: data = Data() data.add_series(\"Kinds\", type=\"dimension\") Adding a series with values to a Data class instance: data = Data() data.add_series( \"Popularity\", [114, 96, 127, 83] ) Source code in ipyvizzu/animation.py def add_series(self, name: str, values: Optional[list] = None, **kwargs) -> None: \"\"\" A method for adding a series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the series. values: The data values of the series. **kwargs (Optional): Arbitrary keyword arguments. For example infer type can be set with the `type` keywod argument. Example: Adding a series without values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series(\"Genres\") Adding a series without values and with infer type to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series(\"Kinds\", type=\"dimension\") Adding a series with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series( \"Popularity\", [114, 96, 127, 83] ) \"\"\" self._add_named_value(\"series\", name, values, **kwargs)","title":"add_series()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Data.add_dimension","text":"A method for adding a dimension to an existing Data class instance. Parameters: Name Type Description Default name str The name of the dimension. required values Optional [ list ] The data values of the dimension. None **kwargs Optional Arbitrary keyword arguments. {} Example Adding a dimension with values to a Data class instance: data = Data() data.add_dimension(\"Genres\", [\"Pop\", \"Rock\"]) Source code in ipyvizzu/animation.py def add_dimension(self, name: str, values: Optional[list] = None, **kwargs) -> None: \"\"\" A method for adding a dimension to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the dimension. values: The data values of the dimension. **kwargs (Optional): Arbitrary keyword arguments. Example: Adding a dimension with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_dimension(\"Genres\", [\"Pop\", \"Rock\"]) \"\"\" self._add_named_value(\"dimensions\", name, values, **kwargs)","title":"add_dimension()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Data.add_measure","text":"A method for adding a measure to an existing Data class instance. Parameters: Name Type Description Default name str The name of the measure. required values Optional [ list ] The data values of the measure. None **kwargs Optional Arbitrary keyword arguments. {} Example Adding a measure with values to a Data class instance: data = Data() data.add_measure( \"Popularity\", [ [114, 96], [127, 83], ], ) Source code in ipyvizzu/animation.py def add_measure(self, name: str, values: Optional[list] = None, **kwargs) -> None: \"\"\" A method for adding a measure to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the measure. values: The data values of the measure. **kwargs (Optional): Arbitrary keyword arguments. Example: Adding a measure with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_measure( \"Popularity\", [ [114, 96], [127, 83], ], ) \"\"\" self._add_named_value(\"measures\", name, values, **kwargs)","title":"add_measure()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Data.add_data_frame","text":"A method for adding data frame to an existing Data class instance. Parameters: Name Type Description Default data_frame Union [ pd . DataFrame , pd . Series ] The pandas data frame object. required default_measure_value Optional [ Any ] The default measure value to fill the empty values. 0 default_dimension_value Optional [ Any ] The default dimension value to fill the empty values. '' Raises: Type Description TypeError If data_frame is not instance of pd.DataFrame or pd.Series . Example Adding a data frame to a Data class instance: data_frame = pd.DataFrame( { \"Genres\": [\"Pop\", \"Rock\", \"Pop\", \"Rock\"], \"Kinds\": [\"Hard\", \"Hard\", \"Experimental\", \"Experimental\"], \"Popularity\": [114, 96, 127, 83], } ) data = Data() data.add_data_frame(data_frame) Source code in ipyvizzu/animation.py def add_data_frame( self, data_frame: Union[pd.DataFrame, pd.Series], default_measure_value: Optional[Any] = 0, default_dimension_value: Optional[Any] = \"\", ) -> None: \"\"\" A method for adding data frame to an existing [Data][ipyvizzu.animation.Data] class instance. Args: data_frame: The pandas data frame object. default_measure_value: The default measure value to fill the empty values. default_dimension_value: The default dimension value to fill the empty values. Raises: TypeError: If `data_frame` is not instance of [pd.DataFrame][pandas.DataFrame] or [pd.Series][pandas.Series]. Example: Adding a data frame to a [Data][ipyvizzu.animation.Data] class instance: data_frame = pd.DataFrame( { \"Genres\": [\"Pop\", \"Rock\", \"Pop\", \"Rock\"], \"Kinds\": [\"Hard\", \"Hard\", \"Experimental\", \"Experimental\"], \"Popularity\": [114, 96, 127, 83], } ) data = Data() data.add_data_frame(data_frame) \"\"\" if not isinstance(data_frame, type(None)): if isinstance(data_frame, pd.Series): data_frame = pd.DataFrame(data_frame) if not isinstance(data_frame, pd.DataFrame): raise TypeError( \"data_frame must be instance of pandas.DataFrame or pandas.Series\" ) for name in data_frame.columns: values = [] if is_numeric_dtype(data_frame[name].dtype): infer_type = InferType.MEASURE values = ( data_frame[name] .fillna(default_measure_value) .astype(float) .values.tolist() ) else: infer_type = InferType.DIMENSION values = ( data_frame[name] .fillna(default_dimension_value) .astype(str) .values.tolist() ) self.add_series( name, values, type=infer_type.value, )","title":"add_data_frame()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Data.add_data_frame_index","text":"A method for adding data frame's index to an existing Data class instance. Parameters: Name Type Description Default data_frame Union [ pd . DataFrame , pd . Series ] The pandas data frame object. required name Optional [ str ] The name of the index series. required Raises: Type Description TypeError If data_frame is not instance of pd.DataFrame or pd.Series . Example Adding a data frame's index to a Data class instance: data_frame = pd.DataFrame( {\"Popularity\": [114, 96]}, index=[\"x\", \"y\"] ) data = Data() data.add_data_frame_index(data_frame, \"DataFrameIndex\") data.add_data_frame(data_frame) Source code in ipyvizzu/animation.py def add_data_frame_index( self, data_frame: Union[pd.DataFrame, pd.Series], name: Optional[str], ) -> None: \"\"\" A method for adding data frame's index to an existing [Data][ipyvizzu.animation.Data] class instance. Args: data_frame: The pandas data frame object. name: The name of the index series. Raises: TypeError: If `data_frame` is not instance of [pd.DataFrame][pandas.DataFrame] or [pd.Series][pandas.Series]. Example: Adding a data frame's index to a [Data][ipyvizzu.animation.Data] class instance: data_frame = pd.DataFrame( {\"Popularity\": [114, 96]}, index=[\"x\", \"y\"] ) data = Data() data.add_data_frame_index(data_frame, \"DataFrameIndex\") data.add_data_frame(data_frame) \"\"\" if data_frame is not None: if isinstance(data_frame, pd.Series): data_frame = pd.DataFrame(data_frame) if not isinstance(data_frame, pd.DataFrame): raise TypeError( \"data_frame must be instance of pandas.DataFrame or pandas.Series\" ) self.add_series( str(name), [str(i) for i in data_frame.index], type=InferType.DIMENSION.value, )","title":"add_data_frame_index()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Data.build","text":"A method for validating and returning the data animation dictionary. Returns: Type Description dict A dictionary that stored in the data animation object. It contains a data key whose value is the stored animation. Source code in ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for validating and returning the data animation dictionary. Returns: A dictionary that stored in the data animation object. It contains a `data` key whose value is the stored animation. \"\"\" jsonschema.validate(self, DATA_SCHEMA) return {\"data\": self}","title":"build()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.ConfigAttr","text":"Bases: type A metaclass class for the Config class. Returns a Config class with a chart preset if the __getattr__ method called. Source code in ipyvizzu/animation.py class ConfigAttr(type): \"\"\" A metaclass class for the [Config][ipyvizzu.animation.Config] class. Returns a [Config][ipyvizzu.animation.Config] class with a chart preset if the `__getattr__` method called. \"\"\" @classmethod def __getattr__(mcs, name): config_attr = mcs(\"ConfigAttr\", (object,), {\"name\": name}) return config_attr._get_preset # pylint: disable=no-member def _get_preset(cls, preset): config = Config(RawJavaScript(f\"lib.presets.{cls.name}({preset})\")) return config","title":"ConfigAttr"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Config","text":"Bases: Animation A class for representing config animation. It can build config option of the chart. Source code in ipyvizzu/animation.py class Config(Animation, metaclass=ConfigAttr): \"\"\" A class for representing config animation. It can build config option of the chart. \"\"\" def __init__(self, data: Optional[dict]): \"\"\" Config constructor. Args: data: A config animation dictionary. \"\"\" self._data = data def build(self) -> dict: \"\"\" A method for returning the config animation dictionary. Returns: A dictionary that stored in the config animation object. It contains a `config` key whose value is the stored animation. \"\"\" return {\"config\": self._data}","title":"Config"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Config.__init__","text":"Config constructor. Parameters: Name Type Description Default data Optional [ dict ] A config animation dictionary. required Source code in ipyvizzu/animation.py def __init__(self, data: Optional[dict]): \"\"\" Config constructor. Args: data: A config animation dictionary. \"\"\" self._data = data","title":"__init__()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Config.build","text":"A method for returning the config animation dictionary. Returns: Type Description dict A dictionary that stored in the config animation object. It contains a config key whose value is the stored animation. Source code in ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for returning the config animation dictionary. Returns: A dictionary that stored in the config animation object. It contains a `config` key whose value is the stored animation. \"\"\" return {\"config\": self._data}","title":"build()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Style","text":"Bases: Animation A class for representing style animation. It can build style option of the chart. Source code in ipyvizzu/animation.py class Style(Animation): \"\"\" A class for representing style animation. It can build style option of the chart. \"\"\" def __init__(self, data: Optional[dict]): \"\"\" Style constructor. Args: data: A style animation dictionary. \"\"\" self._data = data def build(self) -> dict: \"\"\" A method for returning the style animation dictionary. Returns: A dictionary that stored in the style animation object. It contains a `style` key whose value is the stored animation. \"\"\" return {\"style\": self._data}","title":"Style"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Style.__init__","text":"Style constructor. Parameters: Name Type Description Default data Optional [ dict ] A style animation dictionary. required Source code in ipyvizzu/animation.py def __init__(self, data: Optional[dict]): \"\"\" Style constructor. Args: data: A style animation dictionary. \"\"\" self._data = data","title":"__init__()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Style.build","text":"A method for returning the style animation dictionary. Returns: Type Description dict A dictionary that stored in the style animation object. It contains a style key whose value is the stored animation. Source code in ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for returning the style animation dictionary. Returns: A dictionary that stored in the style animation object. It contains a `style` key whose value is the stored animation. \"\"\" return {\"style\": self._data}","title":"build()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Snapshot","text":"Bases: Animation A class for representing snapshot animation. It can build the snapshot id of the chart. Source code in ipyvizzu/animation.py class Snapshot(Animation): \"\"\" A class for representing snapshot animation. It can build the snapshot id of the chart. \"\"\" def __init__(self, name: str): \"\"\" Snapshot constructor. Args: name: A snapshot id. \"\"\" self._name = name def dump(self) -> str: \"\"\" A method for overwriting the [Animation.dump][ipyvizzu.animation.Animation.dump] method. It dumps the stored snapshot id as a string. Returns: An str that contains the stored snapshot id. \"\"\" return f\"'{self._name}'\" def build(self): \"\"\" A method for preventing to merge [Snapshot][ipyvizzu.animation.Snapshot] with other animations. Raises: NotImplementedError: If the [build][ipyvizzu.animation.Snapshot.build] method has been called, because [Snapshot][ipyvizzu.animation.Snapshot] cannot be merged with other animations. \"\"\" raise NotImplementedError(\"Snapshot cannot be merged with other animations\")","title":"Snapshot"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Snapshot.__init__","text":"Snapshot constructor. Parameters: Name Type Description Default name str A snapshot id. required Source code in ipyvizzu/animation.py def __init__(self, name: str): \"\"\" Snapshot constructor. Args: name: A snapshot id. \"\"\" self._name = name","title":"__init__()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Snapshot.dump","text":"A method for overwriting the Animation.dump method. It dumps the stored snapshot id as a string. Returns: Type Description str An str that contains the stored snapshot id. Source code in ipyvizzu/animation.py def dump(self) -> str: \"\"\" A method for overwriting the [Animation.dump][ipyvizzu.animation.Animation.dump] method. It dumps the stored snapshot id as a string. Returns: An str that contains the stored snapshot id. \"\"\" return f\"'{self._name}'\"","title":"dump()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Snapshot.build","text":"A method for preventing to merge Snapshot with other animations. Raises: Type Description NotImplementedError If the build method has been called, because Snapshot cannot be merged with other animations. Source code in ipyvizzu/animation.py def build(self): \"\"\" A method for preventing to merge [Snapshot][ipyvizzu.animation.Snapshot] with other animations. Raises: NotImplementedError: If the [build][ipyvizzu.animation.Snapshot.build] method has been called, because [Snapshot][ipyvizzu.animation.Snapshot] cannot be merged with other animations. \"\"\" raise NotImplementedError(\"Snapshot cannot be merged with other animations\")","title":"build()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.AnimationMerger","text":"Bases: dict , Animation A class for merging different types of animations. Source code in ipyvizzu/animation.py class AnimationMerger(dict, Animation): \"\"\"A class for merging different types of animations.\"\"\" def merge(self, animation: Animation) -> None: \"\"\" A method for merging an animation with the previously merged animations. Args: animation: An animation to be merged with with previously merged animations. Raises: ValueError: If the type of an animation is already merged. \"\"\" data = self._validate(animation) self.update(data) def _validate(self, animation: Animation) -> dict: data = animation.build() common_keys = set(data).intersection(self) if common_keys: raise ValueError(f\"Animation is already merged: {common_keys}\") return data def build(self) -> dict: \"\"\" A method for returning a merged dictionary from different types of animations. Returns: A merged dictionary from [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style] animations. \"\"\" return self","title":"AnimationMerger"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.AnimationMerger.merge","text":"A method for merging an animation with the previously merged animations. Parameters: Name Type Description Default animation Animation An animation to be merged with with previously merged animations. required Raises: Type Description ValueError If the type of an animation is already merged. Source code in ipyvizzu/animation.py def merge(self, animation: Animation) -> None: \"\"\" A method for merging an animation with the previously merged animations. Args: animation: An animation to be merged with with previously merged animations. Raises: ValueError: If the type of an animation is already merged. \"\"\" data = self._validate(animation) self.update(data)","title":"merge()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.AnimationMerger.build","text":"A method for returning a merged dictionary from different types of animations. Returns: Type Description dict A merged dictionary from Data , Config and Style animations. Source code in ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for returning a merged dictionary from different types of animations. Returns: A merged dictionary from [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style] animations. \"\"\" return self","title":"build()"},{"location":"reference/ipyvizzu/chart/","text":"ipyvizzu.chart A module for working with Vizzu charts. ipyvizzu.chart.Chart A class for representing a wrapper over Vizzu chart. Source code in ipyvizzu/chart.py class Chart: \"\"\"A class for representing a wrapper over Vizzu chart.\"\"\" VIZZU: str = \"https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js\" \"\"\"A variable for storing the default url of vizzu package.\"\"\" def __init__( self, vizzu: Optional[str] = VIZZU, width: Optional[str] = \"800px\", height: Optional[str] = \"480px\", display: Optional[Union[DisplayTarget, str]] = DisplayTarget.ACTUAL, ): \"\"\" Chart constructor. Args: vizzu: The url of Vizzu JavaScript package. width: The width of the chart. height: The height of the chart. display: The display behaviour of the chart. \"\"\" self._chart_id = uuid.uuid4().hex[:7] self._display_target = DisplayTarget(display) self._calls: List[str] = [] self._showed = False self._scroll_into_view = False ipyvizzurawjs = pkgutil.get_data(__name__, \"templates/ipyvizzu.js\") ipyvizzujs = ipyvizzurawjs.decode(\"utf-8\") # type: ignore self._display(DisplayTemplate.IPYVIZZUJS.format(ipyvizzujs=ipyvizzujs)) self._display( DisplayTemplate.INIT.format( chart_id=self._chart_id, vizzu=vizzu, div_width=width, div_height=height, ) ) if self._display_target != DisplayTarget.MANUAL: self._register_events() @staticmethod def _register_events() -> None: ipy = get_ipython() if ipy is not None: ipy.events.register(\"pre_run_cell\", Chart._register_pre_run_cell) @staticmethod def _register_pre_run_cell() -> None: display_javascript(DisplayTemplate.CLEAR_INHIBITSCROLL, raw=True) @property def scroll_into_view(self) -> bool: \"\"\" A property for turning on/off the scroll into view feature. Returns: The value of the property (default `False`). \"\"\" return self._scroll_into_view @scroll_into_view.setter def scroll_into_view(self, scroll_into_view: Optional[bool]): self._scroll_into_view = bool(scroll_into_view) def animate( self, *animations: Animation, **options: Optional[Union[str, int, float, dict]] ) -> None: \"\"\" A method for changing the state of the chart. Args: *animations: List of Animation objects such as [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style]. **options: Dictionary of animation options for example `duration=1`. Raises: ValueError: If `animations` is not set. Example: Reset the chart styles: chart.animate(Style(None)) \"\"\" if not animations: raise ValueError(\"No animation was set.\") animation = self._merge_animations(animations) animate = Animate(animation, options) self._display( DisplayTemplate.ANIMATE.format( display_target=self._display_target.value, chart_id=self._chart_id, scroll=str(self._scroll_into_view).lower(), **animate.dump(), ) ) @staticmethod def _merge_animations( animations: Tuple[Animation, ...], ) -> Union[Animation, AnimationMerger]: if len(animations) == 1: return animations[0] merger = AnimationMerger() for animation in animations: merger.merge(animation) return merger def feature(self, name: str, enabled: bool) -> None: \"\"\" A method for turning on/off features of the chart. Args: name: The name of the chart feature. enabled: The new state of the chart feature. Example: Turn on `tooltip` of the chart: chart.feature(\"tooltip\", True) \"\"\" self._display( DisplayTemplate.FEATURE.format( chart_id=self._chart_id, **Feature(name, enabled).dump(), ) ) def store(self) -> Snapshot: \"\"\" A method for saving and storing the actual state of the chart. Returns: A snapshot animation object wich stores the actual state of the chart. Example: Save and restore the actual state of the chart: snapshot = chart.store() ... chart.animate(snapshot) \"\"\" snapshot_id = uuid.uuid4().hex[:7] self._display( DisplayTemplate.STORE.format( chart_id=self._chart_id, **Store(snapshot_id).dump() ) ) return Snapshot(snapshot_id) def on( # pylint: disable=invalid-name self, event: str, handler: str ) -> EventHandler: \"\"\" A method for creating and turning on an event handler. Args: event: The type of the event. handler: The JavaScript method of the event. Returns: The turned on event handler object. Example: Turn on an event handler which prints an alert message when someone clicks on the chart: handler = chart.on(\"click\", \"alert(JSON.stringify(event.data));\") \"\"\" event_handler = EventHandler(event, handler) self._display( DisplayTemplate.SET_EVENT.format( chart_id=self._chart_id, **EventOn(event_handler).dump(), ) ) return event_handler def off(self, event_handler: EventHandler) -> None: \"\"\" A method for turning off an event handler. Args: event_handler: A previously created event handler object. Example: Turn off a previously created event handler: chart.off(handler) \"\"\" self._display( DisplayTemplate.CLEAR_EVENT.format( chart_id=self._chart_id, **EventOff(event_handler).dump(), ) ) def log(self, chart_property: ChartProperty) -> None: \"\"\" A method for printing chart properties to the browser console. Args: chart_property: A chart property such as [CONFIG][ipyvizzu.template.ChartProperty] and [STYLE][ipyvizzu.template.ChartProperty]. Example: Log the actual style of the chart to the browser console: chart.log(ChartProperty.STYLE) \"\"\" self._display( DisplayTemplate.LOG.format( chart_id=self._chart_id, **Log(chart_property).dump() ) ) def _repr_html_(self) -> str: assert ( self._display_target == DisplayTarget.MANUAL ), \"chart._repr_html_() can be used with display=DisplayTarget.MANUAL only\" assert not self._showed, \"cannot be used after chart displayed.\" self._showed = True html_id = uuid.uuid4().hex[:7] script = ( self._calls[0] + \"\\n\" + \"\\n\".join(self._calls[1:]).replace( \"element\", f'document.getElementById(\"{html_id}\")' ) ) return f'<div id=\"{html_id}\"><script>{script}</script></div>' def show(self) -> None: \"\"\" A method for displaying the assembled JavaScript code. Raises: AssertionError: If [display][ipyvizzu.Chart.__init__] is not [DisplayTarget.MANUAL][ipyvizzu.template.DisplayTarget]. AssertionError: If chart already has been displayed. \"\"\" assert ( self._display_target == DisplayTarget.MANUAL ), \"chart.show() can be used with display=DisplayTarget.MANUAL only\" assert not self._showed, \"cannot be used after chart displayed\" display_javascript( \"\\n\".join(self._calls), raw=True, ) self._showed = True def _display(self, javascript: str) -> None: if self._display_target != DisplayTarget.MANUAL: display_javascript( javascript, raw=True, ) else: assert not self._showed, \"cannot be used after chart displayed\" self._calls.append(javascript) VIZZU: str = 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' class-attribute A variable for storing the default url of vizzu package. scroll_into_view: bool writable property A property for turning on/off the scroll into view feature. Returns: Type Description bool The value of the property (default False ). __init__(vizzu=VIZZU, width='800px', height='480px', display=DisplayTarget.ACTUAL) Chart constructor. Parameters: Name Type Description Default vizzu Optional [ str ] The url of Vizzu JavaScript package. VIZZU width Optional [ str ] The width of the chart. '800px' height Optional [ str ] The height of the chart. '480px' display Optional [ Union [ DisplayTarget , str ]] The display behaviour of the chart. DisplayTarget.ACTUAL Source code in ipyvizzu/chart.py def __init__( self, vizzu: Optional[str] = VIZZU, width: Optional[str] = \"800px\", height: Optional[str] = \"480px\", display: Optional[Union[DisplayTarget, str]] = DisplayTarget.ACTUAL, ): \"\"\" Chart constructor. Args: vizzu: The url of Vizzu JavaScript package. width: The width of the chart. height: The height of the chart. display: The display behaviour of the chart. \"\"\" self._chart_id = uuid.uuid4().hex[:7] self._display_target = DisplayTarget(display) self._calls: List[str] = [] self._showed = False self._scroll_into_view = False ipyvizzurawjs = pkgutil.get_data(__name__, \"templates/ipyvizzu.js\") ipyvizzujs = ipyvizzurawjs.decode(\"utf-8\") # type: ignore self._display(DisplayTemplate.IPYVIZZUJS.format(ipyvizzujs=ipyvizzujs)) self._display( DisplayTemplate.INIT.format( chart_id=self._chart_id, vizzu=vizzu, div_width=width, div_height=height, ) ) if self._display_target != DisplayTarget.MANUAL: self._register_events() animate(*animations, **options) A method for changing the state of the chart. Parameters: Name Type Description Default *animations Animation List of Animation objects such as Data , Config and Style . () **options Optional [ Union [ str , int , float , dict ]] Dictionary of animation options for example duration=1 . {} Raises: Type Description ValueError If animations is not set. Example Reset the chart styles: chart.animate(Style(None)) Source code in ipyvizzu/chart.py def animate( self, *animations: Animation, **options: Optional[Union[str, int, float, dict]] ) -> None: \"\"\" A method for changing the state of the chart. Args: *animations: List of Animation objects such as [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style]. **options: Dictionary of animation options for example `duration=1`. Raises: ValueError: If `animations` is not set. Example: Reset the chart styles: chart.animate(Style(None)) \"\"\" if not animations: raise ValueError(\"No animation was set.\") animation = self._merge_animations(animations) animate = Animate(animation, options) self._display( DisplayTemplate.ANIMATE.format( display_target=self._display_target.value, chart_id=self._chart_id, scroll=str(self._scroll_into_view).lower(), **animate.dump(), ) ) feature(name, enabled) A method for turning on/off features of the chart. Parameters: Name Type Description Default name str The name of the chart feature. required enabled bool The new state of the chart feature. required Example Turn on tooltip of the chart: chart.feature(\"tooltip\", True) Source code in ipyvizzu/chart.py def feature(self, name: str, enabled: bool) -> None: \"\"\" A method for turning on/off features of the chart. Args: name: The name of the chart feature. enabled: The new state of the chart feature. Example: Turn on `tooltip` of the chart: chart.feature(\"tooltip\", True) \"\"\" self._display( DisplayTemplate.FEATURE.format( chart_id=self._chart_id, **Feature(name, enabled).dump(), ) ) store() A method for saving and storing the actual state of the chart. Returns: Type Description Snapshot A snapshot animation object wich stores the actual state of the chart. Example Save and restore the actual state of the chart: snapshot = chart.store() ... chart.animate(snapshot) Source code in ipyvizzu/chart.py def store(self) -> Snapshot: \"\"\" A method for saving and storing the actual state of the chart. Returns: A snapshot animation object wich stores the actual state of the chart. Example: Save and restore the actual state of the chart: snapshot = chart.store() ... chart.animate(snapshot) \"\"\" snapshot_id = uuid.uuid4().hex[:7] self._display( DisplayTemplate.STORE.format( chart_id=self._chart_id, **Store(snapshot_id).dump() ) ) return Snapshot(snapshot_id) on(event, handler) A method for creating and turning on an event handler. Parameters: Name Type Description Default event str The type of the event. required handler str The JavaScript method of the event. required Returns: Type Description EventHandler The turned on event handler object. Example Turn on an event handler which prints an alert message when someone clicks on the chart: handler = chart.on(\"click\", \"alert(JSON.stringify(event.data));\") Source code in ipyvizzu/chart.py def on( # pylint: disable=invalid-name self, event: str, handler: str ) -> EventHandler: \"\"\" A method for creating and turning on an event handler. Args: event: The type of the event. handler: The JavaScript method of the event. Returns: The turned on event handler object. Example: Turn on an event handler which prints an alert message when someone clicks on the chart: handler = chart.on(\"click\", \"alert(JSON.stringify(event.data));\") \"\"\" event_handler = EventHandler(event, handler) self._display( DisplayTemplate.SET_EVENT.format( chart_id=self._chart_id, **EventOn(event_handler).dump(), ) ) return event_handler off(event_handler) A method for turning off an event handler. Parameters: Name Type Description Default event_handler EventHandler A previously created event handler object. required Example Turn off a previously created event handler: chart.off(handler) Source code in ipyvizzu/chart.py def off(self, event_handler: EventHandler) -> None: \"\"\" A method for turning off an event handler. Args: event_handler: A previously created event handler object. Example: Turn off a previously created event handler: chart.off(handler) \"\"\" self._display( DisplayTemplate.CLEAR_EVENT.format( chart_id=self._chart_id, **EventOff(event_handler).dump(), ) ) log(chart_property) A method for printing chart properties to the browser console. Parameters: Name Type Description Default chart_property ChartProperty A chart property such as CONFIG and STYLE . required Example Log the actual style of the chart to the browser console: chart.log(ChartProperty.STYLE) Source code in ipyvizzu/chart.py def log(self, chart_property: ChartProperty) -> None: \"\"\" A method for printing chart properties to the browser console. Args: chart_property: A chart property such as [CONFIG][ipyvizzu.template.ChartProperty] and [STYLE][ipyvizzu.template.ChartProperty]. Example: Log the actual style of the chart to the browser console: chart.log(ChartProperty.STYLE) \"\"\" self._display( DisplayTemplate.LOG.format( chart_id=self._chart_id, **Log(chart_property).dump() ) ) show() A method for displaying the assembled JavaScript code. Raises: Type Description AssertionError If display is not DisplayTarget.MANUAL . AssertionError If chart already has been displayed. Source code in ipyvizzu/chart.py def show(self) -> None: \"\"\" A method for displaying the assembled JavaScript code. Raises: AssertionError: If [display][ipyvizzu.Chart.__init__] is not [DisplayTarget.MANUAL][ipyvizzu.template.DisplayTarget]. AssertionError: If chart already has been displayed. \"\"\" assert ( self._display_target == DisplayTarget.MANUAL ), \"chart.show() can be used with display=DisplayTarget.MANUAL only\" assert not self._showed, \"cannot be used after chart displayed\" display_javascript( \"\\n\".join(self._calls), raw=True, ) self._showed = True","title":"Chart"},{"location":"reference/ipyvizzu/chart/#ipyvizzu.chart","text":"A module for working with Vizzu charts.","title":"chart"},{"location":"reference/ipyvizzu/chart/#ipyvizzu.chart.Chart","text":"A class for representing a wrapper over Vizzu chart. Source code in ipyvizzu/chart.py class Chart: \"\"\"A class for representing a wrapper over Vizzu chart.\"\"\" VIZZU: str = \"https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js\" \"\"\"A variable for storing the default url of vizzu package.\"\"\" def __init__( self, vizzu: Optional[str] = VIZZU, width: Optional[str] = \"800px\", height: Optional[str] = \"480px\", display: Optional[Union[DisplayTarget, str]] = DisplayTarget.ACTUAL, ): \"\"\" Chart constructor. Args: vizzu: The url of Vizzu JavaScript package. width: The width of the chart. height: The height of the chart. display: The display behaviour of the chart. \"\"\" self._chart_id = uuid.uuid4().hex[:7] self._display_target = DisplayTarget(display) self._calls: List[str] = [] self._showed = False self._scroll_into_view = False ipyvizzurawjs = pkgutil.get_data(__name__, \"templates/ipyvizzu.js\") ipyvizzujs = ipyvizzurawjs.decode(\"utf-8\") # type: ignore self._display(DisplayTemplate.IPYVIZZUJS.format(ipyvizzujs=ipyvizzujs)) self._display( DisplayTemplate.INIT.format( chart_id=self._chart_id, vizzu=vizzu, div_width=width, div_height=height, ) ) if self._display_target != DisplayTarget.MANUAL: self._register_events() @staticmethod def _register_events() -> None: ipy = get_ipython() if ipy is not None: ipy.events.register(\"pre_run_cell\", Chart._register_pre_run_cell) @staticmethod def _register_pre_run_cell() -> None: display_javascript(DisplayTemplate.CLEAR_INHIBITSCROLL, raw=True) @property def scroll_into_view(self) -> bool: \"\"\" A property for turning on/off the scroll into view feature. Returns: The value of the property (default `False`). \"\"\" return self._scroll_into_view @scroll_into_view.setter def scroll_into_view(self, scroll_into_view: Optional[bool]): self._scroll_into_view = bool(scroll_into_view) def animate( self, *animations: Animation, **options: Optional[Union[str, int, float, dict]] ) -> None: \"\"\" A method for changing the state of the chart. Args: *animations: List of Animation objects such as [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style]. **options: Dictionary of animation options for example `duration=1`. Raises: ValueError: If `animations` is not set. Example: Reset the chart styles: chart.animate(Style(None)) \"\"\" if not animations: raise ValueError(\"No animation was set.\") animation = self._merge_animations(animations) animate = Animate(animation, options) self._display( DisplayTemplate.ANIMATE.format( display_target=self._display_target.value, chart_id=self._chart_id, scroll=str(self._scroll_into_view).lower(), **animate.dump(), ) ) @staticmethod def _merge_animations( animations: Tuple[Animation, ...], ) -> Union[Animation, AnimationMerger]: if len(animations) == 1: return animations[0] merger = AnimationMerger() for animation in animations: merger.merge(animation) return merger def feature(self, name: str, enabled: bool) -> None: \"\"\" A method for turning on/off features of the chart. Args: name: The name of the chart feature. enabled: The new state of the chart feature. Example: Turn on `tooltip` of the chart: chart.feature(\"tooltip\", True) \"\"\" self._display( DisplayTemplate.FEATURE.format( chart_id=self._chart_id, **Feature(name, enabled).dump(), ) ) def store(self) -> Snapshot: \"\"\" A method for saving and storing the actual state of the chart. Returns: A snapshot animation object wich stores the actual state of the chart. Example: Save and restore the actual state of the chart: snapshot = chart.store() ... chart.animate(snapshot) \"\"\" snapshot_id = uuid.uuid4().hex[:7] self._display( DisplayTemplate.STORE.format( chart_id=self._chart_id, **Store(snapshot_id).dump() ) ) return Snapshot(snapshot_id) def on( # pylint: disable=invalid-name self, event: str, handler: str ) -> EventHandler: \"\"\" A method for creating and turning on an event handler. Args: event: The type of the event. handler: The JavaScript method of the event. Returns: The turned on event handler object. Example: Turn on an event handler which prints an alert message when someone clicks on the chart: handler = chart.on(\"click\", \"alert(JSON.stringify(event.data));\") \"\"\" event_handler = EventHandler(event, handler) self._display( DisplayTemplate.SET_EVENT.format( chart_id=self._chart_id, **EventOn(event_handler).dump(), ) ) return event_handler def off(self, event_handler: EventHandler) -> None: \"\"\" A method for turning off an event handler. Args: event_handler: A previously created event handler object. Example: Turn off a previously created event handler: chart.off(handler) \"\"\" self._display( DisplayTemplate.CLEAR_EVENT.format( chart_id=self._chart_id, **EventOff(event_handler).dump(), ) ) def log(self, chart_property: ChartProperty) -> None: \"\"\" A method for printing chart properties to the browser console. Args: chart_property: A chart property such as [CONFIG][ipyvizzu.template.ChartProperty] and [STYLE][ipyvizzu.template.ChartProperty]. Example: Log the actual style of the chart to the browser console: chart.log(ChartProperty.STYLE) \"\"\" self._display( DisplayTemplate.LOG.format( chart_id=self._chart_id, **Log(chart_property).dump() ) ) def _repr_html_(self) -> str: assert ( self._display_target == DisplayTarget.MANUAL ), \"chart._repr_html_() can be used with display=DisplayTarget.MANUAL only\" assert not self._showed, \"cannot be used after chart displayed.\" self._showed = True html_id = uuid.uuid4().hex[:7] script = ( self._calls[0] + \"\\n\" + \"\\n\".join(self._calls[1:]).replace( \"element\", f'document.getElementById(\"{html_id}\")' ) ) return f'<div id=\"{html_id}\"><script>{script}</script></div>' def show(self) -> None: \"\"\" A method for displaying the assembled JavaScript code. Raises: AssertionError: If [display][ipyvizzu.Chart.__init__] is not [DisplayTarget.MANUAL][ipyvizzu.template.DisplayTarget]. AssertionError: If chart already has been displayed. \"\"\" assert ( self._display_target == DisplayTarget.MANUAL ), \"chart.show() can be used with display=DisplayTarget.MANUAL only\" assert not self._showed, \"cannot be used after chart displayed\" display_javascript( \"\\n\".join(self._calls), raw=True, ) self._showed = True def _display(self, javascript: str) -> None: if self._display_target != DisplayTarget.MANUAL: display_javascript( javascript, raw=True, ) else: assert not self._showed, \"cannot be used after chart displayed\" self._calls.append(javascript)","title":"Chart"},{"location":"reference/ipyvizzu/chart/#ipyvizzu.chart.Chart.VIZZU","text":"A variable for storing the default url of vizzu package.","title":"VIZZU"},{"location":"reference/ipyvizzu/chart/#ipyvizzu.chart.Chart.scroll_into_view","text":"A property for turning on/off the scroll into view feature. Returns: Type Description bool The value of the property (default False ).","title":"scroll_into_view"},{"location":"reference/ipyvizzu/chart/#ipyvizzu.chart.Chart.__init__","text":"Chart constructor. Parameters: Name Type Description Default vizzu Optional [ str ] The url of Vizzu JavaScript package. VIZZU width Optional [ str ] The width of the chart. '800px' height Optional [ str ] The height of the chart. '480px' display Optional [ Union [ DisplayTarget , str ]] The display behaviour of the chart. DisplayTarget.ACTUAL Source code in ipyvizzu/chart.py def __init__( self, vizzu: Optional[str] = VIZZU, width: Optional[str] = \"800px\", height: Optional[str] = \"480px\", display: Optional[Union[DisplayTarget, str]] = DisplayTarget.ACTUAL, ): \"\"\" Chart constructor. Args: vizzu: The url of Vizzu JavaScript package. width: The width of the chart. height: The height of the chart. display: The display behaviour of the chart. \"\"\" self._chart_id = uuid.uuid4().hex[:7] self._display_target = DisplayTarget(display) self._calls: List[str] = [] self._showed = False self._scroll_into_view = False ipyvizzurawjs = pkgutil.get_data(__name__, \"templates/ipyvizzu.js\") ipyvizzujs = ipyvizzurawjs.decode(\"utf-8\") # type: ignore self._display(DisplayTemplate.IPYVIZZUJS.format(ipyvizzujs=ipyvizzujs)) self._display( DisplayTemplate.INIT.format( chart_id=self._chart_id, vizzu=vizzu, div_width=width, div_height=height, ) ) if self._display_target != DisplayTarget.MANUAL: self._register_events()","title":"__init__()"},{"location":"reference/ipyvizzu/chart/#ipyvizzu.chart.Chart.animate","text":"A method for changing the state of the chart. Parameters: Name Type Description Default *animations Animation List of Animation objects such as Data , Config and Style . () **options Optional [ Union [ str , int , float , dict ]] Dictionary of animation options for example duration=1 . {} Raises: Type Description ValueError If animations is not set. Example Reset the chart styles: chart.animate(Style(None)) Source code in ipyvizzu/chart.py def animate( self, *animations: Animation, **options: Optional[Union[str, int, float, dict]] ) -> None: \"\"\" A method for changing the state of the chart. Args: *animations: List of Animation objects such as [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style]. **options: Dictionary of animation options for example `duration=1`. Raises: ValueError: If `animations` is not set. Example: Reset the chart styles: chart.animate(Style(None)) \"\"\" if not animations: raise ValueError(\"No animation was set.\") animation = self._merge_animations(animations) animate = Animate(animation, options) self._display( DisplayTemplate.ANIMATE.format( display_target=self._display_target.value, chart_id=self._chart_id, scroll=str(self._scroll_into_view).lower(), **animate.dump(), ) )","title":"animate()"},{"location":"reference/ipyvizzu/chart/#ipyvizzu.chart.Chart.feature","text":"A method for turning on/off features of the chart. Parameters: Name Type Description Default name str The name of the chart feature. required enabled bool The new state of the chart feature. required Example Turn on tooltip of the chart: chart.feature(\"tooltip\", True) Source code in ipyvizzu/chart.py def feature(self, name: str, enabled: bool) -> None: \"\"\" A method for turning on/off features of the chart. Args: name: The name of the chart feature. enabled: The new state of the chart feature. Example: Turn on `tooltip` of the chart: chart.feature(\"tooltip\", True) \"\"\" self._display( DisplayTemplate.FEATURE.format( chart_id=self._chart_id, **Feature(name, enabled).dump(), ) )","title":"feature()"},{"location":"reference/ipyvizzu/chart/#ipyvizzu.chart.Chart.store","text":"A method for saving and storing the actual state of the chart. Returns: Type Description Snapshot A snapshot animation object wich stores the actual state of the chart. Example Save and restore the actual state of the chart: snapshot = chart.store() ... chart.animate(snapshot) Source code in ipyvizzu/chart.py def store(self) -> Snapshot: \"\"\" A method for saving and storing the actual state of the chart. Returns: A snapshot animation object wich stores the actual state of the chart. Example: Save and restore the actual state of the chart: snapshot = chart.store() ... chart.animate(snapshot) \"\"\" snapshot_id = uuid.uuid4().hex[:7] self._display( DisplayTemplate.STORE.format( chart_id=self._chart_id, **Store(snapshot_id).dump() ) ) return Snapshot(snapshot_id)","title":"store()"},{"location":"reference/ipyvizzu/chart/#ipyvizzu.chart.Chart.on","text":"A method for creating and turning on an event handler. Parameters: Name Type Description Default event str The type of the event. required handler str The JavaScript method of the event. required Returns: Type Description EventHandler The turned on event handler object. Example Turn on an event handler which prints an alert message when someone clicks on the chart: handler = chart.on(\"click\", \"alert(JSON.stringify(event.data));\") Source code in ipyvizzu/chart.py def on( # pylint: disable=invalid-name self, event: str, handler: str ) -> EventHandler: \"\"\" A method for creating and turning on an event handler. Args: event: The type of the event. handler: The JavaScript method of the event. Returns: The turned on event handler object. Example: Turn on an event handler which prints an alert message when someone clicks on the chart: handler = chart.on(\"click\", \"alert(JSON.stringify(event.data));\") \"\"\" event_handler = EventHandler(event, handler) self._display( DisplayTemplate.SET_EVENT.format( chart_id=self._chart_id, **EventOn(event_handler).dump(), ) ) return event_handler","title":"on()"},{"location":"reference/ipyvizzu/chart/#ipyvizzu.chart.Chart.off","text":"A method for turning off an event handler. Parameters: Name Type Description Default event_handler EventHandler A previously created event handler object. required Example Turn off a previously created event handler: chart.off(handler) Source code in ipyvizzu/chart.py def off(self, event_handler: EventHandler) -> None: \"\"\" A method for turning off an event handler. Args: event_handler: A previously created event handler object. Example: Turn off a previously created event handler: chart.off(handler) \"\"\" self._display( DisplayTemplate.CLEAR_EVENT.format( chart_id=self._chart_id, **EventOff(event_handler).dump(), ) )","title":"off()"},{"location":"reference/ipyvizzu/chart/#ipyvizzu.chart.Chart.log","text":"A method for printing chart properties to the browser console. Parameters: Name Type Description Default chart_property ChartProperty A chart property such as CONFIG and STYLE . required Example Log the actual style of the chart to the browser console: chart.log(ChartProperty.STYLE) Source code in ipyvizzu/chart.py def log(self, chart_property: ChartProperty) -> None: \"\"\" A method for printing chart properties to the browser console. Args: chart_property: A chart property such as [CONFIG][ipyvizzu.template.ChartProperty] and [STYLE][ipyvizzu.template.ChartProperty]. Example: Log the actual style of the chart to the browser console: chart.log(ChartProperty.STYLE) \"\"\" self._display( DisplayTemplate.LOG.format( chart_id=self._chart_id, **Log(chart_property).dump() ) )","title":"log()"},{"location":"reference/ipyvizzu/chart/#ipyvizzu.chart.Chart.show","text":"A method for displaying the assembled JavaScript code. Raises: Type Description AssertionError If display is not DisplayTarget.MANUAL . AssertionError If chart already has been displayed. Source code in ipyvizzu/chart.py def show(self) -> None: \"\"\" A method for displaying the assembled JavaScript code. Raises: AssertionError: If [display][ipyvizzu.Chart.__init__] is not [DisplayTarget.MANUAL][ipyvizzu.template.DisplayTarget]. AssertionError: If chart already has been displayed. \"\"\" assert ( self._display_target == DisplayTarget.MANUAL ), \"chart.show() can be used with display=DisplayTarget.MANUAL only\" assert not self._showed, \"cannot be used after chart displayed\" display_javascript( \"\\n\".join(self._calls), raw=True, ) self._showed = True","title":"show()"},{"location":"reference/ipyvizzu/event/","text":"ipyvizzu.event A module for working with JavaScript events ipyvizzu.event.EventHandler A class for representing an event handler. Source code in ipyvizzu/event.py class EventHandler: \"\"\"A class for representing an event handler.\"\"\" def __init__(self, event: str, handler: str): \"\"\" EventHandler constructor. It generates a uuid for the event handler, stores the event type and the body of the handler function. Args: event: The type of the event. handler: The body of the handler function. \"\"\" self._id = uuid.uuid4().hex[:7] self._event = event self._handler = \" \".join(handler.split()) @property def id(self) -> str: # pylint: disable=invalid-name \"\"\" A property for storing an id. Returns: The uuid of the event handler. \"\"\" return self._id @property def event(self) -> str: \"\"\" A property for storing an event type. Returns: The type of the event. \"\"\" return self._event @property def handler(self) -> str: \"\"\" A property for storing an event handler function. Returns: The body of the handler function. \"\"\" return self._handler id: str property A property for storing an id. Returns: Type Description str The uuid of the event handler. event: str property A property for storing an event type. Returns: Type Description str The type of the event. handler: str property A property for storing an event handler function. Returns: Type Description str The body of the handler function. __init__(event, handler) EventHandler constructor. It generates a uuid for the event handler, stores the event type and the body of the handler function. Parameters: Name Type Description Default event str The type of the event. required handler str The body of the handler function. required Source code in ipyvizzu/event.py def __init__(self, event: str, handler: str): \"\"\" EventHandler constructor. It generates a uuid for the event handler, stores the event type and the body of the handler function. Args: event: The type of the event. handler: The body of the handler function. \"\"\" self._id = uuid.uuid4().hex[:7] self._event = event self._handler = \" \".join(handler.split())","title":"Event"},{"location":"reference/ipyvizzu/event/#ipyvizzu.event","text":"A module for working with JavaScript events","title":"event"},{"location":"reference/ipyvizzu/event/#ipyvizzu.event.EventHandler","text":"A class for representing an event handler. Source code in ipyvizzu/event.py class EventHandler: \"\"\"A class for representing an event handler.\"\"\" def __init__(self, event: str, handler: str): \"\"\" EventHandler constructor. It generates a uuid for the event handler, stores the event type and the body of the handler function. Args: event: The type of the event. handler: The body of the handler function. \"\"\" self._id = uuid.uuid4().hex[:7] self._event = event self._handler = \" \".join(handler.split()) @property def id(self) -> str: # pylint: disable=invalid-name \"\"\" A property for storing an id. Returns: The uuid of the event handler. \"\"\" return self._id @property def event(self) -> str: \"\"\" A property for storing an event type. Returns: The type of the event. \"\"\" return self._event @property def handler(self) -> str: \"\"\" A property for storing an event handler function. Returns: The body of the handler function. \"\"\" return self._handler","title":"EventHandler"},{"location":"reference/ipyvizzu/event/#ipyvizzu.event.EventHandler.id","text":"A property for storing an id. Returns: Type Description str The uuid of the event handler.","title":"id"},{"location":"reference/ipyvizzu/event/#ipyvizzu.event.EventHandler.event","text":"A property for storing an event type. Returns: Type Description str The type of the event.","title":"event"},{"location":"reference/ipyvizzu/event/#ipyvizzu.event.EventHandler.handler","text":"A property for storing an event handler function. Returns: Type Description str The body of the handler function.","title":"handler"},{"location":"reference/ipyvizzu/event/#ipyvizzu.event.EventHandler.__init__","text":"EventHandler constructor. It generates a uuid for the event handler, stores the event type and the body of the handler function. Parameters: Name Type Description Default event str The type of the event. required handler str The body of the handler function. required Source code in ipyvizzu/event.py def __init__(self, event: str, handler: str): \"\"\" EventHandler constructor. It generates a uuid for the event handler, stores the event type and the body of the handler function. Args: event: The type of the event. handler: The body of the handler function. \"\"\" self._id = uuid.uuid4().hex[:7] self._event = event self._handler = \" \".join(handler.split())","title":"__init__()"},{"location":"reference/ipyvizzu/json/","text":"ipyvizzu.json A module for working JavaScript code in json convertible objects. ipyvizzu.json.RawJavaScript A class for representing raw JavaScript code. Source code in ipyvizzu/json.py class RawJavaScript: \"\"\"A class for representing raw JavaScript code.\"\"\" # pylint: disable=too-few-public-methods def __init__(self, raw: Optional[str]): \"\"\" RawJavaScript constructor. It stores raw JavaScript code as a string. Args: raw: JavaScript code as `str`. \"\"\" self._raw = raw @property def raw(self) -> Optional[str]: \"\"\" A property for storing raw JavaScript code as a string. Returns: Raw JavaScript code as `str`. \"\"\" return self._raw raw: Optional[str] property A property for storing raw JavaScript code as a string. Returns: Type Description Optional [ str ] Raw JavaScript code as str . __init__(raw) RawJavaScript constructor. It stores raw JavaScript code as a string. Parameters: Name Type Description Default raw Optional [ str ] JavaScript code as str . required Source code in ipyvizzu/json.py def __init__(self, raw: Optional[str]): \"\"\" RawJavaScript constructor. It stores raw JavaScript code as a string. Args: raw: JavaScript code as `str`. \"\"\" self._raw = raw ipyvizzu.json.RawJavaScriptEncoder Bases: json . JSONEncoder A class for representing a custom json encoder, it can encode objects that contain RawJavaScript values. Source code in ipyvizzu/json.py class RawJavaScriptEncoder(json.JSONEncoder): \"\"\" A class for representing a custom json encoder, it can encode objects that contain [RawJavaScript][ipyvizzu.json.RawJavaScript] values. \"\"\" def __init__(self, *args, **kwargs): \"\"\" RawJavaScriptEncoder constructor. It extends [JSONEncoder][json.JSONEncoder] with an instance variable (`_raw_replacements`). The `_raw_replacements` dictionary stores the `uuids` and JavaScript codes of the [RawJavaScript][ipyvizzu.json.RawJavaScript] objects. \"\"\" json.JSONEncoder.__init__(self, *args, **kwargs) self._raw_replacements = {} def default(self, o): \"\"\" Overrides [JSONEncoder.default][json.JSONEncoder.default] method. It replaces [RawJavaScript][ipyvizzu.json.RawJavaScript] object with `uuid` and it stores raw JavaScript code with `uuid` key in the `_raw_replacements` dictionary. \"\"\" if isinstance(o, RawJavaScript): key = uuid.uuid4().hex self._raw_replacements[key] = o.raw return key return json.JSONEncoder.default(self, o) def encode(self, o): \"\"\" Overrides [JSONEncoder.encode][json.JSONEncoder.encode] method. It replaces `uuids` with raw JavaScript code without apostrophes. \"\"\" result = json.JSONEncoder.encode(self, o) for key, val in self._raw_replacements.items(): result = result.replace(f'\"{key}\"', val) return result __init__(*args, **kwargs) RawJavaScriptEncoder constructor. It extends JSONEncoder with an instance variable ( _raw_replacements ). The _raw_replacements dictionary stores the uuids and JavaScript codes of the RawJavaScript objects. Source code in ipyvizzu/json.py def __init__(self, *args, **kwargs): \"\"\" RawJavaScriptEncoder constructor. It extends [JSONEncoder][json.JSONEncoder] with an instance variable (`_raw_replacements`). The `_raw_replacements` dictionary stores the `uuids` and JavaScript codes of the [RawJavaScript][ipyvizzu.json.RawJavaScript] objects. \"\"\" json.JSONEncoder.__init__(self, *args, **kwargs) self._raw_replacements = {} default(o) Overrides JSONEncoder.default method. It replaces RawJavaScript object with uuid and it stores raw JavaScript code with uuid key in the _raw_replacements dictionary. Source code in ipyvizzu/json.py def default(self, o): \"\"\" Overrides [JSONEncoder.default][json.JSONEncoder.default] method. It replaces [RawJavaScript][ipyvizzu.json.RawJavaScript] object with `uuid` and it stores raw JavaScript code with `uuid` key in the `_raw_replacements` dictionary. \"\"\" if isinstance(o, RawJavaScript): key = uuid.uuid4().hex self._raw_replacements[key] = o.raw return key return json.JSONEncoder.default(self, o) encode(o) Overrides JSONEncoder.encode method. It replaces uuids with raw JavaScript code without apostrophes. Source code in ipyvizzu/json.py def encode(self, o): \"\"\" Overrides [JSONEncoder.encode][json.JSONEncoder.encode] method. It replaces `uuids` with raw JavaScript code without apostrophes. \"\"\" result = json.JSONEncoder.encode(self, o) for key, val in self._raw_replacements.items(): result = result.replace(f'\"{key}\"', val) return result","title":"Json"},{"location":"reference/ipyvizzu/json/#ipyvizzu.json","text":"A module for working JavaScript code in json convertible objects.","title":"json"},{"location":"reference/ipyvizzu/json/#ipyvizzu.json.RawJavaScript","text":"A class for representing raw JavaScript code. Source code in ipyvizzu/json.py class RawJavaScript: \"\"\"A class for representing raw JavaScript code.\"\"\" # pylint: disable=too-few-public-methods def __init__(self, raw: Optional[str]): \"\"\" RawJavaScript constructor. It stores raw JavaScript code as a string. Args: raw: JavaScript code as `str`. \"\"\" self._raw = raw @property def raw(self) -> Optional[str]: \"\"\" A property for storing raw JavaScript code as a string. Returns: Raw JavaScript code as `str`. \"\"\" return self._raw","title":"RawJavaScript"},{"location":"reference/ipyvizzu/json/#ipyvizzu.json.RawJavaScript.raw","text":"A property for storing raw JavaScript code as a string. Returns: Type Description Optional [ str ] Raw JavaScript code as str .","title":"raw"},{"location":"reference/ipyvizzu/json/#ipyvizzu.json.RawJavaScript.__init__","text":"RawJavaScript constructor. It stores raw JavaScript code as a string. Parameters: Name Type Description Default raw Optional [ str ] JavaScript code as str . required Source code in ipyvizzu/json.py def __init__(self, raw: Optional[str]): \"\"\" RawJavaScript constructor. It stores raw JavaScript code as a string. Args: raw: JavaScript code as `str`. \"\"\" self._raw = raw","title":"__init__()"},{"location":"reference/ipyvizzu/json/#ipyvizzu.json.RawJavaScriptEncoder","text":"Bases: json . JSONEncoder A class for representing a custom json encoder, it can encode objects that contain RawJavaScript values. Source code in ipyvizzu/json.py class RawJavaScriptEncoder(json.JSONEncoder): \"\"\" A class for representing a custom json encoder, it can encode objects that contain [RawJavaScript][ipyvizzu.json.RawJavaScript] values. \"\"\" def __init__(self, *args, **kwargs): \"\"\" RawJavaScriptEncoder constructor. It extends [JSONEncoder][json.JSONEncoder] with an instance variable (`_raw_replacements`). The `_raw_replacements` dictionary stores the `uuids` and JavaScript codes of the [RawJavaScript][ipyvizzu.json.RawJavaScript] objects. \"\"\" json.JSONEncoder.__init__(self, *args, **kwargs) self._raw_replacements = {} def default(self, o): \"\"\" Overrides [JSONEncoder.default][json.JSONEncoder.default] method. It replaces [RawJavaScript][ipyvizzu.json.RawJavaScript] object with `uuid` and it stores raw JavaScript code with `uuid` key in the `_raw_replacements` dictionary. \"\"\" if isinstance(o, RawJavaScript): key = uuid.uuid4().hex self._raw_replacements[key] = o.raw return key return json.JSONEncoder.default(self, o) def encode(self, o): \"\"\" Overrides [JSONEncoder.encode][json.JSONEncoder.encode] method. It replaces `uuids` with raw JavaScript code without apostrophes. \"\"\" result = json.JSONEncoder.encode(self, o) for key, val in self._raw_replacements.items(): result = result.replace(f'\"{key}\"', val) return result","title":"RawJavaScriptEncoder"},{"location":"reference/ipyvizzu/json/#ipyvizzu.json.RawJavaScriptEncoder.__init__","text":"RawJavaScriptEncoder constructor. It extends JSONEncoder with an instance variable ( _raw_replacements ). The _raw_replacements dictionary stores the uuids and JavaScript codes of the RawJavaScript objects. Source code in ipyvizzu/json.py def __init__(self, *args, **kwargs): \"\"\" RawJavaScriptEncoder constructor. It extends [JSONEncoder][json.JSONEncoder] with an instance variable (`_raw_replacements`). The `_raw_replacements` dictionary stores the `uuids` and JavaScript codes of the [RawJavaScript][ipyvizzu.json.RawJavaScript] objects. \"\"\" json.JSONEncoder.__init__(self, *args, **kwargs) self._raw_replacements = {}","title":"__init__()"},{"location":"reference/ipyvizzu/json/#ipyvizzu.json.RawJavaScriptEncoder.default","text":"Overrides JSONEncoder.default method. It replaces RawJavaScript object with uuid and it stores raw JavaScript code with uuid key in the _raw_replacements dictionary. Source code in ipyvizzu/json.py def default(self, o): \"\"\" Overrides [JSONEncoder.default][json.JSONEncoder.default] method. It replaces [RawJavaScript][ipyvizzu.json.RawJavaScript] object with `uuid` and it stores raw JavaScript code with `uuid` key in the `_raw_replacements` dictionary. \"\"\" if isinstance(o, RawJavaScript): key = uuid.uuid4().hex self._raw_replacements[key] = o.raw return key return json.JSONEncoder.default(self, o)","title":"default()"},{"location":"reference/ipyvizzu/json/#ipyvizzu.json.RawJavaScriptEncoder.encode","text":"Overrides JSONEncoder.encode method. It replaces uuids with raw JavaScript code without apostrophes. Source code in ipyvizzu/json.py def encode(self, o): \"\"\" Overrides [JSONEncoder.encode][json.JSONEncoder.encode] method. It replaces `uuids` with raw JavaScript code without apostrophes. \"\"\" result = json.JSONEncoder.encode(self, o) for key, val in self._raw_replacements.items(): result = result.replace(f'\"{key}\"', val) return result","title":"encode()"},{"location":"reference/ipyvizzu/method/","text":"ipyvizzu.method A module for working with template methods. ipyvizzu.method.Method A class for storing and dumping any kind of data. Source code in ipyvizzu/method.py class Method: \"\"\"A class for storing and dumping any kind of data.\"\"\" # pylint: disable=too-few-public-methods _data: dict def dump(self) -> dict: \"\"\" A method for returning the stored data. Returns: The stored data. \"\"\" return self._data dump() A method for returning the stored data. Returns: Type Description dict The stored data. Source code in ipyvizzu/method.py def dump(self) -> dict: \"\"\" A method for returning the stored data. Returns: The stored data. \"\"\" return self._data ipyvizzu.method.Animate Bases: Method A class for dumping chart independent parameters to DisplayTemplate.ANIMATE template. Source code in ipyvizzu/method.py class Animate(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.ANIMATE][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__( self, chart_target: Union[Animation, AnimationMerger], chart_anim_opts: Optional[dict] = None, ): \"\"\" Animate constructor. It stores and dumps `chart_target` and `chart_anim_opts` parameters. Args: chart_target: Animation object such as [Data][ipyvizzu.animation.Data] [Config][ipyvizzu.animation.Config] or [Style][ipyvizzu.animation.Style]. chart_anim_opts: Animation options' dictionary. If it is not set, it dumps `undefined`. \"\"\" self._data = { \"chart_target\": chart_target.dump(), \"chart_anim_opts\": PlainAnimation(chart_anim_opts).dump() if chart_anim_opts else \"undefined\", } __init__(chart_target, chart_anim_opts=None) Animate constructor. It stores and dumps chart_target and chart_anim_opts parameters. Parameters: Name Type Description Default chart_target Union [ Animation , AnimationMerger ] Animation object such as Data Config or Style . required chart_anim_opts Optional [ dict ] Animation options' dictionary. If it is not set, it dumps undefined . None Source code in ipyvizzu/method.py def __init__( self, chart_target: Union[Animation, AnimationMerger], chart_anim_opts: Optional[dict] = None, ): \"\"\" Animate constructor. It stores and dumps `chart_target` and `chart_anim_opts` parameters. Args: chart_target: Animation object such as [Data][ipyvizzu.animation.Data] [Config][ipyvizzu.animation.Config] or [Style][ipyvizzu.animation.Style]. chart_anim_opts: Animation options' dictionary. If it is not set, it dumps `undefined`. \"\"\" self._data = { \"chart_target\": chart_target.dump(), \"chart_anim_opts\": PlainAnimation(chart_anim_opts).dump() if chart_anim_opts else \"undefined\", } ipyvizzu.method.Feature Bases: Method A class for dumping chart independent parameters to DisplayTemplate.FEATURE template. Source code in ipyvizzu/method.py class Feature(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.FEATURE][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, name: str, enabled: bool): \"\"\" Feature constructor. It stores and dumps `name` and `enabled` parameters. Args: name: The name of a chart feature. enabled: The new state of a chart feature. \"\"\" self._data = {\"name\": name, \"enabled\": json.dumps(enabled)} __init__(name, enabled) Feature constructor. It stores and dumps name and enabled parameters. Parameters: Name Type Description Default name str The name of a chart feature. required enabled bool The new state of a chart feature. required Source code in ipyvizzu/method.py def __init__(self, name: str, enabled: bool): \"\"\" Feature constructor. It stores and dumps `name` and `enabled` parameters. Args: name: The name of a chart feature. enabled: The new state of a chart feature. \"\"\" self._data = {\"name\": name, \"enabled\": json.dumps(enabled)} ipyvizzu.method.Store Bases: Method A class for dumping chart independent parameters to DisplayTemplate.STORE template. Source code in ipyvizzu/method.py class Store(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.STORE][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, snapshot_id: str): \"\"\" Store constructor. It stores and dumps `snapshot_id` parameter. Args: snapshot_id: The id of snapshot object. \"\"\" self._data = {\"id\": snapshot_id} __init__(snapshot_id) Store constructor. It stores and dumps snapshot_id parameter. Parameters: Name Type Description Default snapshot_id str The id of snapshot object. required Source code in ipyvizzu/method.py def __init__(self, snapshot_id: str): \"\"\" Store constructor. It stores and dumps `snapshot_id` parameter. Args: snapshot_id: The id of snapshot object. \"\"\" self._data = {\"id\": snapshot_id} ipyvizzu.method.EventOn Bases: Method A class for dumping chart independent parameters to DisplayTemplate.SET_EVENT template. Source code in ipyvizzu/method.py class EventOn(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.SET_EVENT][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, event_handler: EventHandler): \"\"\" EventOn constructor. It stores and dumps the `id`, the `event` and the `handler` of the event handler object. Args: event_handler: An event handler object. \"\"\" self._data = { \"id\": event_handler.id, \"event\": event_handler.event, \"handler\": event_handler.handler, } __init__(event_handler) EventOn constructor. It stores and dumps the id , the event and the handler of the event handler object. Parameters: Name Type Description Default event_handler EventHandler An event handler object. required Source code in ipyvizzu/method.py def __init__(self, event_handler: EventHandler): \"\"\" EventOn constructor. It stores and dumps the `id`, the `event` and the `handler` of the event handler object. Args: event_handler: An event handler object. \"\"\" self._data = { \"id\": event_handler.id, \"event\": event_handler.event, \"handler\": event_handler.handler, } ipyvizzu.method.EventOff Bases: Method A class for dumping chart independent parameters to DisplayTemplate.CLEAR_EVENT template. Source code in ipyvizzu/method.py class EventOff(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.CLEAR_EVENT][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, event_handler: EventHandler): \"\"\" EventOff constructor. It stores and dumps the `id` and the `event` of the event handler object. Args: event_handler: An event handler object. \"\"\" self._data = {\"id\": event_handler.id, \"event\": event_handler.event} __init__(event_handler) EventOff constructor. It stores and dumps the id and the event of the event handler object. Parameters: Name Type Description Default event_handler EventHandler An event handler object. required Source code in ipyvizzu/method.py def __init__(self, event_handler: EventHandler): \"\"\" EventOff constructor. It stores and dumps the `id` and the `event` of the event handler object. Args: event_handler: An event handler object. \"\"\" self._data = {\"id\": event_handler.id, \"event\": event_handler.event} ipyvizzu.method.Log Bases: Method A class for dumping chart independent parameters to DisplayTemplate.LOG template. Source code in ipyvizzu/method.py class Log(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.LOG][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, chart_property: ChartProperty): \"\"\" Log constructor. It stores and dumps the value of the chart property object. Args: chart_property: A chart property such as [CONFIG][ipyvizzu.template.ChartProperty] and [STYLE][ipyvizzu.template.ChartProperty]. \"\"\" self._data = {\"chart_property\": chart_property.value} __init__(chart_property) Log constructor. It stores and dumps the value of the chart property object. Parameters: Name Type Description Default chart_property ChartProperty A chart property such as CONFIG and STYLE . required Source code in ipyvizzu/method.py def __init__(self, chart_property: ChartProperty): \"\"\" Log constructor. It stores and dumps the value of the chart property object. Args: chart_property: A chart property such as [CONFIG][ipyvizzu.template.ChartProperty] and [STYLE][ipyvizzu.template.ChartProperty]. \"\"\" self._data = {\"chart_property\": chart_property.value}","title":"Method"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method","text":"A module for working with template methods.","title":"method"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method.Method","text":"A class for storing and dumping any kind of data. Source code in ipyvizzu/method.py class Method: \"\"\"A class for storing and dumping any kind of data.\"\"\" # pylint: disable=too-few-public-methods _data: dict def dump(self) -> dict: \"\"\" A method for returning the stored data. Returns: The stored data. \"\"\" return self._data","title":"Method"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method.Method.dump","text":"A method for returning the stored data. Returns: Type Description dict The stored data. Source code in ipyvizzu/method.py def dump(self) -> dict: \"\"\" A method for returning the stored data. Returns: The stored data. \"\"\" return self._data","title":"dump()"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method.Animate","text":"Bases: Method A class for dumping chart independent parameters to DisplayTemplate.ANIMATE template. Source code in ipyvizzu/method.py class Animate(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.ANIMATE][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__( self, chart_target: Union[Animation, AnimationMerger], chart_anim_opts: Optional[dict] = None, ): \"\"\" Animate constructor. It stores and dumps `chart_target` and `chart_anim_opts` parameters. Args: chart_target: Animation object such as [Data][ipyvizzu.animation.Data] [Config][ipyvizzu.animation.Config] or [Style][ipyvizzu.animation.Style]. chart_anim_opts: Animation options' dictionary. If it is not set, it dumps `undefined`. \"\"\" self._data = { \"chart_target\": chart_target.dump(), \"chart_anim_opts\": PlainAnimation(chart_anim_opts).dump() if chart_anim_opts else \"undefined\", }","title":"Animate"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method.Animate.__init__","text":"Animate constructor. It stores and dumps chart_target and chart_anim_opts parameters. Parameters: Name Type Description Default chart_target Union [ Animation , AnimationMerger ] Animation object such as Data Config or Style . required chart_anim_opts Optional [ dict ] Animation options' dictionary. If it is not set, it dumps undefined . None Source code in ipyvizzu/method.py def __init__( self, chart_target: Union[Animation, AnimationMerger], chart_anim_opts: Optional[dict] = None, ): \"\"\" Animate constructor. It stores and dumps `chart_target` and `chart_anim_opts` parameters. Args: chart_target: Animation object such as [Data][ipyvizzu.animation.Data] [Config][ipyvizzu.animation.Config] or [Style][ipyvizzu.animation.Style]. chart_anim_opts: Animation options' dictionary. If it is not set, it dumps `undefined`. \"\"\" self._data = { \"chart_target\": chart_target.dump(), \"chart_anim_opts\": PlainAnimation(chart_anim_opts).dump() if chart_anim_opts else \"undefined\", }","title":"__init__()"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method.Feature","text":"Bases: Method A class for dumping chart independent parameters to DisplayTemplate.FEATURE template. Source code in ipyvizzu/method.py class Feature(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.FEATURE][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, name: str, enabled: bool): \"\"\" Feature constructor. It stores and dumps `name` and `enabled` parameters. Args: name: The name of a chart feature. enabled: The new state of a chart feature. \"\"\" self._data = {\"name\": name, \"enabled\": json.dumps(enabled)}","title":"Feature"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method.Feature.__init__","text":"Feature constructor. It stores and dumps name and enabled parameters. Parameters: Name Type Description Default name str The name of a chart feature. required enabled bool The new state of a chart feature. required Source code in ipyvizzu/method.py def __init__(self, name: str, enabled: bool): \"\"\" Feature constructor. It stores and dumps `name` and `enabled` parameters. Args: name: The name of a chart feature. enabled: The new state of a chart feature. \"\"\" self._data = {\"name\": name, \"enabled\": json.dumps(enabled)}","title":"__init__()"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method.Store","text":"Bases: Method A class for dumping chart independent parameters to DisplayTemplate.STORE template. Source code in ipyvizzu/method.py class Store(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.STORE][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, snapshot_id: str): \"\"\" Store constructor. It stores and dumps `snapshot_id` parameter. Args: snapshot_id: The id of snapshot object. \"\"\" self._data = {\"id\": snapshot_id}","title":"Store"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method.Store.__init__","text":"Store constructor. It stores and dumps snapshot_id parameter. Parameters: Name Type Description Default snapshot_id str The id of snapshot object. required Source code in ipyvizzu/method.py def __init__(self, snapshot_id: str): \"\"\" Store constructor. It stores and dumps `snapshot_id` parameter. Args: snapshot_id: The id of snapshot object. \"\"\" self._data = {\"id\": snapshot_id}","title":"__init__()"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method.EventOn","text":"Bases: Method A class for dumping chart independent parameters to DisplayTemplate.SET_EVENT template. Source code in ipyvizzu/method.py class EventOn(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.SET_EVENT][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, event_handler: EventHandler): \"\"\" EventOn constructor. It stores and dumps the `id`, the `event` and the `handler` of the event handler object. Args: event_handler: An event handler object. \"\"\" self._data = { \"id\": event_handler.id, \"event\": event_handler.event, \"handler\": event_handler.handler, }","title":"EventOn"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method.EventOn.__init__","text":"EventOn constructor. It stores and dumps the id , the event and the handler of the event handler object. Parameters: Name Type Description Default event_handler EventHandler An event handler object. required Source code in ipyvizzu/method.py def __init__(self, event_handler: EventHandler): \"\"\" EventOn constructor. It stores and dumps the `id`, the `event` and the `handler` of the event handler object. Args: event_handler: An event handler object. \"\"\" self._data = { \"id\": event_handler.id, \"event\": event_handler.event, \"handler\": event_handler.handler, }","title":"__init__()"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method.EventOff","text":"Bases: Method A class for dumping chart independent parameters to DisplayTemplate.CLEAR_EVENT template. Source code in ipyvizzu/method.py class EventOff(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.CLEAR_EVENT][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, event_handler: EventHandler): \"\"\" EventOff constructor. It stores and dumps the `id` and the `event` of the event handler object. Args: event_handler: An event handler object. \"\"\" self._data = {\"id\": event_handler.id, \"event\": event_handler.event}","title":"EventOff"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method.EventOff.__init__","text":"EventOff constructor. It stores and dumps the id and the event of the event handler object. Parameters: Name Type Description Default event_handler EventHandler An event handler object. required Source code in ipyvizzu/method.py def __init__(self, event_handler: EventHandler): \"\"\" EventOff constructor. It stores and dumps the `id` and the `event` of the event handler object. Args: event_handler: An event handler object. \"\"\" self._data = {\"id\": event_handler.id, \"event\": event_handler.event}","title":"__init__()"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method.Log","text":"Bases: Method A class for dumping chart independent parameters to DisplayTemplate.LOG template. Source code in ipyvizzu/method.py class Log(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.LOG][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, chart_property: ChartProperty): \"\"\" Log constructor. It stores and dumps the value of the chart property object. Args: chart_property: A chart property such as [CONFIG][ipyvizzu.template.ChartProperty] and [STYLE][ipyvizzu.template.ChartProperty]. \"\"\" self._data = {\"chart_property\": chart_property.value}","title":"Log"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method.Log.__init__","text":"Log constructor. It stores and dumps the value of the chart property object. Parameters: Name Type Description Default chart_property ChartProperty A chart property such as CONFIG and STYLE . required Source code in ipyvizzu/method.py def __init__(self, chart_property: ChartProperty): \"\"\" Log constructor. It stores and dumps the value of the chart property object. Args: chart_property: A chart property such as [CONFIG][ipyvizzu.template.ChartProperty] and [STYLE][ipyvizzu.template.ChartProperty]. \"\"\" self._data = {\"chart_property\": chart_property.value}","title":"__init__()"},{"location":"reference/ipyvizzu/schema/","text":"ipyvizzu.schema A module for storing the data schema. ipyvizzu.schema.NAMED_SCHEMA: dict = {'type': 'array', 'items': {'type': 'object', 'properties': {'name': {'type': 'string'}, 'values': {'type': 'array', 'optional': True}, 'type': {'type': 'string', 'optional': True}}, 'required': ['name']}} module-attribute Store the schema of the series , dimensions and measures data types. ipyvizzu.schema.RECORD_SCHEMA: dict = {'type': 'array', 'items': {'type': 'array'}} module-attribute Store the schema of the records data type. ipyvizzu.schema.DATA_SCHEMA: dict = {'type': 'object', 'oneOf': [{'properties': {'series': NAMED_SCHEMA, 'records': RECORD_SCHEMA, 'filter': {'optional': True}}, 'additionalProperties': False}, {'properties': {'dimensions': NAMED_SCHEMA, 'measures': NAMED_SCHEMA, 'filter': {'optional': True}}, 'additionalProperties': False, 'required': ['dimensions', 'measures']}]} module-attribute Store the schema of the data animation.","title":"Schema"},{"location":"reference/ipyvizzu/schema/#ipyvizzu.schema","text":"A module for storing the data schema.","title":"schema"},{"location":"reference/ipyvizzu/schema/#ipyvizzu.schema.NAMED_SCHEMA","text":"Store the schema of the series , dimensions and measures data types.","title":"NAMED_SCHEMA"},{"location":"reference/ipyvizzu/schema/#ipyvizzu.schema.RECORD_SCHEMA","text":"Store the schema of the records data type.","title":"RECORD_SCHEMA"},{"location":"reference/ipyvizzu/schema/#ipyvizzu.schema.DATA_SCHEMA","text":"Store the schema of the data animation.","title":"DATA_SCHEMA"},{"location":"reference/ipyvizzu/template/","text":"ipyvizzu.template A module for storing the JavaScript templates. ipyvizzu.template.ChartProperty Bases: Enum An enum class for storing chart properties. Source code in ipyvizzu/template.py class ChartProperty(Enum): \"\"\"An enum class for storing chart properties.\"\"\" CONFIG = \"config\" \"\"\"An enum key-value for storing config chart property.\"\"\" STYLE = \"style\" \"\"\"An enum key-value for storing style chart property.\"\"\" CONFIG = 'config' class-attribute An enum key-value for storing config chart property. STYLE = 'style' class-attribute An enum key-value for storing style chart property. ipyvizzu.template.DisplayTarget Bases: Enum An enum class for storing chart display options. Source code in ipyvizzu/template.py class DisplayTarget(Enum): \"\"\"An enum class for storing chart display options.\"\"\" BEGIN = \"begin\" \"\"\"Display all animation steps after the constructor's cell.\"\"\" END = \"end\" \"\"\"Display all animation steps after the last running cell.\"\"\" ACTUAL = \"actual\" \"\"\"Display the actual animation step after the currently running cell.\"\"\" MANUAL = \"manual\" \"\"\"Display all animation steps after calling a show method.\"\"\" BEGIN = 'begin' class-attribute Display all animation steps after the constructor's cell. END = 'end' class-attribute Display all animation steps after the last running cell. ACTUAL = 'actual' class-attribute Display the actual animation step after the currently running cell. MANUAL = 'manual' class-attribute Display all animation steps after calling a show method. ipyvizzu.template.DisplayTemplate A class for storing JavaScript snippet templates. Source code in ipyvizzu/template.py class DisplayTemplate: \"\"\"A class for storing JavaScript snippet templates.\"\"\" # pylint: disable=too-few-public-methods IPYVIZZUJS: str = \"{ipyvizzujs}\" \"\"\"ipyvizzu JavaScript class.\"\"\" INIT: str = ( \"window.ipyvizzu.createChart(element, \" + \"'{chart_id}', '{vizzu}', '{div_width}', '{div_height}');\" ) \"\"\"Call createChart JavaScript method.\"\"\" ANIMATE: str = ( \"window.ipyvizzu.animate(element, \" + \"'{chart_id}', '{display_target}', {scroll}, \" + \"lib => {{ return {chart_target} }}, {chart_anim_opts});\" ) \"\"\"Call animate JavaScript method.\"\"\" FEATURE: str = ( \"window.ipyvizzu.feature(element, '{chart_id}', '{name}', {enabled});\" ) \"\"\"Call feature JavaScript method.\"\"\" STORE: str = \"window.ipyvizzu.store(element, '{chart_id}', '{id}');\" \"\"\"Call store JavaScript method.\"\"\" SET_EVENT: str = ( \"window.ipyvizzu.setEvent(element, \" + \"'{chart_id}', '{id}', '{event}', event => {{ {handler} }});\" ) \"\"\"Call setEvent JavaScript method.\"\"\" CLEAR_EVENT: str = ( \"window.ipyvizzu.clearEvent(element, '{chart_id}', '{id}', '{event}');\" ) \"\"\"Call clearEvent JavaScript method.\"\"\" LOG: str = \"window.ipyvizzu.log(element, '{chart_id}', '{chart_property}');\" \"\"\"Call log JavaScript method.\"\"\" CLEAR_INHIBITSCROLL: str = ( \"if (window.IpyVizzu) { window.IpyVizzu.clearInhibitScroll(element); }\" ) \"\"\"Call clearInhibitScroll JavaScript method if ipyvizzu JavaScript class exists.\"\"\" IPYVIZZUJS: str = '{ipyvizzujs}' class-attribute ipyvizzu JavaScript class. INIT: str = 'window.ipyvizzu.createChart(element, ' + \"'{chart_id}', '{vizzu}', '{div_width}', '{div_height}');\" class-attribute Call createChart JavaScript method. ANIMATE: str = 'window.ipyvizzu.animate(element, ' + \"'{chart_id}', '{display_target}', {scroll}, \" + 'lib => {{ return {chart_target} }}, {chart_anim_opts});' class-attribute Call animate JavaScript method. FEATURE: str = \"window.ipyvizzu.feature(element, '{chart_id}', '{name}', {enabled});\" class-attribute Call feature JavaScript method. STORE: str = \"window.ipyvizzu.store(element, '{chart_id}', '{id}');\" class-attribute Call store JavaScript method. SET_EVENT: str = 'window.ipyvizzu.setEvent(element, ' + \"'{chart_id}', '{id}', '{event}', event => {{ {handler} }});\" class-attribute Call setEvent JavaScript method. CLEAR_EVENT: str = \"window.ipyvizzu.clearEvent(element, '{chart_id}', '{id}', '{event}');\" class-attribute Call clearEvent JavaScript method. LOG: str = \"window.ipyvizzu.log(element, '{chart_id}', '{chart_property}');\" class-attribute Call log JavaScript method. CLEAR_INHIBITSCROLL: str = 'if (window.IpyVizzu) { window.IpyVizzu.clearInhibitScroll(element); }' class-attribute Call clearInhibitScroll JavaScript method if ipyvizzu JavaScript class exists.","title":"Template"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template","text":"A module for storing the JavaScript templates.","title":"template"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.ChartProperty","text":"Bases: Enum An enum class for storing chart properties. Source code in ipyvizzu/template.py class ChartProperty(Enum): \"\"\"An enum class for storing chart properties.\"\"\" CONFIG = \"config\" \"\"\"An enum key-value for storing config chart property.\"\"\" STYLE = \"style\" \"\"\"An enum key-value for storing style chart property.\"\"\"","title":"ChartProperty"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.ChartProperty.CONFIG","text":"An enum key-value for storing config chart property.","title":"CONFIG"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.ChartProperty.STYLE","text":"An enum key-value for storing style chart property.","title":"STYLE"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTarget","text":"Bases: Enum An enum class for storing chart display options. Source code in ipyvizzu/template.py class DisplayTarget(Enum): \"\"\"An enum class for storing chart display options.\"\"\" BEGIN = \"begin\" \"\"\"Display all animation steps after the constructor's cell.\"\"\" END = \"end\" \"\"\"Display all animation steps after the last running cell.\"\"\" ACTUAL = \"actual\" \"\"\"Display the actual animation step after the currently running cell.\"\"\" MANUAL = \"manual\" \"\"\"Display all animation steps after calling a show method.\"\"\"","title":"DisplayTarget"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTarget.BEGIN","text":"Display all animation steps after the constructor's cell.","title":"BEGIN"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTarget.END","text":"Display all animation steps after the last running cell.","title":"END"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTarget.ACTUAL","text":"Display the actual animation step after the currently running cell.","title":"ACTUAL"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTarget.MANUAL","text":"Display all animation steps after calling a show method.","title":"MANUAL"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTemplate","text":"A class for storing JavaScript snippet templates. Source code in ipyvizzu/template.py class DisplayTemplate: \"\"\"A class for storing JavaScript snippet templates.\"\"\" # pylint: disable=too-few-public-methods IPYVIZZUJS: str = \"{ipyvizzujs}\" \"\"\"ipyvizzu JavaScript class.\"\"\" INIT: str = ( \"window.ipyvizzu.createChart(element, \" + \"'{chart_id}', '{vizzu}', '{div_width}', '{div_height}');\" ) \"\"\"Call createChart JavaScript method.\"\"\" ANIMATE: str = ( \"window.ipyvizzu.animate(element, \" + \"'{chart_id}', '{display_target}', {scroll}, \" + \"lib => {{ return {chart_target} }}, {chart_anim_opts});\" ) \"\"\"Call animate JavaScript method.\"\"\" FEATURE: str = ( \"window.ipyvizzu.feature(element, '{chart_id}', '{name}', {enabled});\" ) \"\"\"Call feature JavaScript method.\"\"\" STORE: str = \"window.ipyvizzu.store(element, '{chart_id}', '{id}');\" \"\"\"Call store JavaScript method.\"\"\" SET_EVENT: str = ( \"window.ipyvizzu.setEvent(element, \" + \"'{chart_id}', '{id}', '{event}', event => {{ {handler} }});\" ) \"\"\"Call setEvent JavaScript method.\"\"\" CLEAR_EVENT: str = ( \"window.ipyvizzu.clearEvent(element, '{chart_id}', '{id}', '{event}');\" ) \"\"\"Call clearEvent JavaScript method.\"\"\" LOG: str = \"window.ipyvizzu.log(element, '{chart_id}', '{chart_property}');\" \"\"\"Call log JavaScript method.\"\"\" CLEAR_INHIBITSCROLL: str = ( \"if (window.IpyVizzu) { window.IpyVizzu.clearInhibitScroll(element); }\" ) \"\"\"Call clearInhibitScroll JavaScript method if ipyvizzu JavaScript class exists.\"\"\"","title":"DisplayTemplate"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTemplate.IPYVIZZUJS","text":"ipyvizzu JavaScript class.","title":"IPYVIZZUJS"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTemplate.INIT","text":"Call createChart JavaScript method.","title":"INIT"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTemplate.ANIMATE","text":"Call animate JavaScript method.","title":"ANIMATE"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTemplate.FEATURE","text":"Call feature JavaScript method.","title":"FEATURE"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTemplate.STORE","text":"Call store JavaScript method.","title":"STORE"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTemplate.SET_EVENT","text":"Call setEvent JavaScript method.","title":"SET_EVENT"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTemplate.CLEAR_EVENT","text":"Call clearEvent JavaScript method.","title":"CLEAR_EVENT"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTemplate.LOG","text":"Call log JavaScript method.","title":"LOG"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTemplate.CLEAR_INHIBITSCROLL","text":"Call clearInhibitScroll JavaScript method if ipyvizzu JavaScript class exists.","title":"CLEAR_INHIBITSCROLL"},{"location":"showcases/","text":"Showcases","title":"Showcases"},{"location":"showcases/#showcases","text":"","title":"Showcases"},{"location":"showcases/music/","text":"Music Revenue by Format import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/music/music.csv\", dtype={\"Year\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"x\": \"Year\", \"y\": [\"Format\", \"Revenue [m$]\"], \"color\": \"Format\", \"geometry\": \"area\", \"align\": \"center\", \"title\": \"Music Revenue by Format 1973-2020\", } ), Style( { \"plot\": { \"xAxis\": {\"label\": {\"fontSize\": 9, \"angle\": 2.0}}, \"marker\": { \"colorPalette\": \"#b74c20FF #c47f58FF #1c9761FF\" + \" #ea4549FF #875792FF #3562b6FF\" + \" #ee7c34FF #efae3aFF\" }, } } ), ) chart.animate( Config( { \"align\": \"stretch\", \"title\": \"Music Revenue by Format 1973-2020(%)\", } ), delay=1, ) chart.animate( Config( { \"align\": \"center\", \"title\": \"Music Revenue by Format 1973-2020\", } ), delay=1, ) chart.animate(Config({\"split\": True}), delay=1) chart.animate( Data.filter( \"record.Format == 'Vinyl' ||record.Format == 'Streaming'\" ), Config({\"title\": \"Revenue of Vinyl & Streaming 1973-2020\"}), delay=1, ) chart.animate( Data.filter(None), Config( {\"title\": \"Music Revenue by Format 1973-2020\", \"split\": False} ), delay=1, ) chart.animate( Config( { \"x\": \"Year\", \"y\": \"Revenue [m$]\", \"noop\": \"Format\", \"align\": \"none\", \"geometry\": \"line\", } ), delay=1, )","title":"Music Revenue by Format"},{"location":"showcases/music/#music-revenue-by-format","text":"import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/music/music.csv\", dtype={\"Year\": str}, ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"x\": \"Year\", \"y\": [\"Format\", \"Revenue [m$]\"], \"color\": \"Format\", \"geometry\": \"area\", \"align\": \"center\", \"title\": \"Music Revenue by Format 1973-2020\", } ), Style( { \"plot\": { \"xAxis\": {\"label\": {\"fontSize\": 9, \"angle\": 2.0}}, \"marker\": { \"colorPalette\": \"#b74c20FF #c47f58FF #1c9761FF\" + \" #ea4549FF #875792FF #3562b6FF\" + \" #ee7c34FF #efae3aFF\" }, } } ), ) chart.animate( Config( { \"align\": \"stretch\", \"title\": \"Music Revenue by Format 1973-2020(%)\", } ), delay=1, ) chart.animate( Config( { \"align\": \"center\", \"title\": \"Music Revenue by Format 1973-2020\", } ), delay=1, ) chart.animate(Config({\"split\": True}), delay=1) chart.animate( Data.filter( \"record.Format == 'Vinyl' ||record.Format == 'Streaming'\" ), Config({\"title\": \"Revenue of Vinyl & Streaming 1973-2020\"}), delay=1, ) chart.animate( Data.filter(None), Config( {\"title\": \"Music Revenue by Format 1973-2020\", \"split\": False} ), delay=1, ) chart.animate( Config( { \"x\": \"Year\", \"y\": \"Revenue [m$]\", \"noop\": \"Format\", \"align\": \"none\", \"geometry\": \"line\", } ), delay=1, )","title":"Music Revenue by Format"},{"location":"showcases/musicformats/","text":"Music Revenue by Format - Year by Year import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/musicformats/musicformats.csv\", dtype={\"Year\": str}, ) data = Data() data.add_data_frame(data_frame) config = { \"channels\": { \"y\": { \"set\": [\"Format\"], }, \"x\": {\"set\": [\"Revenue [m$]\"]}, \"label\": {\"set\": [\"Revenue [m$]\"]}, \"color\": {\"set\": [\"Format\"]}, }, \"sort\": \"byValue\", } style = Style( { \"plot\": { \"paddingLeft\": 100, \"paddingTop\": 25, \"yAxis\": { \"color\": \"#ffffff00\", \"label\": {\"paddingRight\": 10}, }, \"xAxis\": { \"title\": {\"color\": \"#ffffff00\"}, \"label\": { \"color\": \"#ffffff00\", \"numberFormat\": \"grouped\", }, }, \"marker\": { \"colorPalette\": \"#b74c20FF #c47f58FF #1c9761FF\" + \" #ea4549FF #875792FF #3562b6FF\" + \" #ee7c34FF #efae3aFF\" }, }, } ) chart = Chart(display=DisplayTarget.END) chart.animate(data, style) for year in range(1973, 2021): config[\"title\"] = f\"Music Revenue by Format - Year by Year {year}\" chart.animate( Data.filter(f\"parseInt(record.Year) == {year}\"), Config(config), duration=0.2, x={\"easing\": \"linear\", \"delay\": 0}, y={\"delay\": 0}, show={\"delay\": 0}, hide={\"delay\": 0}, title={\"duration\": 0, \"delay\": 0}, ) chart.animate( Config( { \"channels\": { \"x\": {\"attach\": [\"Year\"]}, \"label\": {\"set\": None}, } } ), duration=0.3, ) chart.animate( Data.filter(\"record.Year == '2020' || record.Year == '1972'\"), Config({\"title\": \"Lets see the total of the last 47 years\"}), duration=2, ) chart.animate(Config({\"sort\": \"none\"}), delay=0, duration=2) for year in reversed(range(1973, 2020)): chart.animate( Data.filter( f\"parseInt(record.Year) >= {year} || record.Year == '1972'\" ), Config({\"split\": True}), Style({\"plot.xAxis.interlacing.color\": \"#ffffff\"}), duration=0.005, ) chart.animate( Data.filter(\"record.Year != '1972'\"), Config({\"split\": False}), duration=1.5, ) chart.animate( Config({\"channels\": {\"x\": {\"detach\": [\"Year\"]}}}), duration=0 ) chart.animate( Config({\"channels\": {\"label\": {\"set\": [\"Revenue [m$]\"]}}}), duration=0.1, ) chart.animate( Config( { \"channels\": { \"x\": {\"attach\": [\"Year\"]}, \"label\": {\"detach\": [\"Revenue [m$]\"]}, } } ), duration=1, ) chart.animate( Config( { \"channels\": { \"x\": {\"set\": [\"Year\"]}, \"y\": { \"set\": [\"Revenue [m$]\", \"Format\"], \"range\": {\"min\": None, \"max\": None}, }, \"color\": {\"set\": [\"Format\"]}, }, \"title\": \"Music Revenue by Format in the USA 1973 - 2020\", \"split\": True, } ), Style( { \"plot\": { \"paddingLeft\": 7.5, \"paddingTop\": 25, \"xAxis\": { \"label\": { \"fontSize\": 9, \"angle\": 2.0, \"color\": \"#8e8e8e\", } }, \"yAxis\": { \"interlacing\": {\"color\": \"#ffffff00\"}, \"title\": {\"color\": \"#ffffff00\"}, \"label\": {\"color\": \"#ffffff00\"}, }, } } ), duration=2, ) chart.animate(Config({\"geometry\": \"area\"}), duration=1) chart.animate( Config( { \"channels\": { \"x\": {\"set\": [\"Year\"]}, \"y\": {\"range\": {\"max\": \"110%\"}}, }, \"align\": \"center\", \"split\": False, } ), Style({\"plot.marker.borderWidth\": 1}), duration=1, )","title":"Music Revenue by Format - Year by Year"},{"location":"showcases/musicformats/#music-revenue-by-format-year-by-year","text":"import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/musicformats/musicformats.csv\", dtype={\"Year\": str}, ) data = Data() data.add_data_frame(data_frame) config = { \"channels\": { \"y\": { \"set\": [\"Format\"], }, \"x\": {\"set\": [\"Revenue [m$]\"]}, \"label\": {\"set\": [\"Revenue [m$]\"]}, \"color\": {\"set\": [\"Format\"]}, }, \"sort\": \"byValue\", } style = Style( { \"plot\": { \"paddingLeft\": 100, \"paddingTop\": 25, \"yAxis\": { \"color\": \"#ffffff00\", \"label\": {\"paddingRight\": 10}, }, \"xAxis\": { \"title\": {\"color\": \"#ffffff00\"}, \"label\": { \"color\": \"#ffffff00\", \"numberFormat\": \"grouped\", }, }, \"marker\": { \"colorPalette\": \"#b74c20FF #c47f58FF #1c9761FF\" + \" #ea4549FF #875792FF #3562b6FF\" + \" #ee7c34FF #efae3aFF\" }, }, } ) chart = Chart(display=DisplayTarget.END) chart.animate(data, style) for year in range(1973, 2021): config[\"title\"] = f\"Music Revenue by Format - Year by Year {year}\" chart.animate( Data.filter(f\"parseInt(record.Year) == {year}\"), Config(config), duration=0.2, x={\"easing\": \"linear\", \"delay\": 0}, y={\"delay\": 0}, show={\"delay\": 0}, hide={\"delay\": 0}, title={\"duration\": 0, \"delay\": 0}, ) chart.animate( Config( { \"channels\": { \"x\": {\"attach\": [\"Year\"]}, \"label\": {\"set\": None}, } } ), duration=0.3, ) chart.animate( Data.filter(\"record.Year == '2020' || record.Year == '1972'\"), Config({\"title\": \"Lets see the total of the last 47 years\"}), duration=2, ) chart.animate(Config({\"sort\": \"none\"}), delay=0, duration=2) for year in reversed(range(1973, 2020)): chart.animate( Data.filter( f\"parseInt(record.Year) >= {year} || record.Year == '1972'\" ), Config({\"split\": True}), Style({\"plot.xAxis.interlacing.color\": \"#ffffff\"}), duration=0.005, ) chart.animate( Data.filter(\"record.Year != '1972'\"), Config({\"split\": False}), duration=1.5, ) chart.animate( Config({\"channels\": {\"x\": {\"detach\": [\"Year\"]}}}), duration=0 ) chart.animate( Config({\"channels\": {\"label\": {\"set\": [\"Revenue [m$]\"]}}}), duration=0.1, ) chart.animate( Config( { \"channels\": { \"x\": {\"attach\": [\"Year\"]}, \"label\": {\"detach\": [\"Revenue [m$]\"]}, } } ), duration=1, ) chart.animate( Config( { \"channels\": { \"x\": {\"set\": [\"Year\"]}, \"y\": { \"set\": [\"Revenue [m$]\", \"Format\"], \"range\": {\"min\": None, \"max\": None}, }, \"color\": {\"set\": [\"Format\"]}, }, \"title\": \"Music Revenue by Format in the USA 1973 - 2020\", \"split\": True, } ), Style( { \"plot\": { \"paddingLeft\": 7.5, \"paddingTop\": 25, \"xAxis\": { \"label\": { \"fontSize\": 9, \"angle\": 2.0, \"color\": \"#8e8e8e\", } }, \"yAxis\": { \"interlacing\": {\"color\": \"#ffffff00\"}, \"title\": {\"color\": \"#ffffff00\"}, \"label\": {\"color\": \"#ffffff00\"}, }, } } ), duration=2, ) chart.animate(Config({\"geometry\": \"area\"}), duration=1) chart.animate( Config( { \"channels\": { \"x\": {\"set\": [\"Year\"]}, \"y\": {\"range\": {\"max\": \"110%\"}}, }, \"align\": \"center\", \"split\": False, } ), Style({\"plot.marker.borderWidth\": 1}), duration=1, )","title":"Music Revenue by Format - Year by Year"},{"location":"showcases/nadal/","text":"Rafael Nadal's matches at the Roland Garros import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/nadal/nadal.csv\", dtype={ \"Year\": str, \"Round\": str, \"Round2\": str, \"Order_GS\": str, \"Order_all\": str, \"Total_GS\": str, \"Top\": str, }, ) data = Data() data.add_data_frame(data_frame) chart = Chart(display=DisplayTarget.END) chart.animate(data) chart.animate( data.filter('record.Year != \"Total\"'), Config( { \"x\": \"Year\", \"y\": \"Round2\", \"color\": { \"set\": \"Result_Num\", \"range\": {\"min\": -1, \"max\": 1}, }, \"size\": None, \"orientation\": \"horizontal\", \"geometry\": \"rectangle\", \"title\": \"Rafael Nadal's matches at the Roland Garros\", \"legend\": \"size\", } ), Style( { \"title\": { \"paddingTop\": 50, \"paddingBottom\": 0, }, \"plot\": { \"marker\": { \"borderWidth\": 3, \"borderOpacity\": 0, \"colorPalette\": \"#1EB55FFF #AD0000FF #AEAEAEFF\", \"colorGradient\": \"#AEAEAEFF 0.000000, #AD0000FF 0.500000, #1EB55FFF 1.000000\", }, \"paddingLeft\": 20, \"paddingBottom\": \"3.5em\", \"paddingTop\": \"2.5em\", \"xAxis\": {\"interlacing\": {\"color\": \"#ffffff00\"}}, \"yAxis\": {\"label\": {\"fontSize\": \"120%\"}}, }, \"logo\": {\"width\": 100}, } ), ) chart.animate( Config( {\"lightness\": \"Won\", \"title\": \"Won 112 out of 116 (96.5%)\"} ), Style( {\"plot\": {\"marker\": {\"maxLightness\": 0, \"minLightness\": 0.8}}} ), delay=4, ) chart.animate( Config( {\"lightness\": \"Lost\", \"title\": \"Lost 3 times, retired once\"} ), delay=4, ) chart.animate( Config({\"lightness\": None, \"title\": \"\"}), Style( { \"plot\": { \"marker\": {\"maxLightness\": None, \"minLightness\": None} } } ), delay=4, ) chart.animate( Config( { \"lightness\": \"3SetWin\", \"title\": \"90 wins (80%) in straight sets\", } ), Style( {\"plot\": {\"marker\": {\"maxLightness\": 0, \"minLightness\": 0.8}}} ), ) chart.animate( Config( { \"lightness\": \"Straightwin\", \"title\": \"Won 4 titles without dropping a set\", } ), delay=3, ) chart.animate( Config({\"lightness\": None, \"title\": \"\"}), Style( { \"plot\": { \"marker\": {\"maxLightness\": None, \"minLightness\": None} } } ), delay=4, ) chart.animate( Config( { \"lightness\": \"Novak\", \"title\": \"Played the most times against Djokovic - 10 matches\", } ), Style( {\"plot\": {\"marker\": {\"maxLightness\": 0, \"minLightness\": 0.8}}} ), ) chart.animate( Config( { \"lightness\": \"Roger\", \"title\": \"Second on this list is Federer - with 6 encounters\", } ), delay=4, ) chart.animate( Config( { \"lightness\": \"Final\", \"title\": \"Rafa won all of his 14 finals\", } ), delay=4, ) chart.animate( data.filter('record.Year != \"Total\" && record.Round == \"F\"'), Config( { \"y\": {\"set\": \"Round2\", \"range\": {\"max\": 1, \"min\": -5}}, \"x\": \"Count\", \"lightness\": None, \"noop\": \"Year\", \"label\": None, \"title\": \"\", } ), Style( { \"plot\": { \"marker\": { \"borderWidth\": 0, \"colorPalette\": \"#C6652A #CDA02E #47B0FF #329564 #5C88F2 #91A9B5 #DBC4B1\", \"maxLightness\": None, \"minLightness\": None, \"label\": { \"position\": \"center\", \"format\": \"dimensionsFirst\", }, }, \"xAxis\": { \"title\": {\"color\": \"#ffffff00\"}, \"label\": {\"color\": \"#ffffff00\"}, \"interlacing\": {\"color\": \"#ffffff00\"}, }, \"yAxis\": { \"title\": {\"color\": \"#ffffff00\"}, \"label\": {\"color\": \"#ffffff00\", \"fontSize\": None}, }, } } ), delay=3, ) chart.animate( data.filter( \"\"\" record.Year == \"Total\" && record.Tournament == \"Roland Garros\" && record.Player == \"Nadal\" \"\"\" ), Config( { \"noop\": [\"Level\", \"Round2\"], \"label\": [\"Player\", \"Tournament\", \"Count\"], \"y\": {\"set\": [\"Player\", \"Tournament\"]}, } ), duration=0, ) chart.animate(Config({\"noop\": \"Level\"}), duration=0) chart.animate( data.filter( 'record.Year == \"Total\" && record.Round == \"GS\" && record.Top == \"1\"' ), Config( { \"y\": { \"set\": [\"Player\", \"Tournament\", \"Level\"], \"range\": {\"max\": None, \"min\": None}, }, \"title\": \"Rafa won the same Grand Slam title the most times\", \"color\": \"Level\", \"legend\": \"color\", \"noop\": None, \"sort\": \"byValue\", } ), ) chart.animate( data.filter('record.Year == \"Total\" && record.Top == \"1\"'), Config( { \"y\": { \"set\": [\"Player\", \"Tournament\", \"Level\"], \"range\": {\"max\": 19, \"min\": 7}, }, \"x\": [\"Count\"], \"title\": \"Winning the same ATP title - Rafa is 1st, 2nd, 3rd & 4th!\", } ), delay=5, ) chart.animate( data.filter( 'record.Year == \"Total\" && record.Round == \"GS\" && record.Top == \"1\"' ), Config( { \"y\": { \"set\": [\"Player\", \"Tournament\", \"Level\"], \"range\": {\"max\": None, \"min\": None}, }, \"x\": [\"Count\"], \"title\": \"\", \"color\": \"Level\", } ), delay=5, ) chart.animate(Config({\"x\": [\"Count\", \"Total_GS\"], \"label\": \"Player\"})) chart.animate( data.filter('record.Year == \"Total\" && record.Round == \"GS\"'), Config( { \"y\": { \"set\": [\"Player\"], \"range\": {\"max\": None, \"min\": None}, }, \"x\": [\"Count\", \"Tournament\", \"Level\", \"Total_GS\"], \"title\": \"Rafa also leads in the number of total Grand Slams won\", } ), ) chart.animate( Config({\"label\": [\"Total_GS\"]}), Style( { \"plot\": { \"marker\": { \"label\": { \"position\": \"right\", \"filter\": \"color(#666666FF)\", } } } } ), )","title":"Rafael Nadal's matches at the Roland Garros"},{"location":"showcases/nadal/#rafael-nadals-matches-at-the-roland-garros","text":"import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/nadal/nadal.csv\", dtype={ \"Year\": str, \"Round\": str, \"Round2\": str, \"Order_GS\": str, \"Order_all\": str, \"Total_GS\": str, \"Top\": str, }, ) data = Data() data.add_data_frame(data_frame) chart = Chart(display=DisplayTarget.END) chart.animate(data) chart.animate( data.filter('record.Year != \"Total\"'), Config( { \"x\": \"Year\", \"y\": \"Round2\", \"color\": { \"set\": \"Result_Num\", \"range\": {\"min\": -1, \"max\": 1}, }, \"size\": None, \"orientation\": \"horizontal\", \"geometry\": \"rectangle\", \"title\": \"Rafael Nadal's matches at the Roland Garros\", \"legend\": \"size\", } ), Style( { \"title\": { \"paddingTop\": 50, \"paddingBottom\": 0, }, \"plot\": { \"marker\": { \"borderWidth\": 3, \"borderOpacity\": 0, \"colorPalette\": \"#1EB55FFF #AD0000FF #AEAEAEFF\", \"colorGradient\": \"#AEAEAEFF 0.000000, #AD0000FF 0.500000, #1EB55FFF 1.000000\", }, \"paddingLeft\": 20, \"paddingBottom\": \"3.5em\", \"paddingTop\": \"2.5em\", \"xAxis\": {\"interlacing\": {\"color\": \"#ffffff00\"}}, \"yAxis\": {\"label\": {\"fontSize\": \"120%\"}}, }, \"logo\": {\"width\": 100}, } ), ) chart.animate( Config( {\"lightness\": \"Won\", \"title\": \"Won 112 out of 116 (96.5%)\"} ), Style( {\"plot\": {\"marker\": {\"maxLightness\": 0, \"minLightness\": 0.8}}} ), delay=4, ) chart.animate( Config( {\"lightness\": \"Lost\", \"title\": \"Lost 3 times, retired once\"} ), delay=4, ) chart.animate( Config({\"lightness\": None, \"title\": \"\"}), Style( { \"plot\": { \"marker\": {\"maxLightness\": None, \"minLightness\": None} } } ), delay=4, ) chart.animate( Config( { \"lightness\": \"3SetWin\", \"title\": \"90 wins (80%) in straight sets\", } ), Style( {\"plot\": {\"marker\": {\"maxLightness\": 0, \"minLightness\": 0.8}}} ), ) chart.animate( Config( { \"lightness\": \"Straightwin\", \"title\": \"Won 4 titles without dropping a set\", } ), delay=3, ) chart.animate( Config({\"lightness\": None, \"title\": \"\"}), Style( { \"plot\": { \"marker\": {\"maxLightness\": None, \"minLightness\": None} } } ), delay=4, ) chart.animate( Config( { \"lightness\": \"Novak\", \"title\": \"Played the most times against Djokovic - 10 matches\", } ), Style( {\"plot\": {\"marker\": {\"maxLightness\": 0, \"minLightness\": 0.8}}} ), ) chart.animate( Config( { \"lightness\": \"Roger\", \"title\": \"Second on this list is Federer - with 6 encounters\", } ), delay=4, ) chart.animate( Config( { \"lightness\": \"Final\", \"title\": \"Rafa won all of his 14 finals\", } ), delay=4, ) chart.animate( data.filter('record.Year != \"Total\" && record.Round == \"F\"'), Config( { \"y\": {\"set\": \"Round2\", \"range\": {\"max\": 1, \"min\": -5}}, \"x\": \"Count\", \"lightness\": None, \"noop\": \"Year\", \"label\": None, \"title\": \"\", } ), Style( { \"plot\": { \"marker\": { \"borderWidth\": 0, \"colorPalette\": \"#C6652A #CDA02E #47B0FF #329564 #5C88F2 #91A9B5 #DBC4B1\", \"maxLightness\": None, \"minLightness\": None, \"label\": { \"position\": \"center\", \"format\": \"dimensionsFirst\", }, }, \"xAxis\": { \"title\": {\"color\": \"#ffffff00\"}, \"label\": {\"color\": \"#ffffff00\"}, \"interlacing\": {\"color\": \"#ffffff00\"}, }, \"yAxis\": { \"title\": {\"color\": \"#ffffff00\"}, \"label\": {\"color\": \"#ffffff00\", \"fontSize\": None}, }, } } ), delay=3, ) chart.animate( data.filter( \"\"\" record.Year == \"Total\" && record.Tournament == \"Roland Garros\" && record.Player == \"Nadal\" \"\"\" ), Config( { \"noop\": [\"Level\", \"Round2\"], \"label\": [\"Player\", \"Tournament\", \"Count\"], \"y\": {\"set\": [\"Player\", \"Tournament\"]}, } ), duration=0, ) chart.animate(Config({\"noop\": \"Level\"}), duration=0) chart.animate( data.filter( 'record.Year == \"Total\" && record.Round == \"GS\" && record.Top == \"1\"' ), Config( { \"y\": { \"set\": [\"Player\", \"Tournament\", \"Level\"], \"range\": {\"max\": None, \"min\": None}, }, \"title\": \"Rafa won the same Grand Slam title the most times\", \"color\": \"Level\", \"legend\": \"color\", \"noop\": None, \"sort\": \"byValue\", } ), ) chart.animate( data.filter('record.Year == \"Total\" && record.Top == \"1\"'), Config( { \"y\": { \"set\": [\"Player\", \"Tournament\", \"Level\"], \"range\": {\"max\": 19, \"min\": 7}, }, \"x\": [\"Count\"], \"title\": \"Winning the same ATP title - Rafa is 1st, 2nd, 3rd & 4th!\", } ), delay=5, ) chart.animate( data.filter( 'record.Year == \"Total\" && record.Round == \"GS\" && record.Top == \"1\"' ), Config( { \"y\": { \"set\": [\"Player\", \"Tournament\", \"Level\"], \"range\": {\"max\": None, \"min\": None}, }, \"x\": [\"Count\"], \"title\": \"\", \"color\": \"Level\", } ), delay=5, ) chart.animate(Config({\"x\": [\"Count\", \"Total_GS\"], \"label\": \"Player\"})) chart.animate( data.filter('record.Year == \"Total\" && record.Round == \"GS\"'), Config( { \"y\": { \"set\": [\"Player\"], \"range\": {\"max\": None, \"min\": None}, }, \"x\": [\"Count\", \"Tournament\", \"Level\", \"Total_GS\"], \"title\": \"Rafa also leads in the number of total Grand Slams won\", } ), ) chart.animate( Config({\"label\": [\"Total_GS\"]}), Style( { \"plot\": { \"marker\": { \"label\": { \"position\": \"right\", \"filter\": \"color(#666666FF)\", } } } } ), )","title":"Rafael Nadal's matches at the Roland Garros"},{"location":"showcases/sales/","text":"Sales of Shoes import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/sales/sales.csv\" ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Data.filter(\"record['Product'] == 'Shoes'\"), Config( { \"x\": \"Region\", \"y\": [\"Sales\", \"Product\"], \"label\": \"Sales\", \"color\": \"Product\", \"title\": \"Sales of Shoes\", } ), ) chart.animate( Data.filter( \"record['Product'] == 'Shoes' || record['Product'] == 'Handbags'\" ), Config({\"title\": \"Sales of Shoes & Handbags\"}), delay=1, ) chart.animate( Data.filter(\"record['Product'] != 'Accessories'\"), Config({\"title\": \"Sales of Shoes, Handbags & Gloves\"}), delay=1, ) chart.animate( Data.filter(None), Config({\"title\": \"Sales of All Products\"}), delay=1, ) chart.animate( Config( { \"y\": [\"Revenue [$]\", \"Product\"], \"label\": \"Revenue [$]\", \"title\": \"Revenue of All Products\", } ), delay=1, ) chart.animate( Config({\"x\": [\"Region\", \"Revenue [$]\"], \"y\": \"Product\"}), delay=2 ) chart.animate(Config({\"x\": \"Revenue [$]\", \"y\": \"Product\"})) chart.animate( Config({\"coordSystem\": \"polar\", \"sort\": \"byValue\"}), delay=1 )","title":"Sales of Shoes"},{"location":"showcases/sales/#sales-of-shoes","text":"import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/sales/sales.csv\" ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Data.filter(\"record['Product'] == 'Shoes'\"), Config( { \"x\": \"Region\", \"y\": [\"Sales\", \"Product\"], \"label\": \"Sales\", \"color\": \"Product\", \"title\": \"Sales of Shoes\", } ), ) chart.animate( Data.filter( \"record['Product'] == 'Shoes' || record['Product'] == 'Handbags'\" ), Config({\"title\": \"Sales of Shoes & Handbags\"}), delay=1, ) chart.animate( Data.filter(\"record['Product'] != 'Accessories'\"), Config({\"title\": \"Sales of Shoes, Handbags & Gloves\"}), delay=1, ) chart.animate( Data.filter(None), Config({\"title\": \"Sales of All Products\"}), delay=1, ) chart.animate( Config( { \"y\": [\"Revenue [$]\", \"Product\"], \"label\": \"Revenue [$]\", \"title\": \"Revenue of All Products\", } ), delay=1, ) chart.animate( Config({\"x\": [\"Region\", \"Revenue [$]\"], \"y\": \"Product\"}), delay=2 ) chart.animate(Config({\"x\": \"Revenue [$]\", \"y\": \"Product\"})) chart.animate( Config({\"coordSystem\": \"polar\", \"sort\": \"byValue\"}), delay=1 )","title":"Sales of Shoes"},{"location":"showcases/titanic/","text":"Passengers of the Titanic import pandas as pd from ipyvizzu import Chart, Data, Config data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/titanic/titanic.csv\" ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) chart.animate( Config( { \"x\": [\"Count\", \"Sex\", \"Survived\"], \"y\": None, \"coordSystem\": \"polar\", } ) )","title":"Passengers of the Titanic"},{"location":"showcases/titanic/#passengers-of-the-titanic","text":"import pandas as pd from ipyvizzu import Chart, Data, Config data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/showcases/titanic/titanic.csv\" ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) chart.animate( Config( { \"x\": [\"Count\", \"Sex\", \"Survived\"], \"y\": None, \"coordSystem\": \"polar\", } ) )","title":"Passengers of the Titanic"},{"location":"tutorial/","text":"Tutorial This is the tutorial of ipyvizzu - the Python integration of the free, open-source JavaScript / C++ library Vizzu . You can create animated charts, data stories, interactive reports and dashboards with it in Jupyter and similar notebooks and app building platforms. This is an excellent starting point to get acquainted with ipyvizzu , as it walks you through the installation of the library, introduces the logic it employs and the different settings to control how your animated charts look and behave. The tutorial is organized into chapters that introduce the concept and the details of ipyvizzu step-by-step. You can find the list of chapters at the end of this page and in the menu. Basic logic of ipyvizzu The foundation of an ipyvizzu chart is the animation. The animation contains states describing the chart's configuration, such as the data series on the chart, the coordinate system, labels, titles, etc. A static chart is the result of a single animation state. When there are more states, ipyvizzu automatically transitions between these. The animate method initiates the animation into a new state by describing the new chart and how ipyvizzu should transition to it. The animate method has non-keyword and keyword arguments. The non-keyword arguments sets the chart, and the (optional) keyword arguments determines how ipyvizzu should animate to that state. There are three types of non-keyword arguments: data : this is where you add the data that you want to visualize config : this is where you can add or remove series to the chart and set general settings like the chart title, the geometry, the alignment etc. style : this is where you can set how your chart looks Installation pip install ipyvizzu Visit Installation chapter for more options and details. Usage Note ipyvizzu is to generate the JavaScript code, then the Vizzu calls are evaluated by the browser. Therefore if a blank space appears where the chart should be, check the console log of your browser where Vizzu reports its errors. Chart settings Data Axes, title, tooltip Geometry Channels & legend Group/stack Sorting Align & range Changing dimensions Orientation, split & polar Filtering & adding new records Without coordinates & noop channel Color palette & fonts Chart layout Animation options Events Shorthands & Store Chart presets Style","title":"Tutorial"},{"location":"tutorial/#tutorial","text":"This is the tutorial of ipyvizzu - the Python integration of the free, open-source JavaScript / C++ library Vizzu . You can create animated charts, data stories, interactive reports and dashboards with it in Jupyter and similar notebooks and app building platforms. This is an excellent starting point to get acquainted with ipyvizzu , as it walks you through the installation of the library, introduces the logic it employs and the different settings to control how your animated charts look and behave. The tutorial is organized into chapters that introduce the concept and the details of ipyvizzu step-by-step. You can find the list of chapters at the end of this page and in the menu.","title":"Tutorial"},{"location":"tutorial/#basic-logic-of-ipyvizzu","text":"The foundation of an ipyvizzu chart is the animation. The animation contains states describing the chart's configuration, such as the data series on the chart, the coordinate system, labels, titles, etc. A static chart is the result of a single animation state. When there are more states, ipyvizzu automatically transitions between these. The animate method initiates the animation into a new state by describing the new chart and how ipyvizzu should transition to it. The animate method has non-keyword and keyword arguments. The non-keyword arguments sets the chart, and the (optional) keyword arguments determines how ipyvizzu should animate to that state. There are three types of non-keyword arguments: data : this is where you add the data that you want to visualize config : this is where you can add or remove series to the chart and set general settings like the chart title, the geometry, the alignment etc. style : this is where you can set how your chart looks","title":"Basic logic of ipyvizzu"},{"location":"tutorial/#installation","text":"pip install ipyvizzu Visit Installation chapter for more options and details.","title":"Installation"},{"location":"tutorial/#usage","text":"Note ipyvizzu is to generate the JavaScript code, then the Vizzu calls are evaluated by the browser. Therefore if a blank space appears where the chart should be, check the console log of your browser where Vizzu reports its errors. Chart settings Data Axes, title, tooltip Geometry Channels & legend Group/stack Sorting Align & range Changing dimensions Orientation, split & polar Filtering & adding new records Without coordinates & noop channel Color palette & fonts Chart layout Animation options Events Shorthands & Store Chart presets Style","title":"Usage"},{"location":"tutorial/align_range/","text":"Align & range ipyvizzu offers different options to align your chart elements and to set the range of values shown on the axes. Alignment can be used to create charts like a stream chart where the elements are vertically centered. A good example for using range is when you fix the y-axis so that it would not adapt to the data being shown. Centered alignment. The effect of this parameter depends on the orientation of the chart. For example, on a column chart, elements will be vertically centered, whereas on a bar chart, horizontally. Info In the first example, the y-axis labels are hidden because they don't properly represent the values shown on the column chart anymore, as the chart elements float off the x-axis. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/music_data.csv\" ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Kinds\"]}, \"x\": {\"set\": [\"Genres\"]}, \"label\": {\"attach\": [\"Popularity\"]}, }, \"color\": {\"attach\": [\"Kinds\"]}, } ) ) Change align and configures the y axis labels to disappear during the animation. chart.animate( Config({\"align\": \"center\", \"channels\": {\"y\": {\"labels\": False}}}) ) Stretched alignment. This way the elements will proportionally fill the entire plot area, effectively showing proportions in stacked charts. This is why the scale will also switch from values to percentages when used. chart.animate(Config({\"align\": \"stretch\"})) Getting back to the default alignment. chart.animate( Config({\"align\": \"none\", \"channels\": {\"y\": {\"labels\": True}}}) ) You can set the range of an axis by setting the minimum and maximum values of it. Both parameters are optional so that you can set only one of those, and you either set specific values or a relative value by adding the % sign. In this example, we set the range of the y-axis in a way that the max value is 150% of the biggest element\u2019s value. chart.animate(Config({\"channels\": {\"y\": {\"range\": {\"max\": \"150%\"}}}})) You can also set the range for an axis with a dimension on it. You can even use this feature to filter certain elements, just like in the following example. chart.animate( Config( { \"channels\": { \"x\": { \"range\": { \"min\": -2, \"max\": 3, } } } } ) ) Ranges have certain defaults depending on the chart's configuration, based on common data viz guidelines because we wanted to make it easy for you to create sleek charts. For example, in the cartesian coordinate system, the range will be automatically set to the max:110% for an axis with a measure on it. Polar coordinates work differently, as you can see for yourself in the Orientation, split & polar chapter . Whenever you want to set your ranges back to the default value, just set them to 'auto' . chart.animate( Config( { \"channels\": { \"y\": { \"range\": {\"max\": \"auto\"}, }, \"x\": { \"range\": { \"min\": \"auto\", \"max\": \"auto\", } }, } } ) )","title":"Align & range"},{"location":"tutorial/align_range/#align-range","text":"ipyvizzu offers different options to align your chart elements and to set the range of values shown on the axes. Alignment can be used to create charts like a stream chart where the elements are vertically centered. A good example for using range is when you fix the y-axis so that it would not adapt to the data being shown. Centered alignment. The effect of this parameter depends on the orientation of the chart. For example, on a column chart, elements will be vertically centered, whereas on a bar chart, horizontally. Info In the first example, the y-axis labels are hidden because they don't properly represent the values shown on the column chart anymore, as the chart elements float off the x-axis. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/music_data.csv\" ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Kinds\"]}, \"x\": {\"set\": [\"Genres\"]}, \"label\": {\"attach\": [\"Popularity\"]}, }, \"color\": {\"attach\": [\"Kinds\"]}, } ) ) Change align and configures the y axis labels to disappear during the animation. chart.animate( Config({\"align\": \"center\", \"channels\": {\"y\": {\"labels\": False}}}) ) Stretched alignment. This way the elements will proportionally fill the entire plot area, effectively showing proportions in stacked charts. This is why the scale will also switch from values to percentages when used. chart.animate(Config({\"align\": \"stretch\"})) Getting back to the default alignment. chart.animate( Config({\"align\": \"none\", \"channels\": {\"y\": {\"labels\": True}}}) ) You can set the range of an axis by setting the minimum and maximum values of it. Both parameters are optional so that you can set only one of those, and you either set specific values or a relative value by adding the % sign. In this example, we set the range of the y-axis in a way that the max value is 150% of the biggest element\u2019s value. chart.animate(Config({\"channels\": {\"y\": {\"range\": {\"max\": \"150%\"}}}})) You can also set the range for an axis with a dimension on it. You can even use this feature to filter certain elements, just like in the following example. chart.animate( Config( { \"channels\": { \"x\": { \"range\": { \"min\": -2, \"max\": 3, } } } } ) ) Ranges have certain defaults depending on the chart's configuration, based on common data viz guidelines because we wanted to make it easy for you to create sleek charts. For example, in the cartesian coordinate system, the range will be automatically set to the max:110% for an axis with a measure on it. Polar coordinates work differently, as you can see for yourself in the Orientation, split & polar chapter . Whenever you want to set your ranges back to the default value, just set them to 'auto' . chart.animate( Config( { \"channels\": { \"y\": { \"range\": {\"max\": \"auto\"}, }, \"x\": { \"range\": { \"min\": \"auto\", \"max\": \"auto\", } }, } } ) )","title":"Align &amp; range"},{"location":"tutorial/animation_options/","text":"Animation options In ipyvizzu you can set the timing and duration of the animation. You can do this either for the whole animation, or for animation groups such as the elements moving along the x-axis or the y-axis, appearing or disappearing or when the coordinate system is changed. Let\u2019s see first a simple example when a stacked column chart is grouped using the default animation options. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/music_data.csv\" ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Kinds\"]}, \"x\": {\"set\": [\"Genres\"]}, }, \"label\": {\"attach\": [\"Popularity\"]}, \"color\": {\"set\": [\"Kinds\"]}, } ) ) chart.animate( Config( { \"channels\": { \"y\": {\"detach\": [\"Kinds\"]}, \"x\": {\"attach\": [\"Kinds\"]}, } } ) ) We stack the columns, still with the default options. chart.animate( Config( { \"channels\": { \"x\": {\"detach\": [\"Kinds\"]}, \"y\": {\"attach\": [\"Kinds\"]}, } } ) ) Now we change the animation settings for the elements moving along the y-axis and also the change in styles, more specifically when the labels on the markers move from the center of the chart elements to the top of them. chart.animate( Config( { \"channels\": { \"y\": {\"detach\": [\"Kinds\"]}, \"x\": {\"attach\": [\"Kinds\"]}, } } ), y={\"duration\": 2, \"delay\": 2}, style={\"duration\": 2, \"delay\": 4}, ) This is an example of changing the settings for the whole animation at once. chart.animate( Config( { \"channels\": { \"x\": {\"detach\": [\"Kinds\"]}, \"y\": {\"attach\": [\"Kinds\"]}, } } ), duration=1, easing=\"linear\", ) When the two settings are combined, ipyvizzu will use the general animation options and spread the unique settings for specific groups proportionally. This is why you can see the same animation as two steps before but happening much quicker since the duration of the whole animation is set to 1 second. chart.animate( Config( { \"channels\": { \"y\": {\"detach\": [\"Kinds\"]}, \"x\": {\"attach\": [\"Kinds\"]}, } } ), duration=1, easing=\"linear\", y={\"duration\": 2, \"delay\": 2}, style={\"duration\": 2, \"delay\": 4}, ) The default unit for animation is seconds, but you can set other units. chart.animate( Config( { \"channels\": { \"x\": {\"detach\": [\"Kinds\"]}, \"y\": {\"attach\": [\"Kinds\"]}, } } ), duration=\"500ms\", )","title":"Animation options"},{"location":"tutorial/animation_options/#animation-options","text":"In ipyvizzu you can set the timing and duration of the animation. You can do this either for the whole animation, or for animation groups such as the elements moving along the x-axis or the y-axis, appearing or disappearing or when the coordinate system is changed. Let\u2019s see first a simple example when a stacked column chart is grouped using the default animation options. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/music_data.csv\" ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Kinds\"]}, \"x\": {\"set\": [\"Genres\"]}, }, \"label\": {\"attach\": [\"Popularity\"]}, \"color\": {\"set\": [\"Kinds\"]}, } ) ) chart.animate( Config( { \"channels\": { \"y\": {\"detach\": [\"Kinds\"]}, \"x\": {\"attach\": [\"Kinds\"]}, } } ) ) We stack the columns, still with the default options. chart.animate( Config( { \"channels\": { \"x\": {\"detach\": [\"Kinds\"]}, \"y\": {\"attach\": [\"Kinds\"]}, } } ) ) Now we change the animation settings for the elements moving along the y-axis and also the change in styles, more specifically when the labels on the markers move from the center of the chart elements to the top of them. chart.animate( Config( { \"channels\": { \"y\": {\"detach\": [\"Kinds\"]}, \"x\": {\"attach\": [\"Kinds\"]}, } } ), y={\"duration\": 2, \"delay\": 2}, style={\"duration\": 2, \"delay\": 4}, ) This is an example of changing the settings for the whole animation at once. chart.animate( Config( { \"channels\": { \"x\": {\"detach\": [\"Kinds\"]}, \"y\": {\"attach\": [\"Kinds\"]}, } } ), duration=1, easing=\"linear\", ) When the two settings are combined, ipyvizzu will use the general animation options and spread the unique settings for specific groups proportionally. This is why you can see the same animation as two steps before but happening much quicker since the duration of the whole animation is set to 1 second. chart.animate( Config( { \"channels\": { \"y\": {\"detach\": [\"Kinds\"]}, \"x\": {\"attach\": [\"Kinds\"]}, } } ), duration=1, easing=\"linear\", y={\"duration\": 2, \"delay\": 2}, style={\"duration\": 2, \"delay\": 4}, ) The default unit for animation is seconds, but you can set other units. chart.animate( Config( { \"channels\": { \"x\": {\"detach\": [\"Kinds\"]}, \"y\": {\"attach\": [\"Kinds\"]}, } } ), duration=\"500ms\", )","title":"Animation options"},{"location":"tutorial/axes_title_tooltip/","text":"Axes, title, tooltip To build a chart with ipyvizzu , you have to add data series to the channels. Channels will be explained more in-depth later, but for now, think of channels as different elements of the chart we can bind data to. The simplest and most often used channels are the x and y-axes. The first step is to create a simple column chart, adding one of the dimensions from the data set we added in the previous chapter ( Genres ) to the x-axis and the measure ( Popularity ) to the y-axis using the set property. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, ChartProperty, Data, Config data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/music_data.csv\" ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\"]}, \"x\": {\"set\": [\"Genres\"]}, } } ) ) In the next step, the chart is rearranged by putting both series on the y-axis using once again the set property, resulting in a single column chart. ipyvizzu automatically animates between the initial state and this one. chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Genres\"]}, \"x\": {\"set\": None}, } } ) ) Instead of set, you can use attach and detach to add or remove series to/from the channels. chart.animate( Config( { \"channels\": { \"y\": {\"detach\": [\"Popularity\"]}, \"x\": {\"attach\": [\"Popularity\"]}, } } ) ) Using attach & detach makes it easier to build your animated charts step-by-step, however you either have to keep in mind what you had on which channel in the previous step or add the following code to access the actual configuration of the chart. Add the following code to log the actual configuration of the chart in the browser console. chart.log(ChartProperty.CONFIG) Setting the chart title with the title command. chart.animate(Config({\"title\": \"My first chart\"})) Switching on the tooltips that appear on the chart elements when the user hovers over them with their mouse by adding the ( \"tooltip\" , True ) parameters to the chart.feature method. chart.feature(\"tooltip\", True)","title":"Axes, title, tooltip"},{"location":"tutorial/axes_title_tooltip/#axes-title-tooltip","text":"To build a chart with ipyvizzu , you have to add data series to the channels. Channels will be explained more in-depth later, but for now, think of channels as different elements of the chart we can bind data to. The simplest and most often used channels are the x and y-axes. The first step is to create a simple column chart, adding one of the dimensions from the data set we added in the previous chapter ( Genres ) to the x-axis and the measure ( Popularity ) to the y-axis using the set property. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, ChartProperty, Data, Config data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/music_data.csv\" ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\"]}, \"x\": {\"set\": [\"Genres\"]}, } } ) ) In the next step, the chart is rearranged by putting both series on the y-axis using once again the set property, resulting in a single column chart. ipyvizzu automatically animates between the initial state and this one. chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Genres\"]}, \"x\": {\"set\": None}, } } ) ) Instead of set, you can use attach and detach to add or remove series to/from the channels. chart.animate( Config( { \"channels\": { \"y\": {\"detach\": [\"Popularity\"]}, \"x\": {\"attach\": [\"Popularity\"]}, } } ) ) Using attach & detach makes it easier to build your animated charts step-by-step, however you either have to keep in mind what you had on which channel in the previous step or add the following code to access the actual configuration of the chart. Add the following code to log the actual configuration of the chart in the browser console. chart.log(ChartProperty.CONFIG) Setting the chart title with the title command. chart.animate(Config({\"title\": \"My first chart\"})) Switching on the tooltips that appear on the chart elements when the user hovers over them with their mouse by adding the ( \"tooltip\" , True ) parameters to the chart.feature method. chart.feature(\"tooltip\", True)","title":"Axes, title, tooltip"},{"location":"tutorial/changing_dimensions/","text":"Changing dimensions The simplest of dimension-changing operations are aggregate and drill-down. These features basically mean that you either add or remove an additional dimension to/from an axis or another channel. Let\u2019s aggregate together the elements by getting the Genres dimension off the x-axis. By taking it off the chart, only one chart element remains for every color, and ipyvizzu automatically calculates and shows the aggregate value of the elements. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/music_data.csv\" ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Kinds\"]}, \"x\": {\"set\": [\"Genres\"]}, \"label\": {\"attach\": [\"Popularity\"]}, }, \"color\": {\"attach\": [\"Kinds\"]}, } ) ) chart.animate( Config( { \"channels\": { \"x\": {\"set\": None}, } } ) ) When you simultaneously add and remove dimensions, the partitioning of the underlying data to markers on the chart changes. There are multiple ways to transition through these kinds of operations using. By default, the markers are aggregated to the common base of the two states, then drilled down to the target state, as shown below. chart.animate( Config( { \"channels\": { \"y\": { \"detach\": [\"Kinds\"], }, \"x\": { \"set\": [\"Genres\"], }, \"color\": { \"set\": None, }, } } ) ) You can change this setting and drill down to the union of the two states instead, and then aggregate to the target state: chart.animate( Config( { \"channels\": { \"x\": { \"detach\": [\"Genres\"], \"attach\": [\"Kinds\"], }, } } ), regroupStrategy=\"drilldown\", ) There is also the option to fade the chart between the states: chart.animate( Config( { \"channels\": { \"x\": { \"detach\": [\"Kinds\"], \"attach\": [\"Genres\"], }, } } ), regroupStrategy=\"fade\", ) To simply drill down, the same dimension is put back on the y-axis. chart.animate( Config( { \"channels\": { \"y\": { \"attach\": [\"Kinds\"], }, \"color\": { \"set\": [\"Kinds\"], }, } } ) )","title":"Changing dimensions"},{"location":"tutorial/changing_dimensions/#changing-dimensions","text":"The simplest of dimension-changing operations are aggregate and drill-down. These features basically mean that you either add or remove an additional dimension to/from an axis or another channel. Let\u2019s aggregate together the elements by getting the Genres dimension off the x-axis. By taking it off the chart, only one chart element remains for every color, and ipyvizzu automatically calculates and shows the aggregate value of the elements. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/music_data.csv\" ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Kinds\"]}, \"x\": {\"set\": [\"Genres\"]}, \"label\": {\"attach\": [\"Popularity\"]}, }, \"color\": {\"attach\": [\"Kinds\"]}, } ) ) chart.animate( Config( { \"channels\": { \"x\": {\"set\": None}, } } ) ) When you simultaneously add and remove dimensions, the partitioning of the underlying data to markers on the chart changes. There are multiple ways to transition through these kinds of operations using. By default, the markers are aggregated to the common base of the two states, then drilled down to the target state, as shown below. chart.animate( Config( { \"channels\": { \"y\": { \"detach\": [\"Kinds\"], }, \"x\": { \"set\": [\"Genres\"], }, \"color\": { \"set\": None, }, } } ) ) You can change this setting and drill down to the union of the two states instead, and then aggregate to the target state: chart.animate( Config( { \"channels\": { \"x\": { \"detach\": [\"Genres\"], \"attach\": [\"Kinds\"], }, } } ), regroupStrategy=\"drilldown\", ) There is also the option to fade the chart between the states: chart.animate( Config( { \"channels\": { \"x\": { \"detach\": [\"Kinds\"], \"attach\": [\"Genres\"], }, } } ), regroupStrategy=\"fade\", ) To simply drill down, the same dimension is put back on the y-axis. chart.animate( Config( { \"channels\": { \"y\": { \"attach\": [\"Kinds\"], }, \"color\": { \"set\": [\"Kinds\"], }, } } ) )","title":"Changing dimensions"},{"location":"tutorial/channels_legend/","text":"Channels & legend Besides the x-axis and the y-axis, there are five more channels in ipyvizzu you can use to visualize your data. Similarly to the axes you can put any number of dimensions and/or one measure to a channel. In the following example the four most commonly used channels are shown. The fifth, noop channel is introduced later in the Without coordinates & noop channel chapter. Data on the label channel will be written on the markers on the chart. ipyvizzu automatically determines the best way to position these labels, but you can set them differently with the Style object introduced in the Color palette & fonts chapter. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/music_data.csv\" ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\"]}, \"x\": {\"set\": [\"Genres\"]}, }, } ) ) chart.animate( Config({\"channels\": {\"label\": {\"attach\": [\"Popularity\"]}}}) ) The lightness channel sets the lightness of the markers. In this case the same measure ( Popularity ) is added to it that is on the y-axis, meaning that columns\u2019 height and lightness represent the same values. The legend for the lightness channel is turned on using the legend property. Info This is an example when we explicitly instruct ipyvizzu to show the legend. By default ipyvizzu automatically shows/hides the legend when it's necessary. You can also turn it off with the legend : None command or set back to automatic mode with legend : 'auto' . chart.animate( Config( { \"channels\": {\"lightness\": {\"attach\": [\"Popularity\"]}}, \"legend\": \"lightness\", } ) ) The color channel sets the color of the markers. The same dimension ( Genres ) is put on it that is on the x-axis resulting in each bar having a different color. If a measure is put on the color channel, a color range will be used. Info The value on the lightness channel is removed in this step as it doesn\u2019t make sense to use it together with the color channel in this case. chart.animate( Config( { \"channels\": {\"color\": {\"attach\": [\"Genres\"]}}, \"legend\": \"color\", } ) ) The size channel sets the size of the markers if the geometry is circle - where size sets the radius of the circles - or line - where size determines line width. It is ignored when using rectangle or area geometry. This is why we change the geometry to circle in the example. chart.animate( Config( { \"channels\": {\"size\": {\"set\": [\"Popularity\"]}}, \"geometry\": \"circle\", } ) )","title":"Channels & legend"},{"location":"tutorial/channels_legend/#channels-legend","text":"Besides the x-axis and the y-axis, there are five more channels in ipyvizzu you can use to visualize your data. Similarly to the axes you can put any number of dimensions and/or one measure to a channel. In the following example the four most commonly used channels are shown. The fifth, noop channel is introduced later in the Without coordinates & noop channel chapter. Data on the label channel will be written on the markers on the chart. ipyvizzu automatically determines the best way to position these labels, but you can set them differently with the Style object introduced in the Color palette & fonts chapter. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/music_data.csv\" ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\"]}, \"x\": {\"set\": [\"Genres\"]}, }, } ) ) chart.animate( Config({\"channels\": {\"label\": {\"attach\": [\"Popularity\"]}}}) ) The lightness channel sets the lightness of the markers. In this case the same measure ( Popularity ) is added to it that is on the y-axis, meaning that columns\u2019 height and lightness represent the same values. The legend for the lightness channel is turned on using the legend property. Info This is an example when we explicitly instruct ipyvizzu to show the legend. By default ipyvizzu automatically shows/hides the legend when it's necessary. You can also turn it off with the legend : None command or set back to automatic mode with legend : 'auto' . chart.animate( Config( { \"channels\": {\"lightness\": {\"attach\": [\"Popularity\"]}}, \"legend\": \"lightness\", } ) ) The color channel sets the color of the markers. The same dimension ( Genres ) is put on it that is on the x-axis resulting in each bar having a different color. If a measure is put on the color channel, a color range will be used. Info The value on the lightness channel is removed in this step as it doesn\u2019t make sense to use it together with the color channel in this case. chart.animate( Config( { \"channels\": {\"color\": {\"attach\": [\"Genres\"]}}, \"legend\": \"color\", } ) ) The size channel sets the size of the markers if the geometry is circle - where size sets the radius of the circles - or line - where size determines line width. It is ignored when using rectangle or area geometry. This is why we change the geometry to circle in the example. chart.animate( Config( { \"channels\": {\"size\": {\"set\": [\"Popularity\"]}}, \"geometry\": \"circle\", } ) )","title":"Channels &amp; legend"},{"location":"tutorial/chart_layout/","text":"Chart layout ipyvizzu has three separate parts of the chart layout: the plot area that contains the chart, the title containing the chart title on the top, and the legend on the left. ipyvizzu automatically hides the legend when it\u2019s unnecessary to show it. When the title is not in use, ipyvizzu hides that part automatically as well. Each of these parts have their own paddings on all four sides that adjust to the chart size by default, but can also be set with the appropriate settings in the Style object. All size parameters can be set in pixel, percentage and em. We add different background colors to the parts of the layout to show how they are aligned. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/music_data.csv\" ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Kinds\"]}, \"x\": {\"set\": [\"Genres\"]}, }, \"label\": {\"attach\": [\"Popularity\"]}, \"color\": {\"set\": [\"Kinds\"]}, } ) ) chart.animate( Style( { \"title\": {\"backgroundColor\": \"#A0A0A0\"}, \"plot\": {\"backgroundColor\": \"#D2D2D2\"}, \"legend\": {\"backgroundColor\": \"#808080\"}, } ) ) Setting the width of the legend. chart.animate(Style({\"legend\": {\"width\": 50}})) Setting the legend width back to its default value. chart.animate(Style({\"legend\": {\"width\": None}})) Changing the title paddings. By default, the title is horizontally centered above the chart. In this example, we set the title\u2019s left padding, resulting in the text moving to the right. chart.animate( Style( { \"title\": { \"paddingTop\": 20, \"paddingBottom\": 20, \"paddingLeft\": 200, } } ) ) Setting the title paddings back to their default values. chart.animate( Style( { \"title\": { \"paddingTop\": None, \"paddingBottom\": None, \"paddingLeft\": None, } } ) ) Changing the paddings of the plot area to position the plot. The texts on the axes are drawn on the padding of the plot and not the plot itself. chart.animate( Style({\"plot\": {\"paddingLeft\": 100, \"paddingRight\": 100}}) ) Setting the plot paddings back to their default values. chart.animate( Style({\"plot\": {\"paddingLeft\": None, \"paddingRight\": None}}) )","title":"Chart layout"},{"location":"tutorial/chart_layout/#chart-layout","text":"ipyvizzu has three separate parts of the chart layout: the plot area that contains the chart, the title containing the chart title on the top, and the legend on the left. ipyvizzu automatically hides the legend when it\u2019s unnecessary to show it. When the title is not in use, ipyvizzu hides that part automatically as well. Each of these parts have their own paddings on all four sides that adjust to the chart size by default, but can also be set with the appropriate settings in the Style object. All size parameters can be set in pixel, percentage and em. We add different background colors to the parts of the layout to show how they are aligned. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/music_data.csv\" ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Kinds\"]}, \"x\": {\"set\": [\"Genres\"]}, }, \"label\": {\"attach\": [\"Popularity\"]}, \"color\": {\"set\": [\"Kinds\"]}, } ) ) chart.animate( Style( { \"title\": {\"backgroundColor\": \"#A0A0A0\"}, \"plot\": {\"backgroundColor\": \"#D2D2D2\"}, \"legend\": {\"backgroundColor\": \"#808080\"}, } ) ) Setting the width of the legend. chart.animate(Style({\"legend\": {\"width\": 50}})) Setting the legend width back to its default value. chart.animate(Style({\"legend\": {\"width\": None}})) Changing the title paddings. By default, the title is horizontally centered above the chart. In this example, we set the title\u2019s left padding, resulting in the text moving to the right. chart.animate( Style( { \"title\": { \"paddingTop\": 20, \"paddingBottom\": 20, \"paddingLeft\": 200, } } ) ) Setting the title paddings back to their default values. chart.animate( Style( { \"title\": { \"paddingTop\": None, \"paddingBottom\": None, \"paddingLeft\": None, } } ) ) Changing the paddings of the plot area to position the plot. The texts on the axes are drawn on the padding of the plot and not the plot itself. chart.animate( Style({\"plot\": {\"paddingLeft\": 100, \"paddingRight\": 100}}) ) Setting the plot paddings back to their default values. chart.animate( Style({\"plot\": {\"paddingLeft\": None, \"paddingRight\": None}}) )","title":"Chart layout"},{"location":"tutorial/chart_presets/","text":"Chart presets Throughout this tutorial, we have shown you how to create charts with ipyvizzu using a chart type-agnostic, uniform way without being limited to a predefined set of available charts. But sometimes, when you know the chart type you want to use, it is easier to start with that and skip configuring it from scratch. For this reason, ipyvizzu provides preset chart configurations for many known chart types. See the preset gallery for all available presets. Use the preset methods of the Config class to build a chart based on a preset. These methods return chart configuration objects that can be passed to the animate method. For example, this is how to create a stacked bubble chart using its preset. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/music_data.csv\" ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.stackedBubble( { \"size\": \"Popularity\", \"color\": \"Kinds\", \"stackedBy\": \"Genres\", } ) ) Presets will override all channels, removing all previously set series from the chart. Using a preset will also explicitly set most chart configuration parameters. Exceptions to this are the legend , title , reverse , and sort properties that can be set while using a preset. Here's an example of a preset where chart elements are sorted by value. chart.animate( Config.radialStackedBar( { \"angle\": \"Popularity\", \"radius\": \"Genres\", \"stackedBy\": \"Kinds\", \"sort\": \"byValue\", } ) ) As you will see, the preset doesn't override the previously configured sorting and wouldn't affect the rest of the chart config parameters mentioned above either. Presets will affect chart configuration, but you might also want to set the style or the underlying data. chart.animate( Config.radialBar( { \"angle\": \"Popularity\", \"radius\": \"Genres\", } ), Style({\"plot.xAxis.interlacing.color\": \"#ffffff00\"}), )","title":"Chart presets"},{"location":"tutorial/chart_presets/#chart-presets","text":"Throughout this tutorial, we have shown you how to create charts with ipyvizzu using a chart type-agnostic, uniform way without being limited to a predefined set of available charts. But sometimes, when you know the chart type you want to use, it is easier to start with that and skip configuring it from scratch. For this reason, ipyvizzu provides preset chart configurations for many known chart types. See the preset gallery for all available presets. Use the preset methods of the Config class to build a chart based on a preset. These methods return chart configuration objects that can be passed to the animate method. For example, this is how to create a stacked bubble chart using its preset. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/music_data.csv\" ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config.stackedBubble( { \"size\": \"Popularity\", \"color\": \"Kinds\", \"stackedBy\": \"Genres\", } ) ) Presets will override all channels, removing all previously set series from the chart. Using a preset will also explicitly set most chart configuration parameters. Exceptions to this are the legend , title , reverse , and sort properties that can be set while using a preset. Here's an example of a preset where chart elements are sorted by value. chart.animate( Config.radialStackedBar( { \"angle\": \"Popularity\", \"radius\": \"Genres\", \"stackedBy\": \"Kinds\", \"sort\": \"byValue\", } ) ) As you will see, the preset doesn't override the previously configured sorting and wouldn't affect the rest of the chart config parameters mentioned above either. Presets will affect chart configuration, but you might also want to set the style or the underlying data. chart.animate( Config.radialBar( { \"angle\": \"Popularity\", \"radius\": \"Genres\", } ), Style({\"plot.xAxis.interlacing.color\": \"#ffffff00\"}), )","title":"Chart presets"},{"location":"tutorial/chart_settings/","text":"Chart settings You can change the behaviour of the chart with the constructor arguments and the chart properties detailed below. Constructor arguments Chart size The size of the chart can be changed with width and height constructor arguments. Info width and height constructor arguments are optional, the default values are 800px and 480px . You can set them to any valid cssText value. from ipyvizzu import Chart chart = Chart(width=\"100%\", height=\"500px\") Display behavior There are multiple options for the logic of where and how the chart is displayed within the notebook and this behavior can be changed with the display constructor argument. Info display constructor argument is optional, the default value is DisplayTarget.ACTUAL . Note Not all options work in all environments, check the Environments chapter for more details. Actual Chart is relocated and displayed after each cell that has been run. This is set by default or if display is set to DisplayTarget.ACTUAL . from ipyvizzu import Chart, DisplayTarget chart = Chart(display=DisplayTarget.ACTUAL) Begin Chart is displayed after the cell with the chart constructor if display is set to DisplayTarget.BEGIN . from ipyvizzu import Chart, DisplayTarget chart = Chart(display=DisplayTarget.BEGIN) End If display is set to DisplayTarget.END , then in case one cell is excuted, the chart will be displayed after the cell. If multiple cells are run at once, the chart appears after the last cell set to run. from ipyvizzu import Chart, DisplayTarget chart = Chart(display=DisplayTarget.END) Tip By combining the above display options with the store function you can replay the original animation when you replay a cell. Another way to replay animations is to use our new extension ipyvizzu-story that enables you to build, present and share animated data stories in data science notebooks with a very similar syntax to ipyvizzu 's. Info DisplayTarget.ACTUAL , DisplayTarget.BEGIN and DisplayTarget.END use IPython.display.display_javascript function. Manual Chart is displayed only when a display function is called if display is set to DisplayTarget.MANUAL . Note Even though it runs in more environments, the disadvantage of using MANUAL DisplayTarget is that the chart cannot be modified after calling a display function, without all the cells modifying the chart being rerun. One of the display functions is the _repr_html_ method which is supported in most environments. from ipyvizzu import Chart, DisplayTarget chart = Chart(display=DisplayTarget.MANUAL) # ... chart The other display function is the show method. from ipyvizzu import Chart, DisplayTarget chart = Chart(display=DisplayTarget.MANUAL) # ... chart.show() Info DisplayTarget.MANUAL with the show method uses IPython.display.display_javascript function. Vizzu library ipyvizzu requires and automatically downloads the Vizzu JavaScript/C++ library from jsDelivr CDN , but you can also use a self-hosted version. Info vizzu constructor argument is optional, the default value is Chart.VIZZU Install Vizzu via npm : npm install vizzu After it is hosted on a server, you can use that url. from ipyvizzu import Chart chart = Chart(vizzu=\"<url>/vizzu.min.js\") Properties Scroll into view When the scroll into view feature is turned on, ipyvizzu is able to automatically scroll to the chart being animated to view in the browser. If manual scrolling is detected while auto-scrolling, ipyvizzu will stop auto-scroll until the notebook is replayed again. Info Scroll into view feature is optional, the default value is False . Note Scroll into view feature does not work in all environments, check the Environments chapter for more details. To enable scroll into view feature, set scroll_into_view property to True . from ipyvizzu import Chart chart = Chart() chart.scroll_into_view = True","title":"Chart settings"},{"location":"tutorial/chart_settings/#chart-settings","text":"You can change the behaviour of the chart with the constructor arguments and the chart properties detailed below.","title":"Chart settings"},{"location":"tutorial/chart_settings/#constructor-arguments","text":"","title":"Constructor arguments"},{"location":"tutorial/chart_settings/#chart-size","text":"The size of the chart can be changed with width and height constructor arguments. Info width and height constructor arguments are optional, the default values are 800px and 480px . You can set them to any valid cssText value. from ipyvizzu import Chart chart = Chart(width=\"100%\", height=\"500px\")","title":"Chart size"},{"location":"tutorial/chart_settings/#display-behavior","text":"There are multiple options for the logic of where and how the chart is displayed within the notebook and this behavior can be changed with the display constructor argument. Info display constructor argument is optional, the default value is DisplayTarget.ACTUAL . Note Not all options work in all environments, check the Environments chapter for more details.","title":"Display behavior"},{"location":"tutorial/chart_settings/#actual","text":"Chart is relocated and displayed after each cell that has been run. This is set by default or if display is set to DisplayTarget.ACTUAL . from ipyvizzu import Chart, DisplayTarget chart = Chart(display=DisplayTarget.ACTUAL)","title":"Actual"},{"location":"tutorial/chart_settings/#begin","text":"Chart is displayed after the cell with the chart constructor if display is set to DisplayTarget.BEGIN . from ipyvizzu import Chart, DisplayTarget chart = Chart(display=DisplayTarget.BEGIN)","title":"Begin"},{"location":"tutorial/chart_settings/#end","text":"If display is set to DisplayTarget.END , then in case one cell is excuted, the chart will be displayed after the cell. If multiple cells are run at once, the chart appears after the last cell set to run. from ipyvizzu import Chart, DisplayTarget chart = Chart(display=DisplayTarget.END) Tip By combining the above display options with the store function you can replay the original animation when you replay a cell. Another way to replay animations is to use our new extension ipyvizzu-story that enables you to build, present and share animated data stories in data science notebooks with a very similar syntax to ipyvizzu 's. Info DisplayTarget.ACTUAL , DisplayTarget.BEGIN and DisplayTarget.END use IPython.display.display_javascript function.","title":"End"},{"location":"tutorial/chart_settings/#manual","text":"Chart is displayed only when a display function is called if display is set to DisplayTarget.MANUAL . Note Even though it runs in more environments, the disadvantage of using MANUAL DisplayTarget is that the chart cannot be modified after calling a display function, without all the cells modifying the chart being rerun. One of the display functions is the _repr_html_ method which is supported in most environments. from ipyvizzu import Chart, DisplayTarget chart = Chart(display=DisplayTarget.MANUAL) # ... chart The other display function is the show method. from ipyvizzu import Chart, DisplayTarget chart = Chart(display=DisplayTarget.MANUAL) # ... chart.show() Info DisplayTarget.MANUAL with the show method uses IPython.display.display_javascript function.","title":"Manual"},{"location":"tutorial/chart_settings/#vizzu-library","text":"ipyvizzu requires and automatically downloads the Vizzu JavaScript/C++ library from jsDelivr CDN , but you can also use a self-hosted version. Info vizzu constructor argument is optional, the default value is Chart.VIZZU Install Vizzu via npm : npm install vizzu After it is hosted on a server, you can use that url. from ipyvizzu import Chart chart = Chart(vizzu=\"<url>/vizzu.min.js\")","title":"Vizzu library"},{"location":"tutorial/chart_settings/#properties","text":"","title":"Properties"},{"location":"tutorial/chart_settings/#scroll-into-view","text":"When the scroll into view feature is turned on, ipyvizzu is able to automatically scroll to the chart being animated to view in the browser. If manual scrolling is detected while auto-scrolling, ipyvizzu will stop auto-scroll until the notebook is replayed again. Info Scroll into view feature is optional, the default value is False . Note Scroll into view feature does not work in all environments, check the Environments chapter for more details. To enable scroll into view feature, set scroll_into_view property to True . from ipyvizzu import Chart chart = Chart() chart.scroll_into_view = True","title":"Scroll into view"},{"location":"tutorial/color_palette_fonts/","text":"Color palette & fonts This and the next chapter provide a quick intro to the styling of the charts. You can either use the Style object like in the following examples or use CSS . By using CSS , it's easier to set the same style for multiple charts on one page or re-use style settings. If you use CSS , don't change the set parameters later on via the Style object. The font sizes automatically adjust to the chart size to help readability, and can also be set separately or for specific groups. The color palette is changed to the colors we add here. The order of the dimension\u2019s items in the data set determine which color belongs to which item as the colors are added one-by-one. If you want to use the same setting via CSS , you should add --vizzu-plot-marker-colorPalette: #9355e8FF #123456FF #BDAF10FF; . Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style, ChartProperty data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/music_data.csv\" ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Kinds\"]}, \"x\": {\"set\": [\"Genres\"]}, }, \"label\": {\"attach\": [\"Popularity\"]}, \"color\": {\"set\": [\"Kinds\"]}, } ) ) chart.animate( Style( { \"plot\": { \"marker\": { \"colorPalette\": \"#9355e8FF #123456FF #BDAF10FF\" } } } ) ) The actual style settings of the chart can be logged in the browser console via the STYLE property. chart.log(ChartProperty.STYLE) Changing the title font size will only affect the title; all other font sizes remain the same. CSS version: --vizzu-title-fontSize: 50; . chart.animate(Style({\"title\": {\"fontSize\": 50}})) This is how to set the font size back to its default value. chart.animate(Style({\"title\": {\"fontSize\": None}})) In case you change the font size of the whole chart with the top-level fontSize parameter then every font on the chart will grow/shrink proportionally. The size refers to the font size of the axis labels by default. chart.animate(Style({\"fontSize\": 20})) You can reset styles to default on any levels by setting them to None . chart.animate(Style(None)) For information on all available style parameters see the Style chapter or the Vizzu Code reference .","title":"Color palette & fonts"},{"location":"tutorial/color_palette_fonts/#color-palette-fonts","text":"This and the next chapter provide a quick intro to the styling of the charts. You can either use the Style object like in the following examples or use CSS . By using CSS , it's easier to set the same style for multiple charts on one page or re-use style settings. If you use CSS , don't change the set parameters later on via the Style object. The font sizes automatically adjust to the chart size to help readability, and can also be set separately or for specific groups. The color palette is changed to the colors we add here. The order of the dimension\u2019s items in the data set determine which color belongs to which item as the colors are added one-by-one. If you want to use the same setting via CSS , you should add --vizzu-plot-marker-colorPalette: #9355e8FF #123456FF #BDAF10FF; . Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style, ChartProperty data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/music_data.csv\" ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Kinds\"]}, \"x\": {\"set\": [\"Genres\"]}, }, \"label\": {\"attach\": [\"Popularity\"]}, \"color\": {\"set\": [\"Kinds\"]}, } ) ) chart.animate( Style( { \"plot\": { \"marker\": { \"colorPalette\": \"#9355e8FF #123456FF #BDAF10FF\" } } } ) ) The actual style settings of the chart can be logged in the browser console via the STYLE property. chart.log(ChartProperty.STYLE) Changing the title font size will only affect the title; all other font sizes remain the same. CSS version: --vizzu-title-fontSize: 50; . chart.animate(Style({\"title\": {\"fontSize\": 50}})) This is how to set the font size back to its default value. chart.animate(Style({\"title\": {\"fontSize\": None}})) In case you change the font size of the whole chart with the top-level fontSize parameter then every font on the chart will grow/shrink proportionally. The size refers to the font size of the axis labels by default. chart.animate(Style({\"fontSize\": 20})) You can reset styles to default on any levels by setting them to None . chart.animate(Style(None)) For information on all available style parameters see the Style chapter or the Vizzu Code reference .","title":"Color palette &amp; fonts"},{"location":"tutorial/data/","text":"Data Data types ipyvizzu currently supports two types of data series: dimensions and measures. Dimensions slice the data cube ipyvizzu uses, whereas measures are values within the cube. Dimensions are categorical series that can contain strings and numbers, but both will be treated as strings. Temporal data such as dates or timestamps should also be added as dimensions. By default, ipyvizzu will draw the elements on the chart in the order they are provided in the data set. Thus we suggest adding temporal data in a sorted format from oldest to newest. Measures at the moment can only be numerical. Adding data There are multiple ways you can add data to ipyvizzu . Using pandas DataFrame Specify data by series - column after column if you think of a spreadsheet Specify data by records - row after row Using data cube form Using JSON Tip You should set the data in the first animate call. chart.animate(data) Using pandas DataFrame Use add_data_frame method for adding data frame to Data . music_data.csv : Genres,Kinds,Popularity Pop,Hard,114 Rock,Hard,96 Jazz,Hard,78 Metal,Hard,52 Pop,Smooth,56 Rock,Smooth,36 Jazz,Smooth,174 Metal,Smooth,121 Pop,Experimental,127 Rock,Experimental,83 Jazz,Experimental,94 Metal,Experimental,58 import pandas as pd from ipyvizzu import Data data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/music_data.csv\" ) data = Data() data.add_data_frame(data_frame) Info ipyvizzu makes a difference between two types of data, numeric (measure) and not numeric (dimension). A column's dtype specifies that the column is handled as a measure or as a dimension. It is also possible to add data frame index to Data with the add_data_frame_index method. import pandas as pd from ipyvizzu import Data data_frame = pd.DataFrame( {\"Popularity\": [114, 96, 78]}, index=[\"x\", \"y\", \"z\"] ) data = Data() data.add_data_frame(data_frame) data.add_data_frame_index(data_frame, \"DataFrameIndex\") Specify data by series When you specify the data by series or by records, it has to be in first normal form. Here is an example of that: Genres Kinds Popularity Pop Hard 114 Rock Hard 96 Jazz Hard 78 Metal Hard 52 Pop Smooth 56 Rock Smooth 36 Jazz Smooth 174 Metal Smooth 121 Pop Experimental 127 Rock Experimental 83 Jazz Experimental 94 Metal Experimental 58 from ipyvizzu import Data data = Data() data.add_series( \"Genres\", [ \"Pop\", \"Rock\", \"Jazz\", \"Metal\", \"Pop\", \"Rock\", \"Jazz\", \"Metal\", \"Pop\", \"Rock\", \"Jazz\", \"Metal\", ], type=\"dimension\", ) data.add_series( \"Kinds\", [ \"Hard\", \"Hard\", \"Hard\", \"Hard\", \"Smooth\", \"Smooth\", \"Smooth\", \"Smooth\", \"Experimental\", \"Experimental\", \"Experimental\", \"Experimental\", ], type=\"dimension\", ) data.add_series( \"Popularity\", [114, 96, 78, 52, 56, 36, 174, 121, 127, 83, 94, 58], type=\"measure\", ) Specify data by records from ipyvizzu import Data data = Data() data.add_series(\"Genres\", type=\"dimension\") data.add_series(\"Kinds\", type=\"dimension\") data.add_series(\"Popularity\", type=\"measure\") record = [\"Pop\", \"Hard\", 114] data.add_record(record) records = [ [\"Rock\", \"Hard\", 96], [\"Jazz\", \"Hard\", 78], [\"Metal\", \"Hard\", 52], [\"Pop\", \"Smooth\", 56], [\"Rock\", \"Smooth\", 36], [\"Jazz\", \"Smooth\", 174], [\"Metal\", \"Smooth\", 121], [\"Pop\", \"Experimental\", 127], [\"Rock\", \"Experimental\", 83], [\"Jazz\", \"Experimental\", 94], [\"Metal\", \"Experimental\", 58], ] data.add_records(records) Using data cube form Genres Pop Rock Jazz Metal Kinds Hard 114 96 78 52 Smooth 56 36 74 121 Experimental 127 83 94 58 Popularity from ipyvizzu import Data data = Data() data.add_dimension(\"Genres\", [\"Pop\", \"Rock\", \"Jazz\", \"Metal\"]) data.add_dimension(\"Kinds\", [\"Hard\", \"Smooth\", \"Experimental\"]) data.add_measure( \"Popularity\", [ [114, 96, 78, 52], [56, 36, 174, 121], [127, 83, 94, 58], ], ) Using JSON music_data.json (in this example the data stored in the data cube form): { \"dimensions\": [ { \"name\": \"Genres\", \"values\": [ \"Pop\", \"Rock\", \"Jazz\", \"Metal\" ] }, { \"name\": \"Kinds\", \"values\": [ \"Hard\", \"Smooth\", \"Experimental\" ] } ], \"measures\": [ { \"name\": \"Popularity\", \"values\": [ [ 114, 96, 78, 52 ], [ 56, 36, 174, 121 ], [ 127, 83, 94, 58 ] ] } ] } from ipyvizzu import Data data = Data.from_json(\"../assets/data/music_data.json\")","title":"Data"},{"location":"tutorial/data/#data","text":"","title":"Data"},{"location":"tutorial/data/#data-types","text":"ipyvizzu currently supports two types of data series: dimensions and measures. Dimensions slice the data cube ipyvizzu uses, whereas measures are values within the cube. Dimensions are categorical series that can contain strings and numbers, but both will be treated as strings. Temporal data such as dates or timestamps should also be added as dimensions. By default, ipyvizzu will draw the elements on the chart in the order they are provided in the data set. Thus we suggest adding temporal data in a sorted format from oldest to newest. Measures at the moment can only be numerical.","title":"Data types"},{"location":"tutorial/data/#adding-data","text":"There are multiple ways you can add data to ipyvizzu . Using pandas DataFrame Specify data by series - column after column if you think of a spreadsheet Specify data by records - row after row Using data cube form Using JSON Tip You should set the data in the first animate call. chart.animate(data)","title":"Adding data"},{"location":"tutorial/data/#using-pandas-dataframe","text":"Use add_data_frame method for adding data frame to Data . music_data.csv : Genres,Kinds,Popularity Pop,Hard,114 Rock,Hard,96 Jazz,Hard,78 Metal,Hard,52 Pop,Smooth,56 Rock,Smooth,36 Jazz,Smooth,174 Metal,Smooth,121 Pop,Experimental,127 Rock,Experimental,83 Jazz,Experimental,94 Metal,Experimental,58 import pandas as pd from ipyvizzu import Data data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/music_data.csv\" ) data = Data() data.add_data_frame(data_frame) Info ipyvizzu makes a difference between two types of data, numeric (measure) and not numeric (dimension). A column's dtype specifies that the column is handled as a measure or as a dimension. It is also possible to add data frame index to Data with the add_data_frame_index method. import pandas as pd from ipyvizzu import Data data_frame = pd.DataFrame( {\"Popularity\": [114, 96, 78]}, index=[\"x\", \"y\", \"z\"] ) data = Data() data.add_data_frame(data_frame) data.add_data_frame_index(data_frame, \"DataFrameIndex\")","title":"Using pandas DataFrame"},{"location":"tutorial/data/#specify-data-by-series","text":"When you specify the data by series or by records, it has to be in first normal form. Here is an example of that: Genres Kinds Popularity Pop Hard 114 Rock Hard 96 Jazz Hard 78 Metal Hard 52 Pop Smooth 56 Rock Smooth 36 Jazz Smooth 174 Metal Smooth 121 Pop Experimental 127 Rock Experimental 83 Jazz Experimental 94 Metal Experimental 58 from ipyvizzu import Data data = Data() data.add_series( \"Genres\", [ \"Pop\", \"Rock\", \"Jazz\", \"Metal\", \"Pop\", \"Rock\", \"Jazz\", \"Metal\", \"Pop\", \"Rock\", \"Jazz\", \"Metal\", ], type=\"dimension\", ) data.add_series( \"Kinds\", [ \"Hard\", \"Hard\", \"Hard\", \"Hard\", \"Smooth\", \"Smooth\", \"Smooth\", \"Smooth\", \"Experimental\", \"Experimental\", \"Experimental\", \"Experimental\", ], type=\"dimension\", ) data.add_series( \"Popularity\", [114, 96, 78, 52, 56, 36, 174, 121, 127, 83, 94, 58], type=\"measure\", )","title":"Specify data by series"},{"location":"tutorial/data/#specify-data-by-records","text":"from ipyvizzu import Data data = Data() data.add_series(\"Genres\", type=\"dimension\") data.add_series(\"Kinds\", type=\"dimension\") data.add_series(\"Popularity\", type=\"measure\") record = [\"Pop\", \"Hard\", 114] data.add_record(record) records = [ [\"Rock\", \"Hard\", 96], [\"Jazz\", \"Hard\", 78], [\"Metal\", \"Hard\", 52], [\"Pop\", \"Smooth\", 56], [\"Rock\", \"Smooth\", 36], [\"Jazz\", \"Smooth\", 174], [\"Metal\", \"Smooth\", 121], [\"Pop\", \"Experimental\", 127], [\"Rock\", \"Experimental\", 83], [\"Jazz\", \"Experimental\", 94], [\"Metal\", \"Experimental\", 58], ] data.add_records(records)","title":"Specify data by records"},{"location":"tutorial/data/#using-data-cube-form","text":"Genres Pop Rock Jazz Metal Kinds Hard 114 96 78 52 Smooth 56 36 74 121 Experimental 127 83 94 58 Popularity from ipyvizzu import Data data = Data() data.add_dimension(\"Genres\", [\"Pop\", \"Rock\", \"Jazz\", \"Metal\"]) data.add_dimension(\"Kinds\", [\"Hard\", \"Smooth\", \"Experimental\"]) data.add_measure( \"Popularity\", [ [114, 96, 78, 52], [56, 36, 174, 121], [127, 83, 94, 58], ], )","title":"Using data cube form"},{"location":"tutorial/data/#using-json","text":"music_data.json (in this example the data stored in the data cube form): { \"dimensions\": [ { \"name\": \"Genres\", \"values\": [ \"Pop\", \"Rock\", \"Jazz\", \"Metal\" ] }, { \"name\": \"Kinds\", \"values\": [ \"Hard\", \"Smooth\", \"Experimental\" ] } ], \"measures\": [ { \"name\": \"Popularity\", \"values\": [ [ 114, 96, 78, 52 ], [ 56, 36, 174, 121 ], [ 127, 83, 94, 58 ] ] } ] } from ipyvizzu import Data data = Data.from_json(\"../assets/data/music_data.json\")","title":"Using JSON"},{"location":"tutorial/events/","text":"Events You can register handlers for various events. There are mouse events ( click , mouseon ), animation events ( begin , update , complete ), and rendering events that are called before rendering the chart elements. Handlers can be registered/unregistered with the on , off method pair. Note Currently on method only accept handler's JavaScript expression as string. The event can be accessed via the event object, see the examples below. We are registering a handler for the click event which will show an alert block with information about the clicked marker. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/music_data.csv\" ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Kinds\"]}, \"x\": {\"set\": [\"Genres\"]}, }, \"label\": {\"attach\": [\"Popularity\"]}, \"color\": {\"set\": [\"Kinds\"]}, } ) ) click_handler = \"alert(JSON.stringify(event.data));\" click = chart.on(\"click\", click_handler) Unregistering the previously registered handler. chart.off(click) Here we override the axis label color for Jazz to red and all others to gray. label_draw_handler = ( \"event.renderingContext.fillStyle =\" + \" (event.data.text === 'Jazz') ? 'red' : 'gray';\" ) label_draw = chart.on(\"plot-axis-label-draw\", label_draw_handler) Unregistering the previously registered handler. chart.off(label_draw) The default behaviour of all events can be blocked by calling the event's preventDefault method. Here we block the drawing of the Vizzu logo in the bottom right corner of the chart. logo_draw_handler = \"event.preventDefault();\" logo_draw = logo_chart.on(\"logo-draw\", logo_draw_handler) Unregistering the previously registered handler. chart.off(logo_draw)","title":"Events"},{"location":"tutorial/events/#events","text":"You can register handlers for various events. There are mouse events ( click , mouseon ), animation events ( begin , update , complete ), and rendering events that are called before rendering the chart elements. Handlers can be registered/unregistered with the on , off method pair. Note Currently on method only accept handler's JavaScript expression as string. The event can be accessed via the event object, see the examples below. We are registering a handler for the click event which will show an alert block with information about the clicked marker. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/music_data.csv\" ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Kinds\"]}, \"x\": {\"set\": [\"Genres\"]}, }, \"label\": {\"attach\": [\"Popularity\"]}, \"color\": {\"set\": [\"Kinds\"]}, } ) ) click_handler = \"alert(JSON.stringify(event.data));\" click = chart.on(\"click\", click_handler) Unregistering the previously registered handler. chart.off(click) Here we override the axis label color for Jazz to red and all others to gray. label_draw_handler = ( \"event.renderingContext.fillStyle =\" + \" (event.data.text === 'Jazz') ? 'red' : 'gray';\" ) label_draw = chart.on(\"plot-axis-label-draw\", label_draw_handler) Unregistering the previously registered handler. chart.off(label_draw) The default behaviour of all events can be blocked by calling the event's preventDefault method. Here we block the drawing of the Vizzu logo in the bottom right corner of the chart. logo_draw_handler = \"event.preventDefault();\" logo_draw = logo_chart.on(\"logo-draw\", logo_draw_handler) Unregistering the previously registered handler. chart.off(logo_draw)","title":"Events"},{"location":"tutorial/filter_add_new_records/","text":"Filtering & adding new records Filtering enables you to zoom in or out within a chart, allowing the viewer to focus on certain selected elements, or get more context. You can also add new records to the data on the chart which makes it easy to work with real-time sources. Note Currently filter and set_filter methods only accept JavaScript expression as string. The data fields can be accessed via the record object, see the examples below. We add two items from the Genres dimension - using the || operator - to the filter, so the chart elements that belong to the other two items will vanish from the chart. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/music_data.csv\" ) data1 = Data() data1.add_data_frame(data_frame) chart = Chart() chart.animate(data1) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Kinds\"]}, \"x\": {\"set\": [\"Genres\"]}, \"label\": {\"attach\": [\"Popularity\"]}, }, \"color\": {\"attach\": [\"Kinds\"]}, } ) ) filter1 = Data.filter( \"record['Genres'] == 'Pop' || record['Genres'] == 'Metal'\" ) chart.animate(filter1) Now we add a cross-filter that includes items from both the Genres and the Kinds dimensions. This way we override the filter from the previous state. If we weren't update the filter, ipyvizzu would use it in subsequent states. filter2 = Data.filter( \"(record['Genres'] == 'Pop' || record['Genres'] == 'Metal')\" + \" && record['Kinds'] == 'Smooth'\" ) chart.animate(filter2) Switching the filter off to get back to the original view. chart.animate(Data.filter(None)) Here we add another record to the data set and update the chart accordingly. records = [ [\"Soul\", \"Hard\", 91], [\"Soul\", \"Smooth\", 57], [\"Soul\", \"Experimental\", 115], ] data2 = Data() data2.add_records(records) chart.animate(data2) Info Combining this option with the store function makes it easy to update previously configured states with fresh data since this function saves the config and style parameters of the chart into a variable but not the data.","title":"Filtering & adding new records"},{"location":"tutorial/filter_add_new_records/#filtering-adding-new-records","text":"Filtering enables you to zoom in or out within a chart, allowing the viewer to focus on certain selected elements, or get more context. You can also add new records to the data on the chart which makes it easy to work with real-time sources. Note Currently filter and set_filter methods only accept JavaScript expression as string. The data fields can be accessed via the record object, see the examples below. We add two items from the Genres dimension - using the || operator - to the filter, so the chart elements that belong to the other two items will vanish from the chart. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/music_data.csv\" ) data1 = Data() data1.add_data_frame(data_frame) chart = Chart() chart.animate(data1) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Kinds\"]}, \"x\": {\"set\": [\"Genres\"]}, \"label\": {\"attach\": [\"Popularity\"]}, }, \"color\": {\"attach\": [\"Kinds\"]}, } ) ) filter1 = Data.filter( \"record['Genres'] == 'Pop' || record['Genres'] == 'Metal'\" ) chart.animate(filter1) Now we add a cross-filter that includes items from both the Genres and the Kinds dimensions. This way we override the filter from the previous state. If we weren't update the filter, ipyvizzu would use it in subsequent states. filter2 = Data.filter( \"(record['Genres'] == 'Pop' || record['Genres'] == 'Metal')\" + \" && record['Kinds'] == 'Smooth'\" ) chart.animate(filter2) Switching the filter off to get back to the original view. chart.animate(Data.filter(None)) Here we add another record to the data set and update the chart accordingly. records = [ [\"Soul\", \"Hard\", 91], [\"Soul\", \"Smooth\", 57], [\"Soul\", \"Experimental\", 115], ] data2 = Data() data2.add_records(records) chart.animate(data2) Info Combining this option with the store function makes it easy to update previously configured states with fresh data since this function saves the config and style parameters of the chart into a variable but not the data.","title":"Filtering &amp; adding new records"},{"location":"tutorial/geometry/","text":"Geometry In ipyvizzu you can set the geometric elements used to represent your data by the geometry property within the config object. This is where the library shines - beautifully animating between the geometries! Switching the geometry to area. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/music_data.csv\" ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\"]}, \"x\": {\"set\": [\"Genres\"]}, }, } ) ) chart.animate(Config({\"geometry\": \"area\"})) Drawing a line chart. chart.animate(Config({\"geometry\": \"line\"})) Switching the geometry to circle. This setting is the most useful when used together with the size channel, as shown in the next chapter of the tutorial. chart.animate(Config({\"geometry\": \"circle\"})) Rectangle geometry is the default setting in ipyvizzu , used for most common charts like bar and column charts. chart.animate( Config( { \"geometry\": \"rectangle \", } ) )","title":"Geometry"},{"location":"tutorial/geometry/#geometry","text":"In ipyvizzu you can set the geometric elements used to represent your data by the geometry property within the config object. This is where the library shines - beautifully animating between the geometries! Switching the geometry to area. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/music_data.csv\" ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\"]}, \"x\": {\"set\": [\"Genres\"]}, }, } ) ) chart.animate(Config({\"geometry\": \"area\"})) Drawing a line chart. chart.animate(Config({\"geometry\": \"line\"})) Switching the geometry to circle. This setting is the most useful when used together with the size channel, as shown in the next chapter of the tutorial. chart.animate(Config({\"geometry\": \"circle\"})) Rectangle geometry is the default setting in ipyvizzu , used for most common charts like bar and column charts. chart.animate( Config( { \"geometry\": \"rectangle \", } ) )","title":"Geometry"},{"location":"tutorial/group_stack/","text":"Group/stack The following example shows how to group and stack elements of a bar chart. To get a stacked chart, you need to add a new dimension to the same channel where the measure is: the y-axis. However, since doing only this would result in multiple column chart elements with the same color stacked on top of each other, we also add the same dimension to the color channel. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/music_data.csv\" ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\"]}, \"x\": {\"set\": [\"Genres\"]}, }, } ) ) chart.animate( Config( { \"channels\": { \"y\": {\"attach\": [\"Kinds\"]}, \"color\": {\"attach\": [\"Kinds\"]}, } } ) ) By detaching this newly added dimension from the y-axis and attaching it to the x-axis, you get a grouped bar chart in a way that is easy to follow for the viewer. chart.animate( Config( { \"channels\": { \"y\": {\"detach\": [\"Kinds\"]}, \"x\": {\"attach\": [\"Kinds\"]}, }, } ) ) In order to change the category via which the elements are grouped, just change the order of the dimension with another one on the same axis. chart.animate( Config( { \"channels\": { \"x\": {\"set\": [\"Kinds\", \"Genres\"]}, }, } ) ) To stack a grouped chart, you just have to do the same thing the other way around: detach the dimension from the x-axis and attach it to the y-axis. chart.animate( Config( { \"channels\": { \"y\": {\"attach\": \"Kinds\"}, \"x\": {\"detach\": \"Kinds\"}, }, } ) )","title":"Group/stack"},{"location":"tutorial/group_stack/#groupstack","text":"The following example shows how to group and stack elements of a bar chart. To get a stacked chart, you need to add a new dimension to the same channel where the measure is: the y-axis. However, since doing only this would result in multiple column chart elements with the same color stacked on top of each other, we also add the same dimension to the color channel. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/music_data.csv\" ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\"]}, \"x\": {\"set\": [\"Genres\"]}, }, } ) ) chart.animate( Config( { \"channels\": { \"y\": {\"attach\": [\"Kinds\"]}, \"color\": {\"attach\": [\"Kinds\"]}, } } ) ) By detaching this newly added dimension from the y-axis and attaching it to the x-axis, you get a grouped bar chart in a way that is easy to follow for the viewer. chart.animate( Config( { \"channels\": { \"y\": {\"detach\": [\"Kinds\"]}, \"x\": {\"attach\": [\"Kinds\"]}, }, } ) ) In order to change the category via which the elements are grouped, just change the order of the dimension with another one on the same axis. chart.animate( Config( { \"channels\": { \"x\": {\"set\": [\"Kinds\", \"Genres\"]}, }, } ) ) To stack a grouped chart, you just have to do the same thing the other way around: detach the dimension from the x-axis and attach it to the y-axis. chart.animate( Config( { \"channels\": { \"y\": {\"attach\": \"Kinds\"}, \"x\": {\"detach\": \"Kinds\"}, }, } ) )","title":"Group/stack"},{"location":"tutorial/orientation_split_polar/","text":"Orientation, split & polar Now that you are familiar with the basic logic and operation of ipyvizzu , let's dive in with some more advanced features that you can use to create animated data stories and show the data from different perspectives. Switching orientation means that you put a measure from one axis to the other to see the data from a different perspective. This is once again a state you should only use temporarily. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/music_data.csv\" ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Kinds\"]}, \"x\": {\"set\": [\"Genres\"]}, \"label\": {\"attach\": [\"Popularity\"]}, }, \"color\": {\"attach\": [\"Kinds\"]}, } ) ) chart.animate( Config( { \"channels\": { \"y\": { \"detach\": [\"Popularity\"], }, \"x\": { \"attach\": [\"Popularity\"], }, } } ) ) By turning the split parameter on, you can see stacked elements side-by-side, which enables the comparison of the components. chart.animate(Config({\"split\": True})) Merging the components by turning the split parameter off. chart.animate(Config({\"split\": False})) We aggregate the data by removing the Genres dimension from the x-axis. chart.animate( Config( { \"channels\": { \"x\": { \"detach\": [\"Genres\"], } } } ) ) Switching from cartesian coordinates to polar. When doing so, it is worth setting the axis range on the axis with the dimension so that the viewers can easily compare the values shown. If you want to return to the default cartesian coordinates, just set the coordSystem parameter to 'cartesian' . Info The range of the x-axis is automatically set to max:133% as this is the standard way to show radial charts. chart.animate( Config( { \"channels\": { \"y\": { \"range\": { \"min\": \"-30%\", }, }, }, \"coordSystem\": \"polar\", } ) )","title":"Orientation, split & polar"},{"location":"tutorial/orientation_split_polar/#orientation-split-polar","text":"Now that you are familiar with the basic logic and operation of ipyvizzu , let's dive in with some more advanced features that you can use to create animated data stories and show the data from different perspectives. Switching orientation means that you put a measure from one axis to the other to see the data from a different perspective. This is once again a state you should only use temporarily. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/music_data.csv\" ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Kinds\"]}, \"x\": {\"set\": [\"Genres\"]}, \"label\": {\"attach\": [\"Popularity\"]}, }, \"color\": {\"attach\": [\"Kinds\"]}, } ) ) chart.animate( Config( { \"channels\": { \"y\": { \"detach\": [\"Popularity\"], }, \"x\": { \"attach\": [\"Popularity\"], }, } } ) ) By turning the split parameter on, you can see stacked elements side-by-side, which enables the comparison of the components. chart.animate(Config({\"split\": True})) Merging the components by turning the split parameter off. chart.animate(Config({\"split\": False})) We aggregate the data by removing the Genres dimension from the x-axis. chart.animate( Config( { \"channels\": { \"x\": { \"detach\": [\"Genres\"], } } } ) ) Switching from cartesian coordinates to polar. When doing so, it is worth setting the axis range on the axis with the dimension so that the viewers can easily compare the values shown. If you want to return to the default cartesian coordinates, just set the coordSystem parameter to 'cartesian' . Info The range of the x-axis is automatically set to max:133% as this is the standard way to show radial charts. chart.animate( Config( { \"channels\": { \"y\": { \"range\": { \"min\": \"-30%\", }, }, }, \"coordSystem\": \"polar\", } ) )","title":"Orientation, split &amp; polar"},{"location":"tutorial/shorthands_store/","text":"Shorthands & Store To assist you with the development we added various shorthands that will make your code more compact. And we also added the store function, which enables you to save a chart state into a variable that you can reuse later instead of setting up that state once again. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/music_data.csv\" ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"title\": \"Store function\", \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Kinds\"]}, \"x\": {\"set\": [\"Genres\"]}, }, \"label\": {\"attach\": [\"Popularity\"]}, \"color\": {\"set\": [\"Kinds\"]}, } ) ) chart.animate( Config( { \"align\": \"stretch\", } ) ) Let's save this state by calling the store function. snapshot = chart.store() If you set/attach/detach just one series on a channel, you don't have to put that series into an array. chart.animate( Config( { \"channels\": { # \"x\": { \"attach\": [ \"Kinds\" ] }, \"x\": {\"attach\": \"Kinds\"}, \"y\": {\"detach\": \"Kinds\"}, }, \"align\": \"none\", } ) ) If you use set on a channel and no other options like range, you don't have to express that channel as an object. If you only set one series on a channel you can simply write the series' name after the channel name. chart.animate( Config( { \"channels\": { # \"y\": { \"set\": [ \"Kinds\", \"Popularity\" ] }, \"y\": [\"Kinds\", \"Popularity\"], \"x\": \"Genres\", } } ) ) In any case, you can simply omit the channel object, ipyvizzu will automatically recognize the channels by their names. chart.animate( Config( { # \"channels\": { \"y\": \"Kinds\", \"x\": [\"Genres\", \"Popularity\"] # } } ) ) Instead of creating nested objects, you can set the styles like this. chart.animate( Style( { # \"plot\": { \"xAxis\": { \"label\": { \"fontSize\": \"150%\" } } }, \"plot.xAxis.label.fontSize\": \"150%\", \"title.backgroundColor\": \"#A0A0A0\", } ) ) This is how you can get back to a state that you previously stored. chart.animate(snapshot)","title":"Shorthands & Store"},{"location":"tutorial/shorthands_store/#shorthands-store","text":"To assist you with the development we added various shorthands that will make your code more compact. And we also added the store function, which enables you to save a chart state into a variable that you can reuse later instead of setting up that state once again. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/music_data.csv\" ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"title\": \"Store function\", \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Kinds\"]}, \"x\": {\"set\": [\"Genres\"]}, }, \"label\": {\"attach\": [\"Popularity\"]}, \"color\": {\"set\": [\"Kinds\"]}, } ) ) chart.animate( Config( { \"align\": \"stretch\", } ) ) Let's save this state by calling the store function. snapshot = chart.store() If you set/attach/detach just one series on a channel, you don't have to put that series into an array. chart.animate( Config( { \"channels\": { # \"x\": { \"attach\": [ \"Kinds\" ] }, \"x\": {\"attach\": \"Kinds\"}, \"y\": {\"detach\": \"Kinds\"}, }, \"align\": \"none\", } ) ) If you use set on a channel and no other options like range, you don't have to express that channel as an object. If you only set one series on a channel you can simply write the series' name after the channel name. chart.animate( Config( { \"channels\": { # \"y\": { \"set\": [ \"Kinds\", \"Popularity\" ] }, \"y\": [\"Kinds\", \"Popularity\"], \"x\": \"Genres\", } } ) ) In any case, you can simply omit the channel object, ipyvizzu will automatically recognize the channels by their names. chart.animate( Config( { # \"channels\": { \"y\": \"Kinds\", \"x\": [\"Genres\", \"Popularity\"] # } } ) ) Instead of creating nested objects, you can set the styles like this. chart.animate( Style( { # \"plot\": { \"xAxis\": { \"label\": { \"fontSize\": \"150%\" } } }, \"plot.xAxis.label.fontSize\": \"150%\", \"title.backgroundColor\": \"#A0A0A0\", } ) ) This is how you can get back to a state that you previously stored. chart.animate(snapshot)","title":"Shorthands &amp; Store"},{"location":"tutorial/sorting/","text":"Sorting ipyvizzu provides multiple options to sort data. By default, the data is sorted by the order it is added to ipyvizzu . This is why we suggest to add temporal data such as dates in chronological order - from oldest to newest. You can also sort the elements by value, which will provide you with an ascending order. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/music_data.csv\" ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Kinds\"]}, \"x\": {\"set\": [\"Genres\"]}, \"label\": {\"attach\": [\"Popularity\"]}, }, \"color\": {\"attach\": [\"Kinds\"]}, } ) ) chart.animate( Config( { \"sort\": \"byValue\", } ) ) If you want descending order instead, you have to set the reverse parameter to True . When used without setting the sorting to byValue , the elements will be in the opposite order than they are in the data set added to ipyvizzu . chart.animate( Config( { \"reverse\": True, } ) ) This is how to switch back to the default sorting. chart.animate( Config( { \"sort\": \"none\", \"reverse\": False, } ) ) When you have more than one dimension on a channel, their order determines how the elements are grouped. For example, below - each set of bars is first organized by Genres , and then we have one bar for each of Kinds . chart.animate( Config( { \"channels\": { \"y\": {\"detach\": [\"Kinds\"]}, \"x\": {\"set\": [\"Genres\", \"Kinds\"]}, } } ) ) When switching the order of dimensions on the x-axis ipyvizzu will rearrange the elements according to this new logic. Note The legend is automatically removed during the animation. chart.animate( Config( { \"channels\": { \"x\": {\"set\": [\"Kinds\", \"Genres\"]}, } } ) )","title":"Sorting"},{"location":"tutorial/sorting/#sorting","text":"ipyvizzu provides multiple options to sort data. By default, the data is sorted by the order it is added to ipyvizzu . This is why we suggest to add temporal data such as dates in chronological order - from oldest to newest. You can also sort the elements by value, which will provide you with an ascending order. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/music_data.csv\" ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Kinds\"]}, \"x\": {\"set\": [\"Genres\"]}, \"label\": {\"attach\": [\"Popularity\"]}, }, \"color\": {\"attach\": [\"Kinds\"]}, } ) ) chart.animate( Config( { \"sort\": \"byValue\", } ) ) If you want descending order instead, you have to set the reverse parameter to True . When used without setting the sorting to byValue , the elements will be in the opposite order than they are in the data set added to ipyvizzu . chart.animate( Config( { \"reverse\": True, } ) ) This is how to switch back to the default sorting. chart.animate( Config( { \"sort\": \"none\", \"reverse\": False, } ) ) When you have more than one dimension on a channel, their order determines how the elements are grouped. For example, below - each set of bars is first organized by Genres , and then we have one bar for each of Kinds . chart.animate( Config( { \"channels\": { \"y\": {\"detach\": [\"Kinds\"]}, \"x\": {\"set\": [\"Genres\", \"Kinds\"]}, } } ) ) When switching the order of dimensions on the x-axis ipyvizzu will rearrange the elements according to this new logic. Note The legend is automatically removed during the animation. chart.animate( Config( { \"channels\": { \"x\": {\"set\": [\"Kinds\", \"Genres\"]}, } } ) )","title":"Sorting"},{"location":"tutorial/style/","text":"Style ipyizzu offers a wide variety of styling options when you want to personalize the look and feel of your animated charts. The styling properties are organized into a hierarchical structure. Font styles, when set on a higher level of this hierarchy, will be inherited on all lower levels. You can use absolute sizing ( px , pt ) and relative ( % , em , vw ). Similarly to all other parameters of the animate method, ipyizzu will animate the changes in the styling of the charts. This provides an excellent opportunity to check and control the effect of these changes. You can find below the complete list of the available styling properties and their default values. + expand all backgroundColor: #FFFFFFFF borderColor: #FFFFFFFF borderWidth: 0.000000 fontFamily: Roboto, sans-serif fontSize: 1.000000em fontStyle: normal fontWeight: normal + legend \u2003backgroundColor: #00000000 \u2003borderColor: #00000000 \u2003borderWidth: 0.000000 \u2003+ label \u2003\u2003backgroundColor: #00000000 \u2003\u2003color: #999999FF \u2003\u2003fontFamily: \u2003\u2003fontSize: 1.000000em \u2003\u2003fontStyle: normal \u2003\u2003fontWeight: normal \u2003\u2003maxFractionDigits: 3.000000 \u2003\u2003numberFormat: prefixed \u2003\u2003numberScale: k,M,G,T,P,E,Z,Y \u2003\u2003paddingBottom: 0.416667em \u2003\u2003paddingLeft: 0.416667em \u2003\u2003paddingRight: 0.416667em \u2003\u2003paddingTop: 0.416667em \u2003\u2003textAlign: left \u2003+ marker \u2003\u2003size: 1.285714em \u2003\u2003type: circle \u2003maxWidth: 30.000000% \u2003paddingBottom: 5.000000em \u2003paddingLeft: 1.666667em \u2003paddingRight: 0.416667em \u2003paddingTop: 0.833333em \u2003+ title \u2003\u2003backgroundColor: #00000000 \u2003\u2003color: #999999FF \u2003\u2003fontFamily: \u2003\u2003fontSize: 1.166667em \u2003\u2003fontStyle: normal \u2003\u2003fontWeight: normal \u2003\u2003maxFractionDigits: 3.000000 \u2003\u2003numberFormat: prefixed \u2003\u2003numberScale: k,M,G,T,P,E,Z,Y \u2003\u2003paddingBottom: 0.357143em \u2003\u2003paddingLeft: 0.357143em \u2003\u2003paddingRight: 0.357143em \u2003\u2003paddingTop: 0.857143em \u2003\u2003textAlign: left \u2003width: 8.333333em + logo \u2003filter: color(#D8D8D8FF) \u2003paddingBottom: 47.500000% \u2003paddingLeft: 40.000000% \u2003paddingRight: 40.000000% \u2003paddingTop: 47.500000% \u2003width: 3.186307em paddingBottom: 0.833333em paddingLeft: 0.416667em paddingRight: 0.416667em paddingTop: 0.416667em + plot \u2003backgroundColor: #00000000 \u2003borderColor: #00000000 \u2003borderWidth: 0.000000 \u2003+ marker \u2003\u2003borderOpacity: 1.000000 \u2003\u2003borderOpacityMode: premultiplied \u2003\u2003borderWidth: 1.000000 \u2003\u2003circleMaxRadius: 0.050000 \u2003\u2003circleMinRadius: 0.005000 \u2003\u2003colorGradient: #4171CDFF 0.000000, #8536C7FF 0.250000, #C33E7FFF 0.500000, #E9974EFF 0.750000, #F3F239FF 1.000000 \u2003\u2003colorPalette: #4171CDFF #03AE71FF #F4941BFF #F4C204FF #D49664FF #F25456FF #9E67ABFF #BCA604FF #846E1CFF #FC763CFF #B462ACFF #F492FCFF #BC4A94FF #9C7EF4FF #9C52B4FF #6CA2FCFF #5C6EBCFF #7C868CFF #AC968CFF #4C7450FF #AC7A4CFF #7CAE54FF #4C7450FF #9C1A6CFF #AC3E94FF #B41204FF \u2003\u2003fillOpacity: 1.000000 \u2003\u2003+ guides \u2003\u2003\u2003color: #E8E8E8FF \u2003\u2003\u2003lineWidth: 0.500000 \u2003\u2003+ label \u2003\u2003\u2003angle: 0.000000rad \u2003\u2003\u2003backgroundColor: #00000000 \u2003\u2003\u2003color: #00000000 \u2003\u2003\u2003filter: lightness(0.000000) \u2003\u2003\u2003fontFamily: \u2003\u2003\u2003fontSize: 0.916667em \u2003\u2003\u2003fontStyle: normal \u2003\u2003\u2003fontWeight: bold \u2003\u2003\u2003format: measureFirst \u2003\u2003\u2003maxFractionDigits: 3.000000 \u2003\u2003\u2003numberFormat: grouped \u2003\u2003\u2003numberScale: k,M,G,T,P,E,Z,Y \u2003\u2003\u2003orientation: horizontal \u2003\u2003\u2003paddingBottom: 0.454545em \u2003\u2003\u2003paddingLeft: 0.454545em \u2003\u2003\u2003paddingRight: 0.454545em \u2003\u2003\u2003paddingTop: 0.454545em \u2003\u2003\u2003position: center \u2003\u2003\u2003textAlign: center \u2003\u2003lineMaxWidth: 0.010000 \u2003\u2003lineMinWidth: 0.001000 \u2003\u2003maxLightness: 0.400000 \u2003\u2003minLightness: -0.400000 \u2003\u2003rectangleSpacing: null \u2003overflow: hidden \u2003paddingBottom: 5.000000em \u2003paddingLeft: 6.666667em \u2003paddingRight: 3.750000em \u2003paddingTop: 4.166667em \u2003+ xAxis \u2003\u2003color: #CCCCCCFF \u2003\u2003+ guides \u2003\u2003\u2003color: #EDEDEDFF \u2003\u2003\u2003lineWidth: 1.000000 \u2003\u2003+ interlacing \u2003\u2003\u2003color: #F7F7F7FF \u2003\u2003+ label \u2003\u2003\u2003angle: 0.000000rad \u2003\u2003\u2003backgroundColor: #00000000 \u2003\u2003\u2003color: #999999FF \u2003\u2003\u2003fontFamily: \u2003\u2003\u2003fontSize: 1.000000em \u2003\u2003\u2003fontStyle: normal \u2003\u2003\u2003fontWeight: normal \u2003\u2003\u2003maxFractionDigits: 3.000000 \u2003\u2003\u2003numberFormat: prefixed \u2003\u2003\u2003numberScale: k,M,G,T,P,E,Z,Y \u2003\u2003\u2003orientation: horizontal \u2003\u2003\u2003paddingBottom: 0.666667em \u2003\u2003\u2003paddingLeft: 0.666667em \u2003\u2003\u2003paddingRight: 0.666667em \u2003\u2003\u2003paddingTop: 0.666667em \u2003\u2003\u2003position: min-edge \u2003\u2003\u2003side: negative \u2003\u2003\u2003textAlign: left \u2003\u2003+ ticks \u2003\u2003\u2003color: #CCCCCCFF \u2003\u2003\u2003length: 0.416667em \u2003\u2003\u2003lineWidth: 1.000000 \u2003\u2003\u2003position: outside \u2003\u2003+ title \u2003\u2003\u2003backgroundColor: #00000000 \u2003\u2003\u2003color: #999999FF \u2003\u2003\u2003fontFamily: \u2003\u2003\u2003fontSize: 1.166667em \u2003\u2003\u2003fontStyle: normal \u2003\u2003\u2003fontWeight: normal \u2003\u2003\u2003maxFractionDigits: 3.000000 \u2003\u2003\u2003numberFormat: prefixed \u2003\u2003\u2003numberScale: k,M,G,T,P,E,Z,Y \u2003\u2003\u2003orientation: horizontal \u2003\u2003\u2003paddingBottom: 0.357143em \u2003\u2003\u2003paddingLeft: 0.357143em \u2003\u2003\u2003paddingRight: 0.357143em \u2003\u2003\u2003paddingTop: 1.714286em \u2003\u2003\u2003position: min-edge \u2003\u2003\u2003side: negative \u2003\u2003\u2003textAlign: left \u2003\u2003\u2003vposition: middle \u2003\u2003\u2003vside: upon \u2003+ yAxis \u2003\u2003color: #CCCCCCFF \u2003\u2003+ guides \u2003\u2003\u2003color: #EDEDEDFF \u2003\u2003\u2003lineWidth: 1.000000 \u2003\u2003+ interlacing \u2003\u2003\u2003color: #F7F7F7FF \u2003\u2003+ label \u2003\u2003\u2003angle: 0.000000rad \u2003\u2003\u2003backgroundColor: #00000000 \u2003\u2003\u2003color: #999999FF \u2003\u2003\u2003fontFamily: \u2003\u2003\u2003fontSize: 1.000000em \u2003\u2003\u2003fontStyle: normal \u2003\u2003\u2003fontWeight: normal \u2003\u2003\u2003maxFractionDigits: 3.000000 \u2003\u2003\u2003numberFormat: prefixed \u2003\u2003\u2003numberScale: k,M,G,T,P,E,Z,Y \u2003\u2003\u2003orientation: horizontal \u2003\u2003\u2003paddingBottom: 0.666667em \u2003\u2003\u2003paddingLeft: 0.666667em \u2003\u2003\u2003paddingRight: 0.666667em \u2003\u2003\u2003paddingTop: 0.666667em \u2003\u2003\u2003position: min-edge \u2003\u2003\u2003side: negative \u2003\u2003\u2003textAlign: left \u2003\u2003+ ticks \u2003\u2003\u2003color: #CCCCCCFF \u2003\u2003\u2003length: 0.416667em \u2003\u2003\u2003lineWidth: 1.000000 \u2003\u2003\u2003position: outside \u2003\u2003+ title \u2003\u2003\u2003backgroundColor: #00000000 \u2003\u2003\u2003color: #999999FF \u2003\u2003\u2003fontFamily: \u2003\u2003\u2003fontSize: 1.166667em \u2003\u2003\u2003fontStyle: normal \u2003\u2003\u2003fontWeight: normal \u2003\u2003\u2003maxFractionDigits: 3.000000 \u2003\u2003\u2003numberFormat: prefixed \u2003\u2003\u2003numberScale: k,M,G,T,P,E,Z,Y \u2003\u2003\u2003orientation: horizontal \u2003\u2003\u2003paddingBottom: 1.071429em \u2003\u2003\u2003paddingLeft: 0.357143em \u2003\u2003\u2003paddingRight: 0.357143em \u2003\u2003\u2003paddingTop: 0.357143em \u2003\u2003\u2003position: min-edge \u2003\u2003\u2003side: upon \u2003\u2003\u2003textAlign: left \u2003\u2003\u2003vposition: end \u2003\u2003\u2003vside: positive + title \u2003backgroundColor: #00000000 \u2003color: #494949FF \u2003fontFamily: \u2003fontSize: 2.166667em \u2003fontStyle: normal \u2003fontWeight: normal \u2003maxFractionDigits: 3.000000 \u2003numberFormat: prefixed \u2003numberScale: k,M,G,T,P,E,Z,Y \u2003paddingBottom: 0.000000px \u2003paddingLeft: 0.384615em \u2003paddingRight: 0.384615em \u2003paddingTop: 0.576923em \u2003textAlign: center + tooltip \u2003arrowSize: 8.000000 \u2003backgroundColor: #FFFFFFFF \u2003borderColor: #D8D8D8FF \u2003borderRadius: 3.000000 \u2003borderWidth: 1.000000 \u2003color: #191919FF \u2003distance: 2.000000 \u2003dropShadow: 3.000000 \u2003fontFamily: Roboto, sans-serif \u2003fontSize: 12.000000px \u2003fontStyle: normal \u2003fontWeight: normal \u2003layout: multiLine \u2003seriesName: \u2003shadowColor: #0000000A","title":"Style"},{"location":"tutorial/style/#style","text":"ipyizzu offers a wide variety of styling options when you want to personalize the look and feel of your animated charts. The styling properties are organized into a hierarchical structure. Font styles, when set on a higher level of this hierarchy, will be inherited on all lower levels. You can use absolute sizing ( px , pt ) and relative ( % , em , vw ). Similarly to all other parameters of the animate method, ipyizzu will animate the changes in the styling of the charts. This provides an excellent opportunity to check and control the effect of these changes. You can find below the complete list of the available styling properties and their default values. + expand all backgroundColor: #FFFFFFFF borderColor: #FFFFFFFF borderWidth: 0.000000 fontFamily: Roboto, sans-serif fontSize: 1.000000em fontStyle: normal fontWeight: normal + legend \u2003backgroundColor: #00000000 \u2003borderColor: #00000000 \u2003borderWidth: 0.000000 \u2003+ label \u2003\u2003backgroundColor: #00000000 \u2003\u2003color: #999999FF \u2003\u2003fontFamily: \u2003\u2003fontSize: 1.000000em \u2003\u2003fontStyle: normal \u2003\u2003fontWeight: normal \u2003\u2003maxFractionDigits: 3.000000 \u2003\u2003numberFormat: prefixed \u2003\u2003numberScale: k,M,G,T,P,E,Z,Y \u2003\u2003paddingBottom: 0.416667em \u2003\u2003paddingLeft: 0.416667em \u2003\u2003paddingRight: 0.416667em \u2003\u2003paddingTop: 0.416667em \u2003\u2003textAlign: left \u2003+ marker \u2003\u2003size: 1.285714em \u2003\u2003type: circle \u2003maxWidth: 30.000000% \u2003paddingBottom: 5.000000em \u2003paddingLeft: 1.666667em \u2003paddingRight: 0.416667em \u2003paddingTop: 0.833333em \u2003+ title \u2003\u2003backgroundColor: #00000000 \u2003\u2003color: #999999FF \u2003\u2003fontFamily: \u2003\u2003fontSize: 1.166667em \u2003\u2003fontStyle: normal \u2003\u2003fontWeight: normal \u2003\u2003maxFractionDigits: 3.000000 \u2003\u2003numberFormat: prefixed \u2003\u2003numberScale: k,M,G,T,P,E,Z,Y \u2003\u2003paddingBottom: 0.357143em \u2003\u2003paddingLeft: 0.357143em \u2003\u2003paddingRight: 0.357143em \u2003\u2003paddingTop: 0.857143em \u2003\u2003textAlign: left \u2003width: 8.333333em + logo \u2003filter: color(#D8D8D8FF) \u2003paddingBottom: 47.500000% \u2003paddingLeft: 40.000000% \u2003paddingRight: 40.000000% \u2003paddingTop: 47.500000% \u2003width: 3.186307em paddingBottom: 0.833333em paddingLeft: 0.416667em paddingRight: 0.416667em paddingTop: 0.416667em + plot \u2003backgroundColor: #00000000 \u2003borderColor: #00000000 \u2003borderWidth: 0.000000 \u2003+ marker \u2003\u2003borderOpacity: 1.000000 \u2003\u2003borderOpacityMode: premultiplied \u2003\u2003borderWidth: 1.000000 \u2003\u2003circleMaxRadius: 0.050000 \u2003\u2003circleMinRadius: 0.005000 \u2003\u2003colorGradient: #4171CDFF 0.000000, #8536C7FF 0.250000, #C33E7FFF 0.500000, #E9974EFF 0.750000, #F3F239FF 1.000000 \u2003\u2003colorPalette: #4171CDFF #03AE71FF #F4941BFF #F4C204FF #D49664FF #F25456FF #9E67ABFF #BCA604FF #846E1CFF #FC763CFF #B462ACFF #F492FCFF #BC4A94FF #9C7EF4FF #9C52B4FF #6CA2FCFF #5C6EBCFF #7C868CFF #AC968CFF #4C7450FF #AC7A4CFF #7CAE54FF #4C7450FF #9C1A6CFF #AC3E94FF #B41204FF \u2003\u2003fillOpacity: 1.000000 \u2003\u2003+ guides \u2003\u2003\u2003color: #E8E8E8FF \u2003\u2003\u2003lineWidth: 0.500000 \u2003\u2003+ label \u2003\u2003\u2003angle: 0.000000rad \u2003\u2003\u2003backgroundColor: #00000000 \u2003\u2003\u2003color: #00000000 \u2003\u2003\u2003filter: lightness(0.000000) \u2003\u2003\u2003fontFamily: \u2003\u2003\u2003fontSize: 0.916667em \u2003\u2003\u2003fontStyle: normal \u2003\u2003\u2003fontWeight: bold \u2003\u2003\u2003format: measureFirst \u2003\u2003\u2003maxFractionDigits: 3.000000 \u2003\u2003\u2003numberFormat: grouped \u2003\u2003\u2003numberScale: k,M,G,T,P,E,Z,Y \u2003\u2003\u2003orientation: horizontal \u2003\u2003\u2003paddingBottom: 0.454545em \u2003\u2003\u2003paddingLeft: 0.454545em \u2003\u2003\u2003paddingRight: 0.454545em \u2003\u2003\u2003paddingTop: 0.454545em \u2003\u2003\u2003position: center \u2003\u2003\u2003textAlign: center \u2003\u2003lineMaxWidth: 0.010000 \u2003\u2003lineMinWidth: 0.001000 \u2003\u2003maxLightness: 0.400000 \u2003\u2003minLightness: -0.400000 \u2003\u2003rectangleSpacing: null \u2003overflow: hidden \u2003paddingBottom: 5.000000em \u2003paddingLeft: 6.666667em \u2003paddingRight: 3.750000em \u2003paddingTop: 4.166667em \u2003+ xAxis \u2003\u2003color: #CCCCCCFF \u2003\u2003+ guides \u2003\u2003\u2003color: #EDEDEDFF \u2003\u2003\u2003lineWidth: 1.000000 \u2003\u2003+ interlacing \u2003\u2003\u2003color: #F7F7F7FF \u2003\u2003+ label \u2003\u2003\u2003angle: 0.000000rad \u2003\u2003\u2003backgroundColor: #00000000 \u2003\u2003\u2003color: #999999FF \u2003\u2003\u2003fontFamily: \u2003\u2003\u2003fontSize: 1.000000em \u2003\u2003\u2003fontStyle: normal \u2003\u2003\u2003fontWeight: normal \u2003\u2003\u2003maxFractionDigits: 3.000000 \u2003\u2003\u2003numberFormat: prefixed \u2003\u2003\u2003numberScale: k,M,G,T,P,E,Z,Y \u2003\u2003\u2003orientation: horizontal \u2003\u2003\u2003paddingBottom: 0.666667em \u2003\u2003\u2003paddingLeft: 0.666667em \u2003\u2003\u2003paddingRight: 0.666667em \u2003\u2003\u2003paddingTop: 0.666667em \u2003\u2003\u2003position: min-edge \u2003\u2003\u2003side: negative \u2003\u2003\u2003textAlign: left \u2003\u2003+ ticks \u2003\u2003\u2003color: #CCCCCCFF \u2003\u2003\u2003length: 0.416667em \u2003\u2003\u2003lineWidth: 1.000000 \u2003\u2003\u2003position: outside \u2003\u2003+ title \u2003\u2003\u2003backgroundColor: #00000000 \u2003\u2003\u2003color: #999999FF \u2003\u2003\u2003fontFamily: \u2003\u2003\u2003fontSize: 1.166667em \u2003\u2003\u2003fontStyle: normal \u2003\u2003\u2003fontWeight: normal \u2003\u2003\u2003maxFractionDigits: 3.000000 \u2003\u2003\u2003numberFormat: prefixed \u2003\u2003\u2003numberScale: k,M,G,T,P,E,Z,Y \u2003\u2003\u2003orientation: horizontal \u2003\u2003\u2003paddingBottom: 0.357143em \u2003\u2003\u2003paddingLeft: 0.357143em \u2003\u2003\u2003paddingRight: 0.357143em \u2003\u2003\u2003paddingTop: 1.714286em \u2003\u2003\u2003position: min-edge \u2003\u2003\u2003side: negative \u2003\u2003\u2003textAlign: left \u2003\u2003\u2003vposition: middle \u2003\u2003\u2003vside: upon \u2003+ yAxis \u2003\u2003color: #CCCCCCFF \u2003\u2003+ guides \u2003\u2003\u2003color: #EDEDEDFF \u2003\u2003\u2003lineWidth: 1.000000 \u2003\u2003+ interlacing \u2003\u2003\u2003color: #F7F7F7FF \u2003\u2003+ label \u2003\u2003\u2003angle: 0.000000rad \u2003\u2003\u2003backgroundColor: #00000000 \u2003\u2003\u2003color: #999999FF \u2003\u2003\u2003fontFamily: \u2003\u2003\u2003fontSize: 1.000000em \u2003\u2003\u2003fontStyle: normal \u2003\u2003\u2003fontWeight: normal \u2003\u2003\u2003maxFractionDigits: 3.000000 \u2003\u2003\u2003numberFormat: prefixed \u2003\u2003\u2003numberScale: k,M,G,T,P,E,Z,Y \u2003\u2003\u2003orientation: horizontal \u2003\u2003\u2003paddingBottom: 0.666667em \u2003\u2003\u2003paddingLeft: 0.666667em \u2003\u2003\u2003paddingRight: 0.666667em \u2003\u2003\u2003paddingTop: 0.666667em \u2003\u2003\u2003position: min-edge \u2003\u2003\u2003side: negative \u2003\u2003\u2003textAlign: left \u2003\u2003+ ticks \u2003\u2003\u2003color: #CCCCCCFF \u2003\u2003\u2003length: 0.416667em \u2003\u2003\u2003lineWidth: 1.000000 \u2003\u2003\u2003position: outside \u2003\u2003+ title \u2003\u2003\u2003backgroundColor: #00000000 \u2003\u2003\u2003color: #999999FF \u2003\u2003\u2003fontFamily: \u2003\u2003\u2003fontSize: 1.166667em \u2003\u2003\u2003fontStyle: normal \u2003\u2003\u2003fontWeight: normal \u2003\u2003\u2003maxFractionDigits: 3.000000 \u2003\u2003\u2003numberFormat: prefixed \u2003\u2003\u2003numberScale: k,M,G,T,P,E,Z,Y \u2003\u2003\u2003orientation: horizontal \u2003\u2003\u2003paddingBottom: 1.071429em \u2003\u2003\u2003paddingLeft: 0.357143em \u2003\u2003\u2003paddingRight: 0.357143em \u2003\u2003\u2003paddingTop: 0.357143em \u2003\u2003\u2003position: min-edge \u2003\u2003\u2003side: upon \u2003\u2003\u2003textAlign: left \u2003\u2003\u2003vposition: end \u2003\u2003\u2003vside: positive + title \u2003backgroundColor: #00000000 \u2003color: #494949FF \u2003fontFamily: \u2003fontSize: 2.166667em \u2003fontStyle: normal \u2003fontWeight: normal \u2003maxFractionDigits: 3.000000 \u2003numberFormat: prefixed \u2003numberScale: k,M,G,T,P,E,Z,Y \u2003paddingBottom: 0.000000px \u2003paddingLeft: 0.384615em \u2003paddingRight: 0.384615em \u2003paddingTop: 0.576923em \u2003textAlign: center + tooltip \u2003arrowSize: 8.000000 \u2003backgroundColor: #FFFFFFFF \u2003borderColor: #D8D8D8FF \u2003borderRadius: 3.000000 \u2003borderWidth: 1.000000 \u2003color: #191919FF \u2003distance: 2.000000 \u2003dropShadow: 3.000000 \u2003fontFamily: Roboto, sans-serif \u2003fontSize: 12.000000px \u2003fontStyle: normal \u2003fontWeight: normal \u2003layout: multiLine \u2003seriesName: \u2003shadowColor: #0000000A","title":"Style"},{"location":"tutorial/without_coordinates_noop_channel/","text":"Without coordinates & noop channel Certain chart types have neither measures nor dimensions on the axes such as treemaps and bubble charts. This is a case when the noop channel comes in handy for grouping and stacking elements in these kinds of charts. To get to a treemap, we have to detach all dimensions and the measure from the axes and put two of them on the size channel, whereas the other dimension is still on the color channel. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/music_data.csv\" ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Kinds\", \"Popularity\"]}, \"x\": {\"set\": [\"Genres\"]}, \"label\": {\"attach\": [\"Popularity\"]}, }, \"color\": {\"set\": [\"Kinds\"]}, } ) ) chart.animate( Config( { \"channels\": { \"y\": { \"set\": None, }, \"x\": { \"set\": None, }, \"size\": { \"attach\": [\"Genres\", \"Popularity\"], }, } } ) ) Getting from a treemap to a bubble chart is simply by changing the geometry to circle. This bubble chart is stacked by the Kinds dimension that is on the size channel - this is why the bubbles are in separate, small groups. chart.animate( Config( { \"geometry\": \"circle\", } ) ) In order to show all bubbles as one group, we use the noop (no operations) channel for the Genres dimension. The noop channel enables us to have a dimension on the chart, that doesn\u2019t affect any parameter of the elements, only their count. chart.animate( Config( { \"channels\": { \"size\": {\"detach\": \"Genres\"}, \"noop\": {\"set\": \"Genres\"}, } } ) )","title":"Without coordinates & noop channel"},{"location":"tutorial/without_coordinates_noop_channel/#without-coordinates-noop-channel","text":"Certain chart types have neither measures nor dimensions on the axes such as treemaps and bubble charts. This is a case when the noop channel comes in handy for grouping and stacking elements in these kinds of charts. To get to a treemap, we have to detach all dimensions and the measure from the axes and put two of them on the size channel, whereas the other dimension is still on the color channel. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config data_frame = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.14/assets/data/music_data.csv\" ) data = Data() data.add_data_frame(data_frame) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Kinds\", \"Popularity\"]}, \"x\": {\"set\": [\"Genres\"]}, \"label\": {\"attach\": [\"Popularity\"]}, }, \"color\": {\"set\": [\"Kinds\"]}, } ) ) chart.animate( Config( { \"channels\": { \"y\": { \"set\": None, }, \"x\": { \"set\": None, }, \"size\": { \"attach\": [\"Genres\", \"Popularity\"], }, } } ) ) Getting from a treemap to a bubble chart is simply by changing the geometry to circle. This bubble chart is stacked by the Kinds dimension that is on the size channel - this is why the bubbles are in separate, small groups. chart.animate( Config( { \"geometry\": \"circle\", } ) ) In order to show all bubbles as one group, we use the noop (no operations) channel for the Genres dimension. The noop channel enables us to have a dimension on the chart, that doesn\u2019t affect any parameter of the elements, only their count. chart.animate( Config( { \"channels\": { \"size\": {\"detach\": \"Genres\"}, \"noop\": {\"set\": \"Genres\"}, } } ) )","title":"Without coordinates &amp; noop channel"},{"location":"coverage/","text":"article h1, article > a, .md-sidebar--secondary { display: none !important; } var coviframe = document.getElementById(\"coviframe\"); function resizeIframe() { coviframe.style.height = coviframe.contentWindow.document.documentElement.offsetHeight + 'px'; } coviframe.contentWindow.document.body.onclick = function() { coviframe.contentWindow.location.reload(); }","title":"Coverage report"}]}